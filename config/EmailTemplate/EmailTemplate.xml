<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<EmailTemplate name="Certification">
  <Body>A new access certification report has been assigned to you: $workItemName.

Login and view your work item inbox to complete this access certification report.
    </Body>
  <Description>
      Email Template for notifying work item owners of new certifications.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItemName" type="string">
        <Description>The description property (also the name property) of the certification WorkItem.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object for the certification.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the certification.</Description>
      </Argument>
      <Argument name="ownerName" type="string">
        <Description>The display name of the Identity that owns the certification.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>New access certification: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Bulk Reassignment">
  <Body>$!requesterName has assigned $numNewIdentities users to you for access certification.  These have been added to $certificationName.

Description: $!description

Comments from $!requesterName:
--------------------------------------------------------------------------------
$!comments
--------------------------------------------------------------------------------

Login and view your work item inbox to complete this access certification report.
    </Body>
  <Description>
      Email Template for notifying a user when they have been reassigned identities
      from an existing certification.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification containing the items to reassign.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the items to reassign.</Description>
      </Argument>
      <Argument name="owner" type="Identity">
        <Description>The Identity object receiving the reassignment request.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>Comments from the reassigner.</Description>
      </Argument>
      <Argument name="description" type="string">
        <Description>Description of the reassignment.</Description>
      </Argument>
      <Argument name="numNewIdentities" type="string">
        <Description>Number of identities reassigned, passed as a string.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the reassignment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>New certification reassignment request: $certificationName</Subject>
</EmailTemplate>
<EmailTemplate name="Delegation">
  <Body>$!requesterName has delegated the following work item to you: $!workItemName.

Comments from $!requesterName:
--------------------------------------------------------------------------------
$!comments
--------------------------------------------------------------------------------

Login and view your work item inbox to complete this request.
    </Body>
  <Description>
      Email Template for notifying work item owners of new delegations.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem created for this delegation.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The description property (also the name property) of the delegation WorkItem.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>Comments from the delegator.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the delegated item.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the delegation.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>New delegation request: $!workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Delegation Revocation">
  <Body>$requesterName has revoked the following work item from you: $workItemName.  This work item will no longer appear in your queue.
    </Body>
  <Description>
      Email Template for notifying work item owners that their delegation
      work item has been revoked.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItemName" type="string">
        <Description>The description property of the delegation WorkItem.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the delegated item.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the delegation.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Work item revoked: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Delegation Finished">
  <Body>$delegateeName has finished the delegated item '$workItemName'.
Please review the items. 
    </Body>
  <Description>
      Email Template for notifying the original owner that the delegated item has been completed.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItemName" type="string">
        <Description>The description property of the delegation WorkItem.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the delegated item.</Description>
      </Argument>
      <Argument name="delegateeName" type="string">
        <Description>The display name of the Identity that finished the delegation.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Delegation Completed by $delegateeName</Subject>
</EmailTemplate>
<EmailTemplate cc="$!identity.manager.email" name="Remediation Notification">
  <Body>$requesterName has revoked one or more entitlements from you.

Comments from $requesterName:
--------------------------------------------------------------------------------
$!comments
--------------------------------------------------------------------------------

#if ($remediationDetails.nonModifyAccountRequests &amp;&amp;
     $remediationDetails.getNonModifyAccountRequests().size() &gt; 0)

Account Requests:
-----------------
#foreach ($acctReq in $remediationDetails.nonModifyAccountRequests)
Application: $acctReq.applicationName
  Operation: $acctReq.operation
 Account ID: $acctReq.nativeIdentity

#end
#end
#if ($remediationDetails.modifyAccountRequests &amp;&amp;
     $remediationDetails.getModifyAccountRequests().size() &gt; 0)

Modification Requests:
----------------------
#foreach ($acctReq in $remediationDetails.modifyAccountRequests)
Application: $acctReq.applicationName
#if ($acctReq.nativeIdentity) ## Role modification requests in IIQ won't have a nativeIdentity
 Account ID: $acctReq.nativeIdentity
#end

#foreach ($attrReq in $acctReq.attributeRequests)
  Operation: $attrReq.operation
  Attribute: $attrReq.name
   Value(s): $attrReq.value

#end
#foreach ($permReq in $acctReq.permissionRequests)
  Operation: $permReq.operation
 Permission: $permReq.target
   Right(s): $permReq.rightsList

#end

#end
#end
</Body>
  <Description>
      Email Template for notifying users that an item has been remediated.
      Notice that this is setup to CC the user's manager (see CC attribute above).

      Arguments
      ---------
      item:                The CertificationItem being remediated.
      remediationDetails:  The ProvisioningPlan with the entitlements being removed.
                           (Convenience accessor for item.action.remediationDetails)
      identity:            The Identity that is having their item remediated.
      comments:            Comments from the remediator about the remediation.
      requester:           The Identity that remediated the item.
      requesterName:       Full name of the Identity that remediated the item.
                           (Convenience accessor for requestor.fullName)
    </Description>
  <Signature>
    <Inputs>
      <Argument name="item" type="CertificationItem">
        <Description>The CertificationItem being remediated.</Description>
      </Argument>
      <Argument name="remediationDetails" type="ProvisioningPlan">
        <Description>The ProvisioningPlan with the entitlements being removed (Convenience accessor for item.action.remediationDetails).</Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>The Identity that owns the item being remediated.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>Comments from the remediator about the reason for remediation.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name (usually full name) of the identity that requested the remediation.</Description>
      </Argument>
      <Argument name="requester" type="Identity">
        <Description>The Identity object of the requester.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Access is being revoked by $requesterName</Subject>
</EmailTemplate>
<EmailTemplate name="Remediation Work Item">
  <Body>$!requesterName has assigned a new remediation work item to you: $!workItemName.

Comments from $!requesterName:
--------------------------------------------------------------------------------
$!comments
--------------------------------------------------------------------------------

Login and view your work item inbox to complete this request.
    </Body>
  <Description>
      Email Template for notifying work item owners of new remediation requests.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItemName" type="string">
        <Description>The name (also the description) of the remediation work item.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object representing the remediation.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the remediation.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>The Identity object that is the owner of the work item.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>New remediation request: $!workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Certification Sign Off Approval">
  <Body>$certification.name was signed by $certifier.displayableName and requires your approval.

Login and view your work item inbox to complete this request.
    </Body>
  <Description>
      Email Template for notifying users when a certification is signed and sent to them
      for approval.

      This supports the following parameters:
       - certification: The sailpoint.object.Certification object that was signed.
       - certifier:     The sailpoint.object.Identity that signed the certification.
       - approver:      The sailpoint.object.Identity that needs to approve the
                        certification.  This is the recipient of this email.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the delegated item.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object for the certification approval.</Description>
      </Argument>
      <Argument name="certifier" type="Identity">
        <Description>The Identity object for the user that finished the certification.</Description>
      </Argument>
      <Argument name="approver" type="Identity">
        <Description>The Identity object that is the owner of the work item.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>$certification.name requires approval</Subject>
</EmailTemplate>
<EmailTemplate name="Certification Reminder">
  <Body>$recipient.displayableName,
The certification "$certification.name" is still open and needs to be completed.#if ($certification.expiration)  This certification must be finished by $spTools.formatDate($certification.expiration,3,1).#{end}  Please login to IdentityIQ to complete your work.

--------------------------------------------------------------------------------
$!comment
--------------------------------------------------------------------------------

Sincerely,
$sender.displayableName</Body>
  <Description>
      Email Template for reminding a certification owner that they have a
      certification waiting for them to complete.
      This is an "instant" email sent on demand from the certification dashboard components.
      See EmailBean and Emailer.compileOpenCertEmail for context.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certification" type="Certification">
        <Description>The Certification object we are reminding someone about.</Description>
      </Argument>
      <Argument name="recipient" type="Identity">
        <Description>The Identity object of the user being reminded.</Description>
      </Argument>
      <Argument name="sender" type="Identity">
        <Description>The Identity object of the user doing the reminding.</Description>
      </Argument>
      <Argument name="comment" type="string">
        <Description>Optional comment from the sender.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Reminder: Certification needs your attention</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Reminder">
  <Body>This is your $ordinalNumReminders reminder that the work item $workItemName #if($requester)requested by $requester.displayableName, and #{end}created on $spTools.formatDate($created,3,1), #if($expiration)#if($expiration.getTime() &gt; $nowDate.getTime())is due on $spTools.formatDate($expiration,3,1).#{else}was due on $spTools.formatDate($expiration,3,1).#{end}#{else}was due on $spTools.formatDate($oldDueDate,3,1).#{end}

#if ($newDueDate &gt; $expiration)
The due date has been extended to $spTools.formatDate($newDueDate,3,1).

#end
#if ($remindersRemaining &gt; 0)
This work item will escalate after $remindersRemaining more reminder(s).

#end
Please login to IdentityIQ and view your work item inbox to resolve this at your earliest convenience.
    </Body>
  <Description>
      Email Template for reminding work item owners that their work
      items are overdue.
      NOTE: In addition to the declared arguments, all entries 
      from the work item attributes map are also available by name in the template.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The name of the WorkItem.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification.</Description>
      </Argument>
      <Argument name="ownerName" type="string">
        <Description>The name of the Identity that owns the work item.</Description>
      </Argument>
      <Argument name="requester" type="Identity">
        <Description>The identity object that represents the creator of the work item.</Description>
      </Argument>
      <Argument name="ordinalNumReminders" type="string">
        <Description>The number of this reminder, starting from 1.  Passed as a String.</Description>
      </Argument>
      <Argument name="remindersRemaining" type="string">
        <Description>The number of reminders remaining after this one.  Passed as a String.</Description>
      </Argument>
      <Argument name="oldDueDate" type="date">
        <Description>The former due date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="newDueDate" type="date">
        <Description>The new due date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="nowDate" type="date">
        <Description>The current date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="created" type="date">
        <Description>The date the work item was created, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="expiration" type="date">
        <Description>The optional date the work item completely expires, passed as a java.util.Date.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Work Item Reminder</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Escalation">
  <Body>The work item "$workItemName" escalated.  It previously belonged to $oldOwner and was due on $spTools.formatDate($oldDueDate,3,1).

It has now been assigned to you#if ($newDueDate), and its due date has been extended to $spTools.formatDate($newDueDate,3,1)#end.

Please login to IdentityIQ and view your work item inbox to resolve this at your earliest convenience.
    </Body>
  <Description>
      Email Template for alerting new work item owners when an item has
      escalated into their queue
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The name of the WorkItem.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification.</Description>
      </Argument>
      <Argument name="ownerName" type="string">
        <Description>The name of the Identity that owns the work item.</Description>
      </Argument>
      <Argument name="requester" type="Identity">
        <Description>The identity object that represents the creator of the work item.</Description>
      </Argument>
      <Argument name="ordinalNumReminders" type="string">
        <Description>The number of this reminder, starting from 1.  Passed as a String.</Description>
      </Argument>
      <Argument name="remindersRemaining" type="string">
        <Description>The number of reminders remaining after this one.  Passed as a String.</Description>
      </Argument>
      <Argument name="oldDueDate" type="date">
        <Description>The former due date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="newDueDate" type="date">
        <Description>The new due date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="nowDate" type="date">
        <Description>The current date, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="created" type="date">
        <Description>The date the work item was created, passed as a java.util.Date.</Description>
      </Argument>
      <Argument name="expiration" type="date">
        <Description>The optional date the work item completely expires, passed as a java.util.Date.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Escalated Work Item</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Comment">
  <Body>Comment added to work item "$workItemName" by $commentAuthor on $spTools.formatDate($commentDate,3,1)

--------------------------------------------------------------------------------
$!commentText</Body>
  <Description>
      Email Template for notifying the requester/owner of a work item
      that a new comment has been added.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object on which the comment was added.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The name (also the description) of the WorkItem.</Description>
      </Argument>
      <Argument name="comment" type="Comment">
        <Description>The Comment object with information about the comment.</Description>
      </Argument>
      <Argument name="commentAuthor" type="string">
        <Description>The name of the Identity that made the comment.</Description>
      </Argument>
      <Argument name="commentDate" type="date">
        <Description>The date the comment was made, represented as a java.util.Date object.</Description>
      </Argument>
      <Argument name="commentText" type="string">
        <Description>The text of the comment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>New comments added to work item "$workItemName"</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Forward">
  <Body>$requester forwarded work item "$workItemName" from $previousOwner to $newOwner on $spTools.formatDate($forwardDate,3,1)

--------------------------------------------------------------------------------
$!commentText</Body>
  <Description>
      Email Template for notifying the requester/new owner of a work item
      that it has been forwarded.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object being forwarded.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The name (also the description) of the WorkItem on which a comment was added.</Description>
      </Argument>
      <Argument name="previousOwner" type="string">
        <Description>The display name of the Identity that was the previous owner of the work item.</Description>
      </Argument>
      <Argument name="newOwner" type="string">
        <Description>The display name of the Identity that is the new owner of the work item.</Description>
      </Argument>
      <Argument name="requester" type="string">
        <Description>The display name of the Identity that requested the forwarding.</Description>
      </Argument>
      <Argument name="forwardDate" type="date">
        <Description>The date the forwarding was requested, represented as a java.util.Date object.</Description>
      </Argument>
      <Argument name="commentText" type="string">
        <Description>Comments about the forwarding.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Work item "$workItemName" forwarded</Subject>
</EmailTemplate>
<EmailTemplate name="Mitigation Expiration">
  <Body>The exception allowed for $!itemDescription on $identityName has expired.

Comments from $mitigator:
--------------------------------------------------------------------------------
$!comments
--------------------------------------------------------------------------------</Body>
  <Description>
      Email Template for notifying certifiers that a mitigation they requested
      has expired.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="identityName" type="string">
        <Description>The full name (first and last) of the Identity object that has the mitigation.</Description>
      </Argument>
      <Argument name="itemDescription" type="string">
        <Description>A short description of the item that was mitigated.</Description>
      </Argument>
      <Argument name="mitigationExpiration" type="MitigationExpiration">
        <Description>The sailpoint.object.MitigationExpiration that is sending this notification.</Description>
      </Argument>
      <Argument name="mitigator" type="string">
        <Description>The full name (first and last) of the Identity that created the mitigation.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>Comments from the expired mitigation.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Allowed exception has expired for $!identityName</Subject>
</EmailTemplate>
<EmailTemplate name="Policy Violation">
  <Body>A violation of policy '$policyName' rule '$constraintName' was detected on user '$identityName'.
    </Body>
  <Description>
      Email Template for notifying policy owners of violations.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="identity" type="Identity">
        <Description>The Identity object that has the violation.</Description>
      </Argument>
      <Argument name="policy" type="Policy">
        <Description>The Policy object containing the constraint that was violated.</Description>
      </Argument>
      <Argument name="constraint" type="BaseConstraint">
        <Description>A subclass of BaseConstraint representing the policy rule that was violated.</Description>
      </Argument>
      <Argument name="violation" type="PolicyViolation">
        <Description>The PolicyViolation object created to represent the violation.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity object that has the violation.</Description>
      </Argument>
      <Argument name="policyName" type="string">
        <Description>The name of the Policy object.</Description>
      </Argument>
      <Argument name="constraintName" type="string">
        <Description>The name of the constraint (aka rule) within the policy.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Policy violation by $identityName</Subject>
</EmailTemplate>
<EmailTemplate name="Policy Violation Delegation">
  <Body>A violation of policy '$violation.policyName' rule '$violation.constraintName' for user '$violation.identity.name' has been delegated to you for action.
    </Body>
  <Description>
      Email Template for notifying users of the delegation of a policy violation.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object representing the delegation.</Description>
      </Argument>
      <Argument name="violation" type="PolicyViolation">
        <Description>The PolicyViolation object being delegated.</Description>
      </Argument>
      <Argument name="actor" type="Identity">
        <Description>The Identity object performing the delegation.</Description>
      </Argument>
      <Argument name="description" type="string">
        <Description>A short description of the violation.</Description>
      </Argument>
      <Argument name="comments" type="string">
        <Description>Comments from the actor about the delegation.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Policy violation on $violation.identity.name</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Period Start">
  <Body>The challenge period has started for '$certificationName'.  You will be notified
if any certification decisions are challenged by the affected user.
    </Body>
  <Description>
      Email Template for notifying certification owners that the challenge period has started.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification beginning the challenge period.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge period started for '$certificationName'</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Period End">
  <Body>The challenge period has ended for '$certificationName'.  Login to IdentityIQ to
complete and sign off on the certification.
    </Body>
  <Description>
      Email Template for notifying certification owners that the challenge period has ended.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification beginning the challenge period.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge period ended for '$certificationName'</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Creation Notification">
  <Body>It has been determined that your access to '$challengeItem' will be limited or removed
completely.  You have $timeRemaining to challenge this decision.

Click on this link to challenge the decision: http://localhost:8080/identityiq/user/challenge.jsf?id=$challengeId
    </Body>
  <Description>
      Email Template for notifying a challenger that they can challenge a certification decision.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the item being challenged.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the certification.</Description>
      </Argument>
      <Argument name="entityName" type="string">
        <Description>The name of the item being challenged.</Description>
      </Argument>
      <Argument name="challengeItem" type="string">
        <Description>A short description of the item being challenged.</Description>
      </Argument>
      <Argument name="timeRemaining" type="string">
        <Description>The time remaining in the challenge period, formatted as a string.</Description>
      </Argument>
      <Argument name="challengeId" type="string">
        <Description>The database id of the WorkItem representing the challenge.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Access being removed or limited for '$challengeItem'</Subject>
</EmailTemplate>
<EmailTemplate name="Account Group Challenge Creation Notification">
  <Body>It has been determined that permissions on account group '$entityName' will be limited or removed
completely.  You have $timeRemaining to challenge this decision.

Click on this link to challenge the decision: http://localhost:8080/identityiq/user/challenge.jsf?id=$challengeId
    </Body>
  <Description>
      Email Template for notifying a challenger that they can challenge a certification decision.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certification" type="Certification">
        <Description>The Certification object containing the item being challenged.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the certification.</Description>
      </Argument>
      <Argument name="entityName" type="string">
        <Description>The name of the item being challenged.</Description>
      </Argument>
      <Argument name="challengeItem" type="string">
        <Description>A short description of the item being challenged.</Description>
      </Argument>
      <Argument name="timeRemaining" type="string">
        <Description>The time remaining in the challenge period, formatted as a string.</Description>
      </Argument>
      <Argument name="challengeId" type="string">
        <Description>The database id of the WorkItem representing the challenge.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Access being removed or limited for '$entityName'</Subject>
</EmailTemplate>
<EmailTemplate name="Certification Decision Challenged Notification">
  <Body>$challengerName has challenged the decision for '$challengeItem' in $certificationName.

Comments from $challengerName:
--------------------------------------------------------------------------------
$!challengeComments
--------------------------------------------------------------------------------

Please login to IdentityIQ to accept or reject this challenge.
</Body>
  <Description>
      Email Template for notifying a certifier that a decision has been challenged.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="challengeItem" type="string">
        <Description>The shortDescription property of the CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the Certification object containing the item being challenged.</Description>
      </Argument>
      <Argument name="challengerName" type="string">
        <Description>The full name (first and last) of the Identity that made the challenge.</Description>
      </Argument>
      <Argument name="challengeComments" type="string">
        <Description>Comments from the challenger.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Certification decision for '$challengeItem' challenged</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Accepted">
  <Body>$certifierName has accepted the challenge for '$challengeItem' and will change the decision.

Comments from $certifierName:
--------------------------------------------------------------------------------
$!decisionComments
--------------------------------------------------------------------------------
</Body>
  <Description>
      Email Template for notifying a challenger that their challenge was accepted.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="challengeItem" type="string">
        <Description>The shortDescription property of the CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="decisionComments" type="string">
        <Description>Comments to the challenger.</Description>
      </Argument>
      <Argument name="certifierName" type="string">
        <Description>The full name (first and last) of the Identity that accepted the challenge.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge accepted for '$challengeItem'</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Rejected">
  <Body>$certifierName has rejected the challenge for '$challengeItem'.  The decision will remain.

Comments from $certifierName:
--------------------------------------------------------------------------------
$!rejectionComments
--------------------------------------------------------------------------------
</Body>
  <Description>
      Email Template for notifying a challenger that their challenge was rejected.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="challengeItem" type="string">
        <Description>The shortDescription property of the CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="rejectionComments" type="string">
        <Description>Comments to the challenger.</Description>
      </Argument>
      <Argument name="certifierName" type="string">
        <Description>The full name (first and last) of the Identity that rejected the challenge.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge rejected for '$challengeItem'</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Expiration">
  <Body>The challenge period for '$challengeItem' has expired.  This certification decision can
no longer be contested.
    </Body>
  <Description>
      Email Template for notifying a challenger that they can no longer challenge a certification decision.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="challengeItem" type="string">
        <Description>The short description of the CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the certification containing the item being challenged.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge expired for '$challengeItem'</Subject>
</EmailTemplate>
<EmailTemplate name="Challenge Decision Expiration">
  <Body>The challenge period for the challenged item '$challengeItem' has expired without the
certifier accepting or rejecting the challenge.  The original decision will stay.
    </Body>
  <Description>
      Email Template for notifying a challenger and certifier that an item that was challenged was not
      acted upon (accepted or rejected) by the time the challenge period expired, so the decision will
      stay.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="challengeItem" type="string">
        <Description>The short description of the CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="certificationName" type="string">
        <Description>The name of the certification containing the item being challenged.</Description>
      </Argument>
      <Argument name="certification" type="Certification">
        <Description>The Certification object.</Description>
      </Argument>
      <Argument name="certificationItem" type="CertificationItem">
        <Description>The CertificationItem being challenged.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem for the challenge</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Challenge decision expired for '$challengeItem'</Subject>
</EmailTemplate>
<EmailTemplate name="Open Certifications">
  <Body>Dear $certifier,

You have $certification_count certification(s) outstanding.  Please login to
IdentityIQ to complete your certifications.

Sincerely,
The Recertification Admin Team
    </Body>
  <Description>
      Email Template for notifying a manager/app owner that they have open certifications outstanding.
      This is an "instant" email sent on demand from the certification dashboard components.
      See EmailBean and Emailer.compileOpenCertEmail for context.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="certifierName" type="string">
        <Description>The full name (first and last) of the Identity that owns certifications.</Description>
      </Argument>
      <Argument name="certificationCount" type="string">
        <Description>The number of certifications the identity owns, passed as a String.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>$certification_count Certification(s) Outstanding</Subject>
</EmailTemplate>
<EmailTemplate name="Task Result Signoff">
  <Body>Dear $owner,

You have been requested to signoff on a $objectType result named: $objectName.
Please login to IdentityIQ to perform the signoff.

    </Body>
  <Description>
      Email Template for notifying a signer of a task or report result.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="ownerName" type="string">
        <Description>The display name of the Identity that owns the task result and is expected to sign off.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that launched the task.</Description>
      </Argument>
      <Argument name="objectName" type="string">
        <Description>The name of the TaskResult object.</Description>
      </Argument>
      <Argument name="objectType" type="string">
        <Description>Set to "report" if this is a report result or "task" if this is a general task result.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Signoff for $objectType $objectName</Subject>
</EmailTemplate>
<EmailTemplate name="Default Report Template">
  <Body>Please find the requested report file(s) attached to this email.</Body>
  <Description>
      Default email template for sending report results.
      NOTE: There are no input arguments for this template, the report
      is sent as a PDF and/or csv attachment.
    </Description>
  <Subject>IdentityIQ Report</Subject>
</EmailTemplate>
<EmailTemplate name="Provisioning Form Notification">
  <Body>
      
A provisioning form for user $identityDisplayName needs to be completed before the provisioning request can be completed.

Please login to IdentityIQ and view your work item inbox to complete this form at your earliest convenience.
      
     </Body>
  <Description>
      Email Template for notifying users when they have provisioning forms to complete.
      This is used by the Do Provisioning Forms workflow subprocess.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem representing the review.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name (usually full name) of the Identity that is the target of the provisioning.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Provisioning Form for $identityDisplayName pending completion</Subject>
</EmailTemplate>
<EmailTemplate name="Account Selection Notification">
  <Body>The accounts that are being targeted for changes must be selected for $identityDisplayName before the provisioning request can be completed.

Please login to IdentityIQ and view your work item inbox to complete this form at your earliest convenience.</Body>
  <Description>
      Email Template for notifying users when they need to select which accounts
      a provisioning request should apply to when a user has multiple accounts on
      an application.

      This is used by the Do Provisioning Forms workflow subprocess.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem representing the account selection.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name (usually full name) of the Identity that is the target of the provisioning.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is the target of the provisioning.</Description>
      </Argument>
      <Argument multi="true" name="accounts" type="AccountSelection">
        <Description>A list of AccountSelection objects for the accounts that need to be selected.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Account selection required for $identityDisplayName</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Assignment">
  <Body>#if ($requesterName) $requesterName #{else} The system #{end} has assigned the following work item to you: $workItemName.
    </Body>
  <Description>
      Email Template for notifying work item assignee that they have
      been assigned a work item.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem that is being reassigned.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The description property of the WorkItem.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the assignment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Work item assigned: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Work Item Assignment Removal">
  <Body>#if ($requesterName) $requesterName #{else} The system #{end} has removed the following work item from your queue: $workItemName.
    </Body>
  <Description>
      Email Template for notifying work item assignee that a workitem has been removed
      from their queue.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem that is being reassigned.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The description property of the WorkItem.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the assignment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Work item assignment removed: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Remediation Item Assignment">
  <Body>#if ($requesterName) $requesterName #{else} The system #{end} has assigned the following remediation item to you: $remediationItemName. This item is contained within the work item $workItemName.
    </Body>
  <Description>
      Email Template for notifying remediation item assignee that they have
      been assigned a remediation item.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="remediationItem" type="RemediationItem">
        <Description>The RemediationItem that is being reassigned.</Description>
      </Argument>
      <Argument name="remediationItemName" type="string">
        <Description>The description property of the remediationItem.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The parent WorkItem of the RemediationItem being reassigned.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The description property of the WorkItem.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the assignment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Remediation item assigned: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Remediation Item Assignment Removal">
  <Body>#if ($requesterName) $requesterName #{else} The system #{end} has removed the following remediation item from your queue: $remediationItemName. This item is contained within the work item $workItemName.
    </Body>
  <Description>
      Email Template for notifying remediation item assignee that a remediation item has been removed
      from their queue.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="remediationItem" type="RemediationItem">
        <Description>The RemediationItem that is being reassigned.</Description>
      </Argument>
      <Argument name="remediationItemName" type="string">
        <Description>The description property of the remediationItem.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The parent WorkItem of the RemediationItem being reassigned.</Description>
      </Argument>
      <Argument name="workItemName" type="string">
        <Description>The description property of the WorkItem.</Description>
      </Argument>
      <Argument name="requesterName" type="string">
        <Description>The display name of the Identity that requested the assignment.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Remediation item assignment removed: $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Access Request Reminder">
  <Body>You have a pending work item that requires attention. Work Item: $workItemDescription

--------------------------------------------------------------------------------
$!comment
    </Body>
  <Description>
      Email template used to notify work item owner of pending work item for access request.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workItemName" type="string">
        <Description>The description property (also the name property) of the request WorkItem.</Description>
      </Argument>
      <Argument name="workItemDescription" type="string">
        <Description>The WorkItem description.</Description>
      </Argument>
      <Argument name="workItem" type="WorkItem">
        <Description>The WorkItem object for the request.</Description>
      </Argument>
      <Argument name="comment" type="string">
        <Description>Comment from the sender.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Access Request requires completion of Work Item ID : $workItemName</Subject>
</EmailTemplate>
<EmailTemplate name="Task Status">
  <Body>
The '$taskName' task#if ($status == "Success" ) ended successfully.#{end}#if ($status == "Warning" ) ended with warning.#{end}#if ($status == "Terminated" ) terminated.#{end}#if ($status == "Error" ) ended with error.#{end}

     
       Started : $spTools.formatDate($taskStartTime,3,1)
Completed : $spTools.formatDate($taskEndTime,3,1)

#foreach ($msg in $message)
$msg
#end

For more details, please check - http://localhost:8080/identityiq/monitor/tasks/renderResults.jsf?TaskResultId=$resultId

  </Body>
  <Description>
    Email Template for notifying result of Task.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="taskResult" type="TaskResult">
        <Description>Task Result</Description>
      </Argument>
      <Argument name="taskName" type="string">
        <Description>Task Name</Description>
      </Argument>
      <Argument name="taskDesc" type="string">
        <Description>Task Description</Description>
      </Argument>
      <Argument name="taskStartTime" type="date">
        <Description>Time when task is started</Description>
      </Argument>
      <Argument name="taskEndTime" type="date">
        <Description>Time when task is completed.</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>Task Status</Description>
      </Argument>
      <Argument multi="true" name="message" type="string">
        <Description>List of Messages</Description>
      </Argument>
      <Argument name="resultId" type="string">
        <Description>Task Result Id</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Task $taskName Status - $status </Subject>
</EmailTemplate>
<EmailTemplate name="Report Completion">
  <Body>Your report '$reportName' has completed. You may retrieve your report by clicking on the Report Results tab under Analyze -&gt; Reports.
    </Body>
  <Description>
      Email Template for notifying report scheduler that the report execution is complete.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="reportName" type="string">
        <Description>Name of the report that was completed</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Report execution complete</Subject>
</EmailTemplate>
<EmailTemplate name="Alert Notification">
  <Body>Alert '$alert.name'#{if} ($alert.displayName) ['$alert.displayName']#{end}  has been received#{if} ($alert.targetType) for '$alert.targetType' '$alert.targetDisplayName'#{end}.
  </Body>
  <Description>
    Email Template for notifying configured user(s) when an Alert has been acted upon.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="alert" type="Alert">
        <Description>The alert object being acted upon.</Description>
      </Argument>
      <Argument name="alertDefinitionName" type="string">
        <Description>Name of the Alert Definition triggering the action.</Description>
      </Argument>
      <Argument name="errorMessage" type="string">
        <Description>Optional message containing more meaningful insight upon error</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Alert Notification</Subject>
</EmailTemplate>
<EmailTemplate name="Sunset Expiration Reminder">
  <Body>#if ($role)Role $role #{else}Entitlement $entitlement #{end}belonging to $requestee which was requested by $requestor will be removed on $sunsetDate
  </Body>
  <Description>
    Email Template for notifying the requestee and requestor when a Role or Entitlement is about to be sunsetted.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="requestor" type="string">
        <Description>The Identity of the original request to sunset the role or entitlement</Description>
      </Argument>
      <Argument name="requestee" type="string">
        <Description>The Identity that the role or entitlement belongs to</Description>
      </Argument>
      <Argument name="role" type="string">
        <Description>The name of the role</Description>
      </Argument>
      <Argument name="entitlement" type="string">
        <Description>The name of the entitlement</Description>
      </Argument>
      <Argument name="sunsetDate" type="date">
        <Description>The date that the role or entitlement will be removed on</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Access Expiration Reminder</Subject>
</EmailTemplate>
<EmailTemplate name="Entitlement Update Approval">
  <Body>$launcher requested changes on $summaryName. 

Login and view your work item inbox to complete this approval.
  </Body>
  <Description>
    Email Template for notifying approvers of a new entitlement update.
    Note that in addition to the declared arguments, all workflow variables,
    Step arguments, and Approval arguments defined in the Workflow are
    also available.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item">
        <Description>The WorkItem representing the review</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Changes requested for $summaryName needs approval</Subject>
</EmailTemplate>
<EmailTemplate name="Pending Manual Changes">
  <Body>
      
$launcher is requesting the following changes for '$identityDisplayName' be manually made by you.

#if ( $approvalSet.items )
#foreach ($item in $approvalSet.items)
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
       
    </Body>
  <Description>
      Email Template for notifying approvers when they need to do perform an account action manually
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="Workitem">
        <Description>The WorkItem representing the review.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the work item.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is being changed.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Changes requested to $identityDisplayName need manual interaction</Subject>
</EmailTemplate>
<EmailTemplate name="Role Modeler - Impact Analysis Review">
  <Body>An impact analysis of role '$roleName' has been assigned to you.

Login and view your work item inbox to complete this review.
  </Body>
  <Description>
    Email Template for notifying role impact analysis reviewers.
    Note that in addition to the declared arguments, all workflow variables,
    Step arguments, and Approval arguments defined in the Workflow are
    also available.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item">
        <Description>The WorkItem representing the review</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="roleName" type="string">
        <Description>The name of the role being analyzed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Review impact analysis of role: $roleName</Subject>
</EmailTemplate>
<EmailTemplate name="Role Modeler - Approval">
  <Body>An approval is required for a modification of the role '$roleName' made by $launcher. 

Login and view your work item inbox to complete this approval.
  </Body>
  <Description>
    Email Template for notifying role approvers of a new work item.
    Note that in addition to the declared arguments, all workflow variables,
    Step arguments, and Approval arguments defined in the Workflow are
    also available.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item">
        <Description>The WorkItem representing the review</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="roleName" type="string">
        <Description>The name of the role being analyzed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Approve modification to role: $roleName</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Identity Update Approval">
  <Body>
      
$launcher is requesting the following changes for '$identityDisplayName'

#if ( $approvalSet.items )
#foreach ($approvalItem in $approvalSet.items)
        Application: $approvalItem.applicationName
#if ( $approvalItem.nativeIdentity )       
           Account : $approvalItem.nativeIdentity
#end           
#if ( $approvalItem.instance ) 
          Instance : $approvalItem.instance
#end
          Operation: $approvalItem.operation
#if ( $approvalItem.displayName )          
          Attribute: $approvalItem.displayName
#elseif ( $approvalItem.name ) 
          Attribute: $approvalItem.name
#end          
#if ( $approvalItem.displayValue )
           Value(s): $approvalItem.displayValue
#elseif ( $approvalItem.csv ) 
           Value(s): $approvalItem.csv
#end
#if ( $item.level )
           Priority: $item.level
#else
           Priority: Normal
#end 
#if ( $approvalItem.requesterComments )
 Requester Comments: $approvalItem.requesterComments
#end
#end
#end
       
    </Body>
  <Description>
      Email Template for notifying approvers when they need to approve a request made through LCM.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem representing the review.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the work item.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is being changed.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Changes requested to $identityDisplayName need approval </Subject>
</EmailTemplate>
<EmailTemplate name="LCM User Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
$launcher requested the following account changes to your identity '$identityDisplayName' and they were APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
$launcher requested the following account changes to your identity '$identityDisplayName' and they were REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.rejecters
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
$launcher requested the following account changes to your identity '$identityDisplayName' and the request required no approval because approvals are disabled.

#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end

    </Body>
  <Description>
      Email Template for notifying users when accounts have been changed through Life Cycle Manager.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Changes to your Identity were processed</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Requester Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
The following changes you requested for identity '$identityDisplayName' were APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
The following changes you requested for identity '$identityDisplayName' were REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.rejecters
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
The following are the changes you requested for identity '$identityDisplayName' and the request required no approval because approvals are disabled.

#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end
      
    </Body>
  <Description>
      Email Template for notifying requesters when their employee's account(s) are modified.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Account changes you requested for $identityDisplayName were processed</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Manager Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
$launcher requested the following account changes for employee '$identityDisplayName' and they were APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
$launcher requested the following account changes for employee '$identityDisplayName' and they were REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.rejecters
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
$launcher requested the following changes for employee '$identityDisplayName' and the request required no approval because approvals are disabled.

#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end
      
    </Body>
  <Description>
      Email Template for notifying managers when an employee's account(s) are modified.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Account changes for $identityDisplayName were processed</Subject>
</EmailTemplate>
<EmailTemplate name="Batch Approval">
  <Body>
      
$launcher is requesting approval to run in a batch request file.

#if ( $approvalSet.items )
#foreach ($item in $approvalSet.items)
    Content Preview: $item.displayValue
#end
#end
       
    </Body>
  <Description>
      Email Template for notifying approvers when they need to approve a request made through LCM.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem representing the review.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the work item.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Changes requested to $identityDisplayName need approval </Subject>
</EmailTemplate>
<EmailTemplate name="LCM Registration User Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
The following registration request for your identity '$identityDisplayName' was APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
The following registration request for your identity '$identityDisplayName' was REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.owner
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
The following is the registration request for your identity '$identityDisplayName' and the request required no approval because approvals are disabled.

#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end

    </Body>
  <Description>
      Email Template for notifying users when registration requests are completed.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Your registration request has been processed</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Registration Manager Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
The following registration request for employee '$identityDisplayName' was APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
The following registration request for employee '$identityDisplayName' was REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.owner
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
The following is the registration request for employee '$identityDisplayName' and the request required no approval because approvals are disabled.
 
#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end
      
    </Body>
  <Description>
      Email Template for notifying managers when an employee's registration request is completed.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Registration request for $identityDisplayName has been processed</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Registration Security Officer Notification">
  <Body>
      
#if ( $approvalSet )
#if ( $approvalSet.hasApproved() ) 
The following registration request for identity '$identityDisplayName' was APPROVED.

#foreach ($item in $approvalSet.approved)
#if ( $item.owner &amp;&amp; $item.owner != $launcher ) 
        Approved By: $item.owner
#end
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
#if ( $approvalSet.hasRejected() ) 
The registration request for identity '$identityDisplayName' was REJECTED.

#foreach ($item in $approvalSet.rejected)
        Rejected By: $item.owner
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end

#end
#end
## 
## Handle case where the items are not approved or rejected when the
## approvalScheme is none.
##
#if ( $approvalScheme == "none" )
The following are the changes requested for identity '$identityDisplayName' and the request required no approval because approvals are disabled.

#foreach ($item in $approvalSet.items)
#if ( $item.comments)
#foreach ($comment in $item.comments)
Completion Comments: $comment
#end
#end
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue )
           Value(s): $item.displayValue
#elseif ( $item.csv ) 
           Value(s): $item.csv
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
#end
      
    </Body>
  <Description>
      Email Template for notifying security officers when a registration request is completed.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Registration request for $identityDisplayName has been processed</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Registration Approval">
  <Body>
      
A user is attempting to register a new identity for '$identityDisplayName'.

#if ( $approvalSet.items )
#foreach ($approvalItem in $approvalSet.items)
        Application: $approvalItem.applicationName
#if ( $approvalItem.nativeIdentity )       
           Account : $approvalItem.nativeIdentity
#end           
#if ( $approvalItem.instance ) 
          Instance : $approvalItem.instance
#end
          Operation: $approvalItem.operation
#if ( $approvalItem.displayName )          
          Attribute: $approvalItem.displayName
#elseif ( $approvalItem.name ) 
          Attribute: $approvalItem.name
#end          
#if ( $approvalItem.displayValue )
           Value(s): $approvalItem.displayValue
#elseif ( $approvalItem.csv ) 
           Value(s): $approvalItem.csv
#end
#if ( $item.level )
           Priority: $item.level
#else
           Priority: Normal
#end 
#if ( $approvalItem.requesterComments )
 Requester Comments: $approvalItem.requesterComments
#end
#end
#end
       
    </Body>
  <Description>
      Email Template for notifying approvers when they need to approve a registration request.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="item" type="WorkItem">
        <Description>The WorkItem representing the review.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the work item.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Registration request for $identityDisplayName needs approval</Subject>
</EmailTemplate>
<EmailTemplate name="LCM Password Change Notification">
  <Body>
      

#if ( $launcher != $identityName &amp;&amp; $launcher != "SailPointContextRequestFilter" )
$launcher requested the following password changes be made to your account(s).
#else
The following password changes were made to your account(s) at your request.
#end

#if ( $approvalSet.items )
#foreach ($item in $approvalSet.items)
        Application: $item.applicationName
#if ( $item.nativeIdentity )       
           Account : $item.nativeIdentity
#end           
#if ( $item.instance ) 
          Instance : $item.instance
#end
          Operation: $item.operation
#if ( $item.displayName )          
          Attribute: $item.displayName
#elseif ( $item.name ) 
          Attribute: $item.name
#end
#if ( $item.displayValue)
           Value(s): $item.displayValue
#end
#if ( $item.requesterComments )
 Requester Comments: $item.requesterComments
#end
#end
#end
       
    </Body>
  <Description>
      Email Template for notifying user's when their password has been changed.
      Note that in addition to the declared arguments, all workflow variables,
      Step arguments, and Approval arguments defined in the Workflow are
      also available.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="launcher" type="string">
        <Description>The name of the Identity that launched the workflow.</Description>
      </Argument>
      <Argument name="identityName" type="string">
        <Description>The name of the Identity that is being changed.</Description>
      </Argument>
      <Argument name="identityDisplayName" type="string">
        <Description>The display name of the Identity that is being changed.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>Password Changes to $identityDisplayName</Subject>
</EmailTemplate>
<EmailTemplate name="Native Account Change Manager Notification">
  <Body>
            
IdentityIQ detected the following native changes on your accounts:

#if ( $event.nativeChanges)
#foreach ($change in $event.nativeChanges)

       Operation  : $change.operation
       Application: $change.applicationName
#if ( $change.nativeIdentity )       
           Account : $change.nativeIdentity
#end 
#if ( $change.instance ) 
          Instance : $change.instance
#end               
#if ( $change.differences )
#foreach ($difference in $change.differences)
            Attribute      : $difference.attribute
#if ( not $difference.multi)
#if ( $difference.newValue )
            New Value(s) : $difference.newValue
#end
#end
#if ( $difference.multi)
#if ( $difference.addedValues ) 
            Added Value(s) : $difference.addedValues
#end
#if ( $difference.removedValues )
            Removed Value(s) : $difference.removedValues
#end
#end
#end 
#end 
#end 
#end  

    </Body>
  <Description>
    </Description>
  <Signature>
    <Inputs>
      <Argument name="event" type="Workflow">
        <Description>Identity Change Event, which will have a list of 
            NativeChangeDetections on it. 
          </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>IdentityIQ detected native changes on $identityName</Subject>
</EmailTemplate>
<EmailTemplate name="RapidSetup-Email-GlobalFooter">
  <Body>
    &lt;p&gt;Global Footer&lt;/p&gt;		
  </Body>
  <Subject>Global Footer</Subject>
</EmailTemplate>
<EmailTemplate name="RapidSetup-Email-GlobalHeader">
  <Body>
    &lt;p&gt;Global Header&lt;/p&gt;		
  </Body>
  <Subject>Global Header</Subject>
</EmailTemplate>
<EmailTemplate name="RapidSetup-Email-GlobalStyleSheet">
  <Body>
  &lt;style type="text/css"&gt;
  table {
		  border: none;
		  padding: 20px 40px 20px 40px;
		  margin: 0 auto;
		  color: #333333;
		  width: 100%;
		  border-collapse: separate !important;
		}
	&lt;/style&gt;	   
  </Body>
  <Subject>Global Style Sheet</Subject>
</EmailTemplate>
<EmailTemplate name="Leaver Ownership Reassignment Notification">
  <Body>
   		 
		#set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
		#set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
		#set($reqType = $workflow.requestType)
		#set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
		#set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
		#set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
		&lt;html&gt;
		&lt;head&gt;
		&lt;meta charset="UTF-8"&gt;	    
		#if( $styleSheet )
		$styleSheet
		#end
		&lt;/head&gt;
	    	&lt;body&gt;
	    	#if( $headerTemplate )
			$headerTemplate
			#end
			&lt;br/&gt;    
			#if ( $ownershipMap )
			    Dear $recipientDisplayName,&lt;br/&gt;
			    &lt;p&gt;IdentityIQ access for '$refIdentityDisplayName' has been reassigned: &lt;/p&gt;
			    &lt;p&gt;The following IdentityIQ artifacts have been reassigned to you. &lt;/p&gt;
			    &lt;ul&gt;
			    #foreach ($mapEntry in $ownershipMap.entrySet())
    				&lt;li&gt;$mapEntry.key - $mapEntry.value&lt;/li&gt;
			    #end 
			    &lt;/ul&gt;  
			#end
			#if ($dynamicAppContent)
			&lt;table&gt;
			#foreach( $key in $dynamicAppContent.keySet() )
			&lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
			#end
			&lt;/table&gt;
			#end	
			#if( $footerTemplate )
			$footerTemplate
			#end
			&lt;/body&gt;
		&lt;/html&gt;
				
    </Body>
  <Description>
      Email Template for notifying the Manager that an Identity had ownerships during Leaver process
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>User '$refIdentityDisplayName' #if($emailSubject) $emailSubject #else Ownership #end reassignments</Subject>
</EmailTemplate>
<EmailTemplate name="Terminate Ownership Reassignment Notification">
  <Body>
      
		#set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
		#set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
		#set($reqType = $workflow.requestType)
		#set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
		#set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
		#set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
		&lt;html&gt;
		&lt;head&gt;
		&lt;meta charset="UTF-8"&gt;
		#if( $styleSheet )
		$styleSheet
		#end
		&lt;/head&gt;
	    	&lt;body&gt;
	    	#if( $headerTemplate )
			$headerTemplate
			#end
			&lt;br/&gt;
			#if ( $ownershipMap )
			    Dear $recipientDisplayName,&lt;br/&gt;
			    &lt;p&gt;IdentityIQ access for '$refIdentityDisplayName' has been reassigned: &lt;/p&gt;
			    &lt;p&gt;The following IdentityIQ artifacts have been reassigned to you. &lt;/p&gt;
			    &lt;ul&gt;
			    #foreach ($mapEntry in $ownershipMap.entrySet())
    				&lt;li&gt;$mapEntry.key - $mapEntry.value&lt;/li&gt;
			    #end
			    &lt;/ul&gt;
			#end
			#if ($dynamicAppContent)
			&lt;table&gt;
			#foreach( $key in $dynamicAppContent.keySet() )
			&lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
			#end
			&lt;/table&gt;
			#end
			#if( $footerTemplate )
			$footerTemplate
			#end
			&lt;/body&gt;
		&lt;/html&gt;
		
    </Body>
  <Description>
      Email Template for notifying the Manager that an Identity had ownerships during Terminate process
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>User '$refIdentityDisplayName' #if($emailSubject) $emailSubject #else Ownership #end reassignments</Subject>
</EmailTemplate>
<EmailTemplate name="Leaver Completed Notification">
  <Body>

  #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
  #set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
  #set($reqType = $workflow.requestType)
  #set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
  #set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate")) #set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
  &lt;html&gt;
  &lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  #if( $styleSheet )
    $styleSheet
  #end
  &lt;/head&gt;
  &lt;body&gt;
  #if( $headerTemplate )
    $headerTemplate
  #end
  &lt;br/&gt;
  Dear $recipientDisplayName,&lt;br/&gt;
  &lt;p&gt;Termination of Identity '$refIdentityDisplayName' completed.&lt;/p&gt;
  #if ( $plan &amp;&amp; $plan.accountRequests &amp;&amp; !$disableStaticManagerContent )
    &lt;ul&gt;
    #set($approvedAccountRequests = $emailTools.getApprovedAccountRequest($plan.accountRequests, $approvalSet, "leaver"))
    #foreach ( $acctReq in $approvedAccountRequests )
      &lt;li&gt;Application: $!acctReq.applicationName&lt;/li&gt;
      &lt;ul&gt;
      #if ( $!{acctReq.arguments["comments"]} )
        #foreach ( $comment in $!{acctReq.arguments["comments"]} )
          &lt;li&gt;Completion Comments: $comment&lt;/li&gt;
        #end
      #end
      #if ( $!acctReq.nativeIdentity )
        &lt;li&gt;Account ID : $!acctReq.nativeIdentity&lt;/li&gt;
      #end
      #if ( $!acctReq.op )
        &lt;li&gt;Operation: $!acctReq.op&lt;/li&gt;
      #end
      &lt;ul&gt;
      #foreach ( $attrReq in $acctReq.attributeRequests )
        #if ( $!attrReq.name )
          &lt;li&gt;Attribute Name : $!attrReq.name&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Display Value: $!attrReq.displayValue&lt;/li&gt;
        #end
        #if ( $!attrReq.op )
          &lt;li&gt;Operation: $!attrReq.op&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Attribute Value: $!attrReq.displayValue&lt;/li&gt;
        #elseif ( $!attrReq.value )
          &lt;li&gt;Attribute Value: $!attrReq.value&lt;/li&gt;
        #end
      #end
      #if ( $!{acctReq.arguments["requesterComments"]} )
        &lt;li&gt;Requester Comments: $!{acctReq.arguments["requesterComments"]}&lt;/li&gt;
      #end
      &lt;/ul&gt;
      &lt;/ul&gt;
    #end
    &lt;/ul&gt;
  #end
  #if ( $dynamicAppContent )
    &lt;table&gt;
    #if ( !$disableStaticManagerContent )
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #else
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #end
    &lt;/table&gt;
  #end
  #if ( $provisioningErrors )
    The following errors occurred during provisioning:
    &lt;ul&gt;
    #foreach ( $error in $provisioningErrors )
      &lt;li&gt;$!error&lt;/li&gt;
    #end
    &lt;/ul&gt;
  #end
  #if( $footerTemplate )
    $footerTemplate
  #end
  &lt;/body&gt;
  &lt;/html&gt;
        
    </Body>
  <Description>
      Email Template for notifying the manager when Leaver process has been completed
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User '$refIdentityDisplayName' has been terminated </Subject>
</EmailTemplate>
<EmailTemplate name="Terminate Completed Notification">
  <Body>
    
  #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
  #set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
  #set($reqType = $workflow.requestType)
  #set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
  #set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate")) #set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
  &lt;html&gt;
  &lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  #if( $styleSheet )
    $styleSheet
  #end
  &lt;/head&gt;
  &lt;body&gt;
  #if( $headerTemplate )
    $headerTemplate
  #end
  &lt;br/&gt;
  Dear $recipientDisplayName,&lt;br/&gt;
  &lt;p&gt;Termination of Identity '$refIdentityDisplayName' completed.&lt;/p&gt;
  #if ( $plan &amp;&amp; $plan.accountRequests &amp;&amp; !$disableStaticManagerContent )
    &lt;ul&gt;
    #set($approvedAccountRequests = $emailTools.getApprovedAccountRequest($plan.accountRequests, $approvalSet, "terminate"))
    #foreach ( $acctReq in $approvedAccountRequests )
      &lt;li&gt;Application: $!acctReq.applicationName&lt;/li&gt;
      &lt;ul&gt;
      #if ( $!{acctReq.arguments["comments"]} )
        #foreach ( $comment in $!{acctReq.arguments["comments"]} )
          &lt;li&gt;Completion Comments: $comment&lt;/li&gt;
        #end
      #end
      #if ( $!acctReq.nativeIdentity )
        &lt;li&gt;Account ID : $!acctReq.nativeIdentity&lt;/li&gt;
      #end
      #if ( $!acctReq.op )
        &lt;li&gt;Operation: $!acctReq.op&lt;/li&gt;
      #end
      &lt;ul&gt;
      #foreach ( $attrReq in $acctReq.attributeRequests )
        #if ( $!attrReq.name )
          &lt;li&gt;Attribute Name : $!attrReq.name&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Display Value: $!attrReq.displayValue&lt;/li&gt;
        #end
        #if ( $!attrReq.op )
          &lt;li&gt;Operation: $!attrReq.op&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Attribute Value: $!attrReq.displayValue&lt;/li&gt;
        #elseif ( $!attrReq.value )
          &lt;li&gt;Attribute Value: $!attrReq.value&lt;/li&gt;
        #end
      #end
      #if ( $!{acctReq.arguments["requesterComments"]} )
        &lt;li&gt;Requester Comments: $!{acctReq.arguments["requesterComments"]}&lt;/li&gt;
      #end
      &lt;/ul&gt;
      &lt;/ul&gt;
    #end
    &lt;/ul&gt;
  #end
  #if ( $dynamicAppContent )
    &lt;table&gt;
    #if ( !$disableStaticManagerContent )
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #else
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #end
    &lt;/table&gt;
  #end
  #if ( $provisioningErrors )
    The following errors occurred during provisioning:
    &lt;ul&gt;
    #foreach ( $error in $provisioningErrors )
      &lt;li&gt;$!error&lt;/li&gt;
    #end
    &lt;/ul&gt;
  #end
  #if( $footerTemplate )
    $footerTemplate
  #end
  &lt;/body&gt;
  &lt;/html&gt;
  
  </Body>
  <Description>
    Email Template for notifying the manager when Terminate process has been completed
  </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User '$refIdentityDisplayName' has been terminated </Subject>
</EmailTemplate>
<EmailTemplate name="Joiner Completed Notification">
  <Body>

  #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
  #set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
  #set($reqType = $workflow.requestType)
  #set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
  #set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
  #set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
  &lt;html&gt;
  &lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  #if( $styleSheet )
  $styleSheet
  #end
  &lt;/head&gt;
  &lt;body&gt;
  #if( $headerTemplate )
    $headerTemplate
  #end
  &lt;br/&gt;
  Dear $recipientDisplayName,&lt;br/&gt;
  &lt;p&gt;Joiner Access for Identity '$refIdentityDisplayName' has been granted.&lt;/p&gt;
  #if ( $plan &amp;&amp; $plan.accountRequests &amp;&amp; !$disableStaticManagerContent )
    &lt;ul&gt;
    #set($approvedAccountRequests = $emailTools.getApprovedAccountRequest($plan.accountRequests, $approvalSet, "joiner"))
    #foreach ( $acctReq in $approvedAccountRequests )
      &lt;li&gt;Application: $!acctReq.applicationName&lt;/li&gt;
      &lt;ul&gt;
      #if ( $!{acctReq.arguments["comments"]} )
        #foreach ( $comment in $!{acctReq.arguments["comments"]} )
          &lt;li&gt;Completion Comments: $comment&lt;/li&gt;
        #end
      #end
      #if ( $!acctReq.nativeIdentity )
        &lt;li&gt;Account ID : $!acctReq.nativeIdentity&lt;/li&gt;
      #end
      #if ( $!acctReq.op )
        &lt;li&gt;Operation: $!acctReq.op&lt;/li&gt;
      #end
      &lt;ul&gt;
      #foreach ( $attrReq in $acctReq.attributeRequests )
        #if ( $!attrReq.name )
          &lt;li&gt;Attribute Name : $!attrReq.name&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Display Value: $!attrReq.displayValue&lt;/li&gt;
        #end
        #if ( $!attrReq.op )
          &lt;li&gt;Operation: $!attrReq.op&lt;/li&gt;
        #end
        #if ( $!attrReq.displayValue )
          &lt;li&gt;Attribute Value: $!attrReq.displayValue&lt;/li&gt;
        #elseif ( $!attrReq.value )
          &lt;li&gt;Attribute Value: $!attrReq.value&lt;/li&gt;
        #end
      #end
      #if ( $!{acctReq.arguments["requesterComments"]} )
        &lt;li&gt;Requester Comments: $!{acctReq.arguments["requesterComments"]}&lt;/li&gt;
      #end
      &lt;/ul&gt;
      &lt;/ul&gt;
    #end
    &lt;/ul&gt;
  #end
  #if ( $dynamicAppContent )
    &lt;table&gt;
    #if ( !$disableStaticManagerContent )
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #else
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #end
    &lt;/table&gt;
  #end
  #if ( $provisioningErrors )
    The following errors occurred during provisioning:
    &lt;ul&gt;
    #foreach ( $error in $provisioningErrors )
      &lt;li&gt;$!error&lt;/li&gt;
    #end
    &lt;/ul&gt;
  #end
  #if( $footerTemplate )
    $footerTemplate
  #end
  &lt;/body&gt;
  &lt;/html&gt;
        
    </Body>
  <Description>
    Email Template for notifying the manager when account creation is completed
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User '$refIdentityDisplayName' has been onboarded </Subject>
</EmailTemplate>
<EmailTemplate name="Joiner Temporary Password Notification">
  <Body>

		#set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
		#set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
		#set($reqType = $workflow.requestType)
		#set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
		#set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
		#set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
                &lt;html&gt;
                &lt;head&gt;
                &lt;meta charset="UTF-8"&gt;
                #if( $styleSheet )
                $styleSheet
                #end
                &lt;/head&gt;
                &lt;body&gt;
                #if( $headerTemplate )
                        $headerTemplate
                        #end
                        &lt;br/&gt;
                        Dear $recipientDisplayName,&lt;br/&gt;
                        &lt;p&gt;Joiner Send Temporary Password Notification for Identity '$refIdentityDisplayName' has been completed.&lt;/p&gt;
                        &lt;p&gt;Request Id: $requestId&lt;/p&gt;
                        #if ($dynamicAppContent)
                                &lt;table&gt;
                                        #if (!$disableStaticManagerContent)
                                                #foreach( $key in $dynamicAppContent.keySet() )
                                                &lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
                                                #end
                                        #else
                                                #foreach( $key in $dynamicAppContent.keySet() )
                                                &lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
                                                #end
                                        #end
                                &lt;/table&gt;
                        #else
                                Please define first time password instructions.&lt;br/&gt;
                        #end

                        #if ( $provisioningErrors )
                                The following errors occurred during provisioning:
                                &lt;ul&gt;
                                #foreach ($error in $provisioningErrors)
                                &lt;li&gt;$!error&lt;/li&gt;
                                #end
                                &lt;/ul&gt;
                        #end
                        #if( $footerTemplate )
                        $footerTemplate
                        #end
                        &lt;/body&gt;
                &lt;/html&gt;
		
  </Body>
  <Description>
    Email Template for notifying the manager when account creation is completed
  </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="requestId" type="string">
        <Description>The requestId of the provisioning plan.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User '$refIdentityDisplayName' has been onboarded </Subject>
</EmailTemplate>
<EmailTemplate name="Rule-Mock_Joiner_Email_Notification">
  <Body>

 

        #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
        #set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
        #set($reqType = $workflow.requestType)
        #set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
        #set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
        #set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
                #if( $styleSheet )
                $styleSheet
                #end
&lt;/head&gt;
&lt;body&gt;
                #if( $headerTemplate )
                        $headerTemplate
                        #end
&lt;br/&gt;
                        Dear $recipientDisplayName,&lt;br/&gt;
&lt;p&gt;Joiner Send Temporary Password Notification for Identity '$refIdentityDisplayName' has been completed for ID $identityName.&lt;/p&gt;
&lt;p&gt;Request Id: $requestId&lt;/p&gt;
    
    
    
                        #if ($dynamicAppContent)
&lt;table&gt;
                                        #if (!$disableStaticManagerContent)
                                                #foreach( $key in $dynamicAppContent.keySet() )
&lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
                                                #end
                                        #else
                                                #foreach( $key in $dynamicAppContent.keySet() )
&lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
                                                #end
                                        #end
&lt;/table&gt;
    						
    
                        #else
                                Please define first time password instructions.&lt;br/&gt;

    
    #set($iden=$ctx.getObjectByName($spTools.class.forName("sailpoint.object.Identity"), $identityName));
        &lt;p&gt;Identity name : $iden.name&lt;/p&gt;
        &lt;p&gt;Identity password: $iden.password&lt;/p&gt;
    &lt;p&gt;Identity password:$ctx.decrypt(${iden.password})&lt;/p&gt;
	
	
	

    
    

                                

                        #end

 

                        #if ( $provisioningErrors )
                                The following errors occurred during provisioning:
&lt;ul&gt;
                                #foreach ($error in $provisioningErrors)
&lt;li&gt;$!error&lt;/li&gt;
                                #end
&lt;/ul&gt;
                        #end
                        #if( $footerTemplate )
                        $footerTemplate
                        #end
&lt;/body&gt;
&lt;/html&gt;

</Body>
  <Description>
    Email Template for notifying the manager when account creation is completed
</Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="requestId" type="string">
        <Description>The requestId of the provisioning plan.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User Password for'$refIdentityDisplayName'   </Subject>
</EmailTemplate>
<EmailTemplate name="Mock Joiner Email Notification">
  <Body>

 

 

 

       #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
#set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
#set($reqType = $workflow.requestType)
#set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
#set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
#set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))

 

 

 

Dear $recipientDisplayName,

 

 

 

Joiner Send Temporary Password Notification for Identity '$refIdentityDisplayName' has been completed for ID $identityName.
Request Id: $requestId

 

 

 

#if ($dynamicAppContent)
#if (!$disableStaticManagerContent)
#foreach( $key in $dynamicAppContent.keySet() )
$key: $dynamicAppContent.get($key)
#end
#else
#foreach( $key in $dynamicAppContent.keySet() )
$dynamicAppContent.get($key)
#end
#end

 

 

 

#else
Please define first time password instructions.

 

 

 

#set($iden=$ctx.getObjectByName($spTools.class.forName("sailpoint.object.Identity"), $identityName));
Identity name : $iden.name
Identity password:$ctx.decrypt(${iden.password})
#end

 

 

 

#if ( $provisioningErrors )
The following errors occurred during provisioning:
#foreach ($error in $provisioningErrors)
$error
#end
#end

 

</Body>
  <Description>
    Email Template for notifying the manager when account creation is completed
</Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="requestId" type="string">
        <Description>The requestId of the provisioning plan.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User Password for'$refIdentityDisplayName'   </Subject>
</EmailTemplate>
<EmailTemplate name="Joiner Completed Notification mock">
  <Body>

  #set($ctx = $spTools.class.forName("sailpoint.api.SailPointFactory").getMethod("getFactory", null).invoke(null,null).getCurrentContext())
  #set($emailTools = $spTools.class.forName("sailpoint.rapidsetup.tools.EmailTools").getMethod("instance", null).invoke(null,null))
  #set($reqType = $workflow.requestType)
  #set($styleSheet = $emailTools.getEmailSection($ctx, "styleSheet"))
  #set($headerTemplate = $emailTools.getEmailSection($ctx, "headerTemplate"))
  #set($footerTemplate = $emailTools.getEmailSection($ctx, "footerTemplate"))
  &lt;html&gt;
  &lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  #if( $styleSheet )
  $styleSheet
  #end
  &lt;/head&gt;
  &lt;body&gt;
  #if( $headerTemplate )
    $headerTemplate
  #end
  &lt;br/&gt;
  Dear $recipientDisplayName,&lt;br/&gt;
  &lt;p&gt;Joiner Access for Identity '$refIdentityDisplayName' has been granted.&lt;/p&gt;

  #if ( $dynamicAppContent )
    &lt;table&gt;
    #if ( !$disableStaticManagerContent )
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$key&lt;/td&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #else
      #foreach( $key in $dynamicAppContent.keySet() )
        &lt;tr&gt;&lt;td&gt;$dynamicAppContent.get($key)&lt;/td&gt;&lt;/tr&gt;
      #end
    #end
    &lt;/table&gt;
  #end
  #if ( $provisioningErrors )
    The following errors occurred during provisioning:
    &lt;ul&gt;
    #foreach ( $error in $provisioningErrors )
      &lt;li&gt;$!error&lt;/li&gt;
    #end
    &lt;/ul&gt;
  #end
  #if( $footerTemplate )
    $footerTemplate
  #end
  &lt;/body&gt;
  &lt;/html&gt;
        
    </Body>
  <Description>
    Email Template for notifying the manager when account creation is completed
    </Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" type="Workflow">
        <Description>The Workflow object being executed.</Description>
      </Argument>
      <Argument name="approvalSet" type="ApprovalSet">
        <Description>The ApprovalSet object contained in the workflow.</Description>
      </Argument>
      <Argument name="refIdentityDisplayName" type="string">
        <Description>The name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="recipientDisplayName" type="string">
        <Description>The display name of the Identity that is registering.</Description>
      </Argument>
      <Argument name="provisioningErrors" type="List">
        <Description>Any provisioning errors that may have occurred.</Description>
      </Argument>
      <Argument name="disableStaticManagerContent" type="boolean">
        <Description>if false, then do not hide static content</Description>
      </Argument>
    </Inputs>
  </Signature>
  <Subject>#if($provisioningErrors) Error:#end User '$refIdentityDisplayName' has been onboarded </Subject>
</EmailTemplate>
</sailpoint>
