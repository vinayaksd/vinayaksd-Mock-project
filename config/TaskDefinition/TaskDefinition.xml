<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<TaskDefinition formPath="/monitor/tasks/accountAggregationTask.xhtml" name="Aggregate-Enterprise Directory" resultAction="Delete" subType="task_item_type_acct_aggregation" type="AccountAggregation">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="25"/>
      <entry key="TaskDefinition.runLengthTotal" value="4658"/>
      <entry key="TaskDefinition.runs" value="183"/>
      <entry key="TaskSchedule.host"/>
      <entry key="applications" value="Enterprise Directory"/>
      <entry key="checkDeleted" value="false"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateOnly" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deltaAggregation" value="false"/>
      <entry key="enableManagedAttributeRenameDetection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="haltOnMaxError" value="false"/>
      <entry key="logAllowedActions" value="CorrelateManual, CorrelateMaintain, CorrelateNewAccount, CorrelateReassign, Create, Ignore, Remove"/>
      <entry key="noAutoCreateApplications" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noNeedsRefresh" value="false"/>
      <entry key="noOptimizeReaggregation" value="true"/>
      <entry key="promoteManagedAttributes" value="false"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="sequential" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Task template for application account scanning.</Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Account Aggregation"/>
  </Parent>
</TaskDefinition>
<TaskDefinition formPath="/monitor/tasks/accountAggregationTask.xhtml" name="Aggregate-HR Self Service" resultAction="Delete" subType="task_item_type_acct_aggregation" type="AccountAggregation">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="6"/>
      <entry key="TaskDefinition.runLengthTotal" value="571"/>
      <entry key="TaskDefinition.runs" value="83"/>
      <entry key="TaskSchedule.host"/>
      <entry key="applications" value="HR Self Service"/>
      <entry key="checkDeleted" value="false"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateOnly" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deltaAggregation" value="false"/>
      <entry key="enableManagedAttributeRenameDetection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="haltOnMaxError" value="false"/>
      <entry key="logAllowedActions" value="CorrelateManual, CorrelateMaintain, CorrelateNewAccount, CorrelateReassign, Create, Ignore, Remove"/>
      <entry key="noAutoCreateApplications" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noNeedsRefresh" value="false"/>
      <entry key="noOptimizeReaggregation" value="true"/>
      <entry key="promoteManagedAttributes" value="false"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="sequential" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Task template for application account scanning.</Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Account Aggregation"/>
  </Parent>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ResourceIdentityScan" formPath="/monitor/tasks/accountAggregationTask.xhtml" name="Account Aggregation" progressInterval="5000" progressMode="String" subType="task_item_type_acct_aggregation" template="true" type="AccountAggregation">
  <Description>
            Task template for application account scanning.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_select_apps" multi="true" name="applications" required="true" type="Application">
        <Prompt>task_in_account_aggregation_applications</Prompt>
      </Argument>
      <Argument filterString="type == Rule.Type.IdentityCreation" helpKey="help_task_identity_creation_rule" name="creationRule" type="Rule">
        <Prompt>task_in_account_aggregation_creation_rule</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_roles" name="correlateEntitlements" type="boolean">
        <Prompt>task_in_account_aggregation_correlate_entitlements</Prompt>
      </Argument>
      <Argument helpKey="help_task_apply_active_policies" name="checkPolicies" type="boolean">
        <Prompt>task_in_account_aggregation_check_policies</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_risk_scores" name="refreshScorecard" type="boolean">
        <Prompt>task_in_account_aggregation_refresh_scorecard</Prompt>
      </Argument>
      <Argument helpKey="help_task_maintain_history" name="checkHistory" type="boolean">
        <Prompt>task_in_account_aggregation_check_history</Prompt>
      </Argument>
      <Argument helpKey="help_task_delta_aggregation" name="deltaAggregation" type="boolean">
        <Prompt>task_in_account_aggregation_delta</Prompt>
      </Argument>
      <Argument helpKey="help_task_detect_deleted_accts" name="checkDeleted" type="boolean">
        <Prompt>task_in_account_aggregation_check_deleted</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_scopes" name="correlateScope" type="boolean">
        <Prompt>task_in_account_aggregation_correlate_scope</Prompt>
      </Argument>
      <Argument helpKey="help_task_disable_scope_autocreate" name="noAutoCreateScopes" type="boolean">
        <Prompt>task_in_account_aggregation_no_auto_create_scopes</Prompt>
      </Argument>
      <Argument helpKey="help_task_no_needs_refresh" name="noNeedsRefresh" type="boolean">
        <Prompt>task_in_account_aggregation_no_needs_refresh</Prompt>
      </Argument>
      <Argument helpKey="help_task_included_actions" multi="true" name="logAllowedActions" type="string">
        <Prompt>task_in_account_aggregation_log_allowed_actions</Prompt>
      </Argument>
      <Argument helpKey="help_task_no_optimize_reagg" name="noOptimizeReaggregation" type="boolean">
        <Prompt>task_in_account_aggregation_no_optimize_reagg</Prompt>
      </Argument>
      <Argument helpKey="help_task_promote_managed_entitlements" name="promoteManagedAttributes" type="boolean">
        <Prompt>task_in_account_aggregation_promote_managed_attributes</Prompt>
      </Argument>
      <Argument helpKey="help_task_enable_ma_rename_detection" name="enableManagedAttributeRenameDetection" type="boolean">
        <Prompt>task_in_account_aggregation_enable_ma_rename_detection</Prompt>
      </Argument>
      <Argument helpKey="help_task_no_autocreate_apps" name="noAutoCreateApplications" type="boolean">
        <Prompt>task_in_account_aggregation_no_autocreate_apps</Prompt>
      </Argument>
      <Argument name="updateMultiplexedSchemas" type="boolean">
        <Prompt>task_in_account_aggregation_update_schemas</Prompt>
      </Argument>
      <Argument helpKey="help_tasK_correlate_only" name="correlateOnly" type="boolean">
        <Prompt>task_in_account_aggregation_correlate_only</Prompt>
      </Argument>
      <Argument helpKey="help_task_account_agg_enable_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_account_aggregation_enable_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_objects_per_partition" name="objectsPerPartition" type="int">
        <Prompt>task_in_account_aggregation_objects_per_partition</Prompt>
      </Argument>
      <Argument helpKey="help_task_loss_limit" name="lossLimit" type="int">
        <Prompt>task_in_account_aggregation_loss_limit</Prompt>
      </Argument>
      <Argument helpKey="help_task_account_agg_halt_on_max_error" name="haltOnMaxError" type="boolean">
        <Prompt>task_in_account_aggregation_halt_on_max_error</Prompt>
      </Argument>
      <Argument helpKey="help_task_account_agg_max_error_threshold" name="maxErrorThreshold" type="int">
        <Prompt>task_in_account_aggregation_max_error_threshold</Prompt>
      </Argument>
      <Argument helpKey="help_task_sequential" name="sequential" type="boolean">
        <Prompt>task_in_account_aggregation_sequential</Prompt>
      </Argument>
      <Argument helpKey="help_task_check_deleted_threshold" name="checkDeletedThreshold" type="string">
        <Prompt>task_in_account_aggregation_check_deleted_threshold</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applications" type="string">
        <Prompt>task_out_account_aggregation_applications</Prompt>
      </Argument>
      <Argument name="total" type="int">
        <Prompt>task_out_account_aggregation_total</Prompt>
      </Argument>
      <Argument name="ignored" type="int">
        <Prompt>task_out_account_aggregation_ignored</Prompt>
      </Argument>
      <Argument name="optimized" type="int">
        <Prompt>task_out_account_aggregation_optimized</Prompt>
      </Argument>
      <Argument name="created" type="int">
        <Prompt>task_out_account_aggregation_created</Prompt>
      </Argument>
      <Argument name="updated" type="int">
        <Prompt>task_out_account_aggregation_updated</Prompt>
      </Argument>
      <Argument name="deleted" type="int">
        <Prompt>task_out_account_aggregation_deleted</Prompt>
      </Argument>
      <Argument name="managerChanges" type="int">
        <Prompt>task_out_account_aggregation_manager_changes</Prompt>
      </Argument>
      <Argument name="detectedRoleChanges" type="int">
        <Prompt>task_out_account_aggregation_business_role_changes</Prompt>
      </Argument>
      <Argument name="exceptionChanges" type="int">
        <Prompt>task_out_account_aggregation_exception_changes</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_out_account_aggregation_policies</Prompt>
      </Argument>
      <Argument name="policyViolations" type="int">
        <Prompt>task_out_account_aggregation_policy_violations</Prompt>
      </Argument>
      <Argument name="policyNotifications" type="int">
        <Prompt>task_out_account_aggregation_policy_notifications</Prompt>
      </Argument>
      <Argument name="scoresChanged" type="int">
        <Prompt>task_out_account_aggregation_scores_changed</Prompt>
      </Argument>
      <Argument name="snapshotsCreated" type="int">
        <Prompt>task_out_account_aggregation_snapshots_created</Prompt>
      </Argument>
      <Argument name="scopesCreated" type="int">
        <Prompt>task_out_account_aggregation_scopes_created</Prompt>
      </Argument>
      <Argument name="scopesCorrelated" type="int">
        <Prompt>task_out_account_aggregation_scopes_correlated</Prompt>
      </Argument>
      <Argument name="scopesSelected" type="int">
        <Prompt>task_out_account_aggregation_scopes_selected</Prompt>
      </Argument>
      <Argument name="scopesDormant" type="int">
        <Prompt>task_out_account_aggregation_scopes_dormant</Prompt>
      </Argument>
      <Argument name="unscopedIdentities" type="int">
        <Prompt>task_out_account_aggregation_unscoped_identities</Prompt>
      </Argument>
      <Argument name="certificationsCreated" type="int">
        <Prompt>task_out_account_aggregation_certifications_created</Prompt>
      </Argument>
      <Argument name="certificationsDeleted" type="int">
        <Prompt>task_out_account_aggregation_certifications_deleted</Prompt>
      </Argument>
      <Argument name="applicationsGenerated" type="int">
        <Prompt>task_out_account_aggregation_applications_generated</Prompt>
      </Argument>
      <Argument name="managedAttributesCreated" type="int">
        <Prompt>task_out_account_aggregation_managed_attributes_promoted</Prompt>
      </Argument>
      <Argument name="managedAttributesCreatedByApplication" type="string">
        <Prompt>task_out_account_aggregation_managed_attributes_promoted_by_app</Prompt>
      </Argument>
      <Argument name="identityEntitlementsCreated" type="int">
        <Prompt>task_out_account_aggregation_identityEntitlements_created</Prompt>
      </Argument>
      <Argument name="accountNativeIdentityChanges" type="int">
        <Prompt>task_out_account_aggregation_account_native_identity_changes</Prompt>
      </Argument>
      <Argument name="groupNativeIdentityChanges" type="int">
        <Prompt>task_out_aggregation_group_native_identity_changes</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.IdentityRefreshExecutor" name="Identity Refresh" progressInterval="5000" progressMode="String" subType="task_item_type_identity" template="true" type="Identity">
  <Description>
            Template for identity refresh scans.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_filter_string" name="filter" type="string">
        <Prompt>task_in_identity_refresh_filter</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_list" multi="true" name="filterGroups" type="GroupDefinition">
        <Prompt>task_in_identity_refresh_filter_groups</Prompt>
      </Argument>
      <Argument name="thresholdDate" type="date">
        <Prompt>task_in_identity_refresh_threshold</Prompt>
      </Argument>
      <Argument name="excludeWindow" type="int">
        <Prompt>task_in_identity_refresh_exclude_window</Prompt>
      </Argument>
      <Argument name="includeWindow" type="int">
        <Prompt>task_in_identity_refresh_include_window</Prompt>
      </Argument>
      <Argument helpKey="help_task_include_modified" name="includeWindowModified" type="boolean">
        <Prompt>task_in_identity_refresh_include_modified</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_needs_refresh" name="filterNeedsRefresh" type="boolean">
        <Prompt>task_in_identity_refresh_needs_refresh</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_no_reset_needs_refresh" name="noResetNeedsRefresh" type="boolean">
        <Prompt>task_in_identity_refresh_no_reset_needs_refresh</Prompt>
      </Argument>
      <Argument name="excludeInactive" type="boolean">
        <Prompt>task_in_identity_refresh_exclude_inactive</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_identity_atts" name="promoteAttributes" type="boolean">
        <Description>
                        When true, the identity attributes will be recalculated from the
                        application attributes.
                    </Description>
        <Prompt>task_in_identity_refresh_promote_attributes</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_identity_entitlements" name="refreshIdentityEntitlements" type="boolean">
        <Prompt>task_in_account_refresh_entitlements</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_mgr_status" name="refreshManagerStatus" type="boolean">
        <Description>
                        When true, the manager status for the identities will be refreshed.
                        The manager status is true for an identity if there is any
                        other identity that references the first identity as a manager.
                    </Description>
        <Prompt>task_in_identity_refresh_refresh_manager_status</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_correlate_entitlements" name="correlateEntitlements" type="boolean">
        <Prompt>task_in_identity_refresh_correlate_entitlements</Prompt>
      </Argument>
      <Argument helpKey="help_task_provision_assigned_roles" name="provision" type="boolean">
        <Prompt>task_in_identity_refresh_provision</Prompt>
      </Argument>
      <Argument helpKey="help_task_disable_deprovisioning" name="noRoleDeprovisioning" type="boolean">
        <Prompt>task_in_identity_refresh_no_role_deprovision</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_role_metadata" name="refreshRoleMetadata" type="boolean">
        <Prompt>task_in_identity_refresh_refresh_role_metadata</Prompt>
      </Argument>
      <Argument helpKey="help_task_enable_manual_account_selection" name="enableManualAccountSelection" type="boolean">
        <Prompt>task_in_identity_refresh_enable_manual_account_selection</Prompt>
      </Argument>
      <Argument helpKey="help_task_synchronize_attributes" name="synchronizeAttributes" type="boolean">
        <Prompt>task_in_identity_refresh_synchronize_attributes</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_risk_scores" name="refreshScorecard" type="boolean">
        <Prompt>task_in_identity_refresh_refresh_scorecard</Prompt>
      </Argument>
      <Argument helpKey="help_task_maintain_history" name="checkHistory" type="boolean">
        <Prompt>task_in_identity_refresh_check_history</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_group_scorecards" name="refreshGroups" type="boolean">
        <Prompt>task_in_identity_refresh_refresh_groups</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_delete_dormant_groups" name="deleteDormantGroups" type="boolean">
        <Prompt>task_in_identity_refresh_delete_dormant_groups</Prompt>
      </Argument>
      <Argument helpKey="help_task_apply_active_policies" name="checkPolicies" type="boolean">
        <Prompt>task_in_account_aggregation_check_policies</Prompt>
      </Argument>
      <Argument name="keepInactiveViolations" type="boolean">
        <Prompt>task_in_identity_refresh_keep_inactive_violations</Prompt>
      </Argument>
      <Argument helpKey="help_task_policy_list" name="policies" type="string">
        <Prompt>task_in_identity_refresh_policies</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_scopes" name="correlateScope" type="boolean">
        <Prompt>task_in_identity_refresh_correlate_scope</Prompt>
      </Argument>
      <Argument helpKey="help_task_disable_scope_autocreate" name="noAutoCreateScopes" type="boolean">
        <Prompt>task_in_identity_refresh_no_auto_create_scopes</Prompt>
      </Argument>
      <Argument helpKey="help_task_mark_dormant_scopes" name="markDormantScopes" type="boolean">
        <Prompt>task_in_identity_refresh_mark_dormant_scopes</Prompt>
      </Argument>
      <Argument helpKey="help_task_process_events" name="processTriggers" type="boolean">
        <Prompt>task_in_identity_refresh_process_triggers</Prompt>
      </Argument>
      <Argument helpKey="help_task_disable_identity_processing_threshold" name="disableIdentityProcessingThreshold" type="boolean">
        <Prompt>task_in_identity_refresh_disable_identity_processing_threshold</Prompt>
      </Argument>
      <Argument helpKey="help_task_refresh_comp_app_links" name="refreshCompositeApplications" type="boolean">
        <Prompt>task_in_account_aggregation_refresh_composite_apps</Prompt>
      </Argument>
      <Argument helpKey="help_task_promote_managed_entitlements" name="promoteManagedAttributes" type="boolean">
        <Prompt>task_in_identity_refresh_promote_managed_attributes</Prompt>
      </Argument>
      <Argument helpKey="help_task_number_of_threads" name="refreshThreads" type="int">
        <Prompt>task_in_identity_refresh_threads</Prompt>
      </Argument>
      <Argument helpKey="help_task_force_workflow" name="forceWorkflow" type="boolean">
        <Prompt>task_in_identity_refresh_force_workflow</Prompt>
      </Argument>
      <Argument helpKey="help_task_manual_actions" name="doManualActions" type="boolean">
        <Prompt>task_in_identity_refresh_do_manual_actions</Prompt>
      </Argument>
      <Argument helpKey="help_task_disable_manager_lookup" name="disableManagerLookup" type="boolean">
        <Prompt>task_in_identity_refresh_disable_manager_lookup</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_refresh_enable_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_identity_refresh_enable_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_refresh_partitions" name="partitions" type="int">
        <Prompt>task_in_identity_refresh_partitions</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_refresh_loss_limit" name="lossLimit" type="int">
        <Prompt>task_in_identity_refresh_loss_limit</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_refresh_no_maintenance_retry" name="noMaintenanceWindowRetry" type="boolean">
        <Prompt>task_in_identity_refresh_no_maintenance_retry</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_identity_refresh_total</Prompt>
      </Argument>
      <Argument name="linksRefreshed" type="int">
        <Prompt>task_out_identity_refresh_links_refreshed</Prompt>
      </Argument>
      <Argument name="linksRemoved" type="int">
        <Prompt>task_out_identity_refresh_links_removed</Prompt>
      </Argument>
      <Argument name="linksUnavailable" type="int">
        <Prompt>task_out_identity_refresh_links_unavailable</Prompt>
      </Argument>
      <Argument name="identitiesPruned" type="int">
        <Prompt>task_out_identity_refresh_identities_pruned</Prompt>
      </Argument>
      <Argument name="identitiesSkipped" type="int">
        <Prompt>task_out_identity_refresh_identities_skipped</Prompt>
      </Argument>
      <Argument name="managers" type="int">
        <Prompt>task_out_identity_refresh_managers</Prompt>
      </Argument>
      <Argument name="detectedRoleChanges" type="int">
        <Prompt>task_out_identity_refresh_business_role_changes</Prompt>
      </Argument>
      <Argument name="exceptionChanges" type="int">
        <Prompt>task_out_identity_refresh_exception_changes</Prompt>
      </Argument>
      <Argument name="provisioningRequests" type="int">
        <Prompt>task_out_identity_refresh_provisioning_requests</Prompt>
      </Argument>
      <Argument name="provisioningErrors" type="int">
        <Prompt>task_out_identity_refresh_provisioning_errors</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_out_identity_refresh_policies</Prompt>
      </Argument>
      <Argument name="policyViolations" type="int">
        <Prompt>task_out_identity_refresh_policy_violations</Prompt>
      </Argument>
      <Argument name="policyNotifications" type="int">
        <Prompt>task_out_identity_refresh_policy_notifications</Prompt>
      </Argument>
      <Argument name="scoresChanged" type="int">
        <Prompt>task_out_identity_refresh_scores_changed</Prompt>
      </Argument>
      <Argument name="snapshotsCreated" type="int">
        <Prompt>task_out_identity_refresh_snapshots_created</Prompt>
      </Argument>
      <Argument name="groupDefinitions" type="string">
        <Prompt>task_out_identity_refresh_group_definitions</Prompt>
      </Argument>
      <Argument name="groupIndexes" type="int">
        <Prompt>task_out_identity_refresh_group_indexes</Prompt>
      </Argument>
      <Argument name="scopesCreated" type="int">
        <Prompt>task_out_identity_refresh_scopes_created</Prompt>
      </Argument>
      <Argument name="scopesCorrelated" type="int">
        <Prompt>task_out_identity_refresh_scopes_correlated</Prompt>
      </Argument>
      <Argument name="scopesSelected" type="int">
        <Prompt>task_out_identity_refresh_scopes_selected</Prompt>
      </Argument>
      <Argument name="scopesDormant" type="int">
        <Prompt>task_out_identity_refresh_scopes_dormant</Prompt>
      </Argument>
      <Argument name="unscopedIdentities" type="int">
        <Prompt>task_out_identity_refresh_unscoped_identities</Prompt>
      </Argument>
      <Argument name="certificationsCreated" type="int">
        <Prompt>task_out_identity_refresh_certifications_created</Prompt>
      </Argument>
      <Argument name="certificationsDeleted" type="int">
        <Prompt>task_out_identity_refresh_certifications_deleted</Prompt>
      </Argument>
      <Argument name="triggersProcessed" type="int">
        <Prompt>task_out_identity_refresh_triggers_processed</Prompt>
      </Argument>
      <Argument name="workflowsLaunched" type="int">
        <Prompt>task_out_identity_refresh_workflows_launched</Prompt>
      </Argument>
      <Argument name="managedAttributesCreated" type="int">
        <Prompt>task_out_identity_refresh_managed_attributes_promoted</Prompt>
      </Argument>
      <Argument name="managedAttributesCreatedByApplication" type="string">
        <Prompt>task_out_identity_refresh_managed_attributes_promoted_by_app</Prompt>
      </Argument>
      <Argument name="identityEntitlementsCreated" type="int">
        <Prompt>task_out_account_aggregation_identityEntitlements_created</Prompt>
      </Argument>
      <Argument name="identityEntitlementsUpdated" type="int">
        <Prompt>task_out_account_aggregation_identityEntitlements_updated</Prompt>
      </Argument>
      <Argument name="unansweredAccountSelections" type="int">
        <Prompt>task_out_number_unanswered_accountselections</Prompt>
      </Argument>
      <Argument name="unansweredAccountSelectionIdentities" type="string">
        <Prompt>task_out_unanswered_identities</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.SequentialTaskExecutor" formPath="/monitor/tasks/sequentialTask.xhtml" name="Sequential Task Launcher" progressInterval="5000" progressMode="String" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
            Template for creating a task that runs multiple other tasks.
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="taskList" type="TaskDefinition">
        <Prompt>task_sequential_task_list</Prompt>
      </Argument>
      <Argument name="trace" type="boolean">
        <Prompt>task_sequential_trace</Prompt>
      </Argument>
      <Argument name="exitOnError" type="boolean">
        <Prompt>task_sequential_exit_on_error</Prompt>
      </Argument>
      <Argument name="taskTimeOut" type="int">
        <Prompt>task_sequential_task_timeout</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="tasksRun" type="string">
        <Prompt>task_sequential_tasks_executed</Prompt>
      </Argument>
      <Argument name="SequentialTask.tasksRun" type="string">
        <Prompt>task_sequential_tasks_executed</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.Housekeeper" name="System Maintenance" progressMode="String" resultAction="Delete" subType="task_item_type_system" template="true" type="System">
  <Description>Prune identity snapshots, task results, and certifications. Perform other background maintenance tasks.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_prune_history" name="pruneHistory" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_history</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_task_results" name="pruneTaskResults" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_task_results</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_requests" name="pruneRequests" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_requests</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_provisioning_transactions" name="pruneProvisioningTransactons" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_provisioning_transactions</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_certs" name="pruneCertifications" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_certifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_autoclose_certs" name="automaticallyCloseCertifications" type="boolean">
        <Prompt>task_in_perform_maintenance_automatically_close_certifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_finish_certs" name="finishCertifications" type="boolean">
        <Prompt>task_in_perform_maintenance_finish_certifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_number_of_threads" name="finisherThreads" type="int">
        <Prompt>task_in_perform_maintenance_certification_finisher_threads</Prompt>
      </Argument>
      <Argument helpKey="help_task_phase_certs" name="phaseCertifications" type="boolean">
        <Prompt>task_in_perform_maintenance_phase_certifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_scan_remediations" name="scanRemediations" type="boolean">
        <Prompt>task_in_perform_maintenance_scan_remediations</Prompt>
      </Argument>
      <Argument helpKey="help_task_forward_inactive_workitems" name="forwardInactiveWorkItems" type="boolean">
        <Prompt>task_in_perform_maintenance_forward_inactive_work_items</Prompt>
      </Argument>
      <Argument helpKey="help_task_denormalize_scopes" name="denormalizeScopes" type="boolean">
        <Prompt>task_in_perform_maintenance_denormalize_scopes</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_batch_requests" name="pruneBatchRequests" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_batch_requests</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_syslog_events" name="pruneSyslogEvents" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_syslog_events</Prompt>
      </Argument>
      <Argument helpKey="help_task_proces_workflow_events" name="processWorkflowEvents" type="boolean">
        <Prompt>task_in_perform_maintenance_process_workflow_events</Prompt>
      </Argument>
      <Argument helpKey="help_task_process_workflow_threads" name="workflowThreads" type="int">
        <Prompt>task_in_perform_maintenance_workflow_threads</Prompt>
      </Argument>
      <Argument helpKey="help_task_process_workflow_thread_timeout" name="workflowThreadTimeoutSeconds" type="int">
        <Prompt>task_in_perform_maintenance_workflow_thread_timeout</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_attachments" name="pruneAttachments" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_attachments</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_pending_attachments" name="prunePendingAttachments" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_pending_attachments</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_native_identity_change_events" name="pruneNativeIdentityChangeEvents" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_native_identity_change_events</Prompt>
      </Argument>
      <Argument helpKey="help_task_perform_maintenance_enable_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_perform_maintenance_enable_partitioning</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="historiesPruned" type="int">
        <Prompt>task_out_perform_maintenance_histories_pruned</Prompt>
      </Argument>
      <Argument name="taskResultsPruned" type="int">
        <Prompt>task_out_perform_maintenance_task_results_pruned</Prompt>
      </Argument>
      <Argument name="requestsPruned" type="int">
        <Prompt>task_out_perform_maintenance_requests_pruned</Prompt>
      </Argument>
      <Argument name="syslogEventsPruned" type="int">
        <Prompt>task_out_perform_maintenance_syslog_events_pruned</Prompt>
      </Argument>
      <Argument name="provisioningTransactionsPruned" type="int">
        <Prompt>task_out_perform_maintenance_provisioning_transactions_pruned</Prompt>
      </Argument>
      <Argument name="certificationsArchived" type="int">
        <Prompt>task_out_perform_maintenance_certifications_archived</Prompt>
      </Argument>
      <Argument name="certificationsPruned" type="int">
        <Prompt>task_out_perform_maintenance_certifications_pruned</Prompt>
      </Argument>
      <Argument name="certificationsAutomaticallyClosed" type="int">
        <Prompt>task_out_perform_maintenance_certifications_automatically_closed</Prompt>
      </Argument>
      <Argument name="certificationItemsAutomaticallyDecided" type="int">
        <Prompt>task_out_perform_maintenance_certification_items_automatically_decided</Prompt>
      </Argument>
      <Argument name="certificationsFinished" type="int">
        <Prompt>task_out_perform_maintenance_certifications_finished</Prompt>
      </Argument>
      <Argument name="certificationsFinishFailures" type="int">
        <Prompt>task_out_perform_maintenance_certification_finish_failures</Prompt>
      </Argument>
      <Argument name="certificationsPhased" type="int">
        <Prompt>task_out_perform_maintenance_certifications_phased</Prompt>
      </Argument>
      <Argument name="remediationsScanned" type="int">
        <Prompt>task_out_perform_maintenance_remediations_scanned</Prompt>
      </Argument>
      <Argument name="itemsTransitionedToCertificationRequired" type="int">
        <Prompt>task_out_perform_maintenance_items_to_cert_required</Prompt>
      </Argument>
      <Argument name="itemsTransitionedToCertificationOverdue" type="int">
        <Prompt>task_out_perform_maintenance_items_to_overdue</Prompt>
      </Argument>
      <Argument name="inactiveWorkItemsForwarded" type="int">
        <Prompt>task_out_perform_maintenance_inactive_work_items_forwarded</Prompt>
      </Argument>
      <Argument name="scopesDenormalized" type="int">
        <Prompt>task_out_perform_maintenance_scopes_denormalized</Prompt>
      </Argument>
      <Argument name="emailsSuppressed" type="String">
        <Prompt>task_out_emails_suppressed</Prompt>
      </Argument>
      <Argument name="workflowEvents" type="int">
        <Prompt>task_out_workflow_events</Prompt>
      </Argument>
      <Argument name="workflowsProcessed" type="int">
        <Prompt>task_out_workflows_processed</Prompt>
      </Argument>
      <Argument name="workflowsInterrupted" type="int">
        <Prompt>task_out_workflows_interrupted</Prompt>
      </Argument>
      <Argument name="attachmentsPruned" type="int">
        <Prompt>task_out_perform_maintenance_attachments_pruned</Prompt>
      </Argument>
      <Argument name="pendingAttachmentsPruned" type="int">
        <Prompt>task_out_perform_maintenance_pending_attachments_pruned</Prompt>
      </Argument>
      <Argument name="nativeIdentityChangeEventsPruned" type="int">
        <Prompt>task_out_perform_maintenance_native_identity_change_events_pruned</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.IdentityRequestMaintenance" name="Identity Request Maintenance" progressMode="String" resultAction="Delete" subType="task_item_type_system" template="true" type="System">
  <Description>Prune and Verify Identity Request objects.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="maxAge" type="int">
        <Prompt>task_in_identity_request_prune</Prompt>
      </Argument>
      <Argument name="scanRequests" type="boolean">
        <Prompt>task_in_identity_request_scan</Prompt>
      </Argument>
      <Argument name="maxVerificationDays" type="int">
        <Prompt>task_in_identity_request_verification_timeout</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_request_enable_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_identity_request_enable_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_identity_request_partitions" name="partitions" type="int">
        <Prompt>task_in_identity_request_partitions</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="requestsScanned" type="String">
        <Prompt>task_out_identity_request_scanned</Prompt>
      </Argument>
      <Argument name="requestsPruned" type="String">
        <Prompt>task_out_identity_request_pruned</Prompt>
      </Argument>
      <Argument name="requestsTimedout" type="String">
        <Prompt>task_out_identity_request_verification_timeout</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.EncryptedDataSyncExecutor" name="Encrypted Data Synchronization Task" progressInterval="5000" progressMode="String" resultAction="Rename" subType="task_item_type_system" template="true" type="System">
  <Description>A task that can be used to re-encrypt all encrypted data using the newest key in the keystore. 
                     It can be used to change the public/private keys that can be used for IQService comm.
                     It also can be used to convert all encrypted identity secrets to hashing, 
                     including Identity password, Identity and application password history, 
                     authentication question answers.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="SyncEncryptedDataTask"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="disableApplicationSync" type="boolean">
        <Prompt>task_in_key_sync_disable_applications</Prompt>
      </Argument>
      <Argument name="disableIdentitySync" type="boolean">
        <Prompt>task_in_key_sync_disable_identities</Prompt>
      </Argument>
      <Argument name="disableIntegrationSync" type="boolean">
        <Prompt>task_in_key_sync_disable_integration</Prompt>
      </Argument>
      <Argument name="disableAttachmentSync" type="boolean">
        <Prompt>task_in_key_sync_disable_attachment</Prompt>
      </Argument>
      <Argument name="convertIdentitySecretToHashing" type="boolean">
        <Prompt>task_in_key_convert_identity_secret_to_hashing</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applicationsRefreshed" type="String">
        <Prompt>task_out_applications_synced</Prompt>
      </Argument>
      <Argument name="identitiesRefreshed" type="String">
        <Prompt>task_out_identities_synced</Prompt>
      </Argument>
      <Argument name="integrationConfigsRefreshed" type="String">
        <Prompt>task_out_integrations_synced</Prompt>
      </Argument>
      <Argument name="attachmentsRefreshed" type="String">
        <Prompt>task_out_attachments_synced</Prompt>
      </Argument>
      <Argument name="linksUpdated" type="String">
        <Prompt>task_out_links_updated</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.TargetIndexer" name="Effective Access Indexing" progressMode="String" subType="task_item_type_system" template="true" type="System">
  <Description>
          Calculate the indirect target associations (Tcodes, etc.) for entitlements and roles.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="indexEntitlementTargets" type="boolean">
        <Prompt>task_in_target_index_do_ent_targets</Prompt>
      </Argument>
      <Argument name="indexRoleTargets" type="boolean">
        <Prompt>task_in_target_index_do_role_targets</Prompt>
      </Argument>
      <Argument name="indexRoleEntitlements" type="boolean">
        <Prompt>task_in_target_index_do_role_ents</Prompt>
      </Argument>
      <Argument name="indexRolePermissions" type="boolean">
        <Prompt>task_in_target_index_do_role_perms</Prompt>
      </Argument>
      <Argument name="indexUnstructuredTargets" type="boolean">
        <Prompt>task_in_target_index_do_unstructured</Prompt>
      </Argument>
      <Argument name="indexClassifications" type="boolean">
        <Prompt>task_in_target_index_do_classifications</Prompt>
      </Argument>
      <Argument name="promoteClassifications" type="boolean">
        <Prompt>task_in_target_index_promote_classifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_effective_access_index" name="indexElevatedAccess" type="boolean">
        <Prompt>task_in_target_index_do_elevated_access</Prompt>
      </Argument>
      <Argument helpKey="help_task_effective_access_promote" name="promoteElevatedAccess" type="boolean">
        <Prompt>task_in_target_index_promote_elevated_access</Prompt>
      </Argument>
      <Argument name="refreshFulltext" type="boolean">
        <Prompt>task_in_target_index_do_fulltext</Prompt>
      </Argument>
      <Argument name="fullReset" type="boolean">
        <Prompt>task_in_target_index_full_reset</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="rolesIndexed" type="int">
        <Prompt>task_out_target_index_roles_indexed</Prompt>
      </Argument>
      <Argument name="entitlementsIndexed" type="int">
        <Prompt>task_out_target_index_ents_indexed</Prompt>
      </Argument>
      <Argument name="targetsAdded" type="int">
        <Prompt>task_out_target_index_added</Prompt>
      </Argument>
      <Argument name="targetsRetained" type="int">
        <Prompt>task_out_target_index_retained</Prompt>
      </Argument>
      <Argument name="targetsRemoved" type="int">
        <Prompt>task_out_target_index_removed</Prompt>
      </Argument>
      <Argument name="targetsReset" type="int">
        <Prompt>task_out_target_index_reset</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.AlertAggregationTask" formPath="/monitor/tasks/alertAggregationTask.xhtml" name="Alert Aggregation" progressMode="String" resultAction="Delete" subType="task_item_type_activity_alerts" template="true" type="ActivityAlert">
  <Description>
      Aggregate Alert Objects from External Sources and optionally process.
    </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_alert_select_sources" multi="true" name="sources" required="true" type="Application">
        <Prompt>task_in_alert_aggregation_sources</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_delta_aggregation" name="deltaAggregation" type="boolean">
        <Prompt>task_in_alert_aggregation_delta</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_agg_process" name="processAlerts" type="boolean">
        <Prompt>task_in_alert_aggregation_process</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_agg_defs" name="alertDefinitionNames" type="string">
        <Prompt>task_in_alert_aggregation_definitions</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="sources" type="String">
        <Prompt>task_out_alert_agg_sources</Prompt>
      </Argument>
      <Argument name="totalAlerts" type="int">
        <Prompt>task_out_alert_agg_total_alerts</Prompt>
      </Argument>
      <Argument name="alertsCreated" type="int">
        <Prompt>task_out_alert_agg_created_alerts</Prompt>
      </Argument>
      <Argument name="alertsIgnored" type="int">
        <Prompt>task_out_alert_agg_ignored_alerts</Prompt>
      </Argument>
      <Argument name="alertsProcessed" type="int">
        <Prompt>task_out_alert_agg_processed_alerts</Prompt>
      </Argument>
      <Argument name="actionsCreated" type="int">
        <Prompt>task_out_alert_agg_actions_created</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ActivityAlertProcessorExecutor" name="Alert Processor" progressMode="String" resultAction="Delete" subType="task_item_type_activity_alerts" template="true" type="ActivityAlert">
  <Description>
      Process Alerts previously aggregated from Alert Aggregation.
    </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_alert_processor_alert_filter" name="alertFilterString" type="string">
        <Prompt>task_in_alert_processing_alert_filter</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_processor_alert_unprocessed" name="unprocessedAlerts" type="boolean">
        <Prompt>task_in_alert_processing_alert_unprocessed</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_processor_alert_def_filter" name="alertDefFilterString" type="string">
        <Prompt>task_in_alert_processing_alert_def_filter</Prompt>
      </Argument>
      <Argument helpKey="help_task_alert_processor_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_alert_processing_partitioning</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="totalProcessed" type="int">
        <Prompt>task_out_alert_processing_total_processed</Prompt>
      </Argument>
      <Argument name="actionsCreated" type="int">
        <Prompt>task_out_alert_agg_actions_created</Prompt>
      </Argument>
      <Argument name="matchedAlerts" type="int">
        <Prompt>task_out_alert_processing_matched_alerts</Prompt>
      </Argument>
      <Argument name="unmatchedAlerts" type="int">
        <Prompt>task_out_alert_processing_unmatched_alerts</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition concurrent="true" hidden="true" name="Native Identity Change Propagation" progressMode="String" subType="task_item_type_native_identity_change_propagation" template="true" type="NativeIdentityChangePropagation">
  <Description>
        Task for Propagate Native Identity Change Event.
    </Description>
  <Signature>
    <Returns>
      <Argument name="identityEntitlementsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_identity_entitlement_updated</Prompt>
      </Argument>
      <Argument name="linksUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_links_updated</Prompt>
      </Argument>
      <Argument name="attributeAssignmentsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_assignments_updated</Prompt>
      </Argument>
      <Argument name="identitiesToRefresh" type="int">
        <Prompt>task_out_native_identity_change_total_identities_to_refresh</Prompt>
      </Argument>
      <Argument name="totalRolesFound" type="int">
        <Prompt>task_out_native_identity_change_total_roles_found</Prompt>
      </Argument>
      <Argument name="totalRolesUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_roles_updated</Prompt>
      </Argument>
      <Argument name="totalRolesWithUpdatedProfiles" type="int">
        <Prompt>task_out_native_identity_change_total_roles_with_updated_profiles</Prompt>
      </Argument>
      <Argument name="totalRolesWithUpdatedProvisioningPolicies" type="int">
        <Prompt>task_out_native_identity_change_total_roles_with_updated_provisioning_policies</Prompt>
      </Argument>
      <Argument name="totalRolesWithUpdatedAssignmentRule" type="int">
        <Prompt>task_out_native_identity_change_total_roles_with_updated_assignment_rule</Prompt>
      </Argument>
      <Argument name="formsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_forms_updated</Prompt>
      </Argument>
      <Argument name="passwordPolicyHoldersUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_password_policy_holders_updated</Prompt>
      </Argument>
      <Argument name="dynamicScopesUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_dynamic_scopes_updated</Prompt>
      </Argument>
      <Argument name="totalRulesUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_rules_updated</Prompt>
      </Argument>
      <Argument name="totalPoliciesUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_policies_updated</Prompt>
      </Argument>
      <Argument name="groupDefinitionsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_group_definitions_updated</Prompt>
      </Argument>
      <Argument name="identityTriggersUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_identity_triggers_updated</Prompt>
      </Argument>
      <Argument name="applicationsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_applications_updated</Prompt>
      </Argument>
      <Argument name="correlationConfigsUpdated" type="int">
        <Prompt>task_out_native_identity_change_total_correlation_configs_updated</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ActivityDataSourceScan" name="Activity Aggregation" progressInterval="5000" progressMode="String" subType="task_item_type_activity_aggregation" template="true" type="ActivityAggregation">
  <Description>
            Template for activity scanning. This task will iterate over
            an application's activity datasource, correlate the activity
            back to an Identity and then store the correlated activities.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="datasource" required="true" type="ActivityDataSource">
        <Prompt>task_in_activity_aggregation_datasource</Prompt>
      </Argument>
      <Argument name="trackLastPosition" type="boolean">
        <Prompt>task_in_activity_aggregation_track_last_position</Prompt>
      </Argument>
      <Argument name="keepUncorrelatedActivities" type="boolean">
        <Prompt>task_in_activity_aggregation_keep_uncorrelated_activities</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_activity_aggregation_total</Prompt>
      </Argument>
      <Argument name="correlated" type="int">
        <Description>
                        The total number of activities correlated to identities.
                    </Description>
        <Prompt>task_out_activity_aggregation_correlated</Prompt>
      </Argument>
      <Argument name="uncorrrelated" type="int">
        <Description>
                        The total number of activities not correlated to identities.
                    </Description>
        <Prompt>task_out_activity_aggregation_uncorrrelated</Prompt>
      </Argument>
      <Argument name="filtered" type="int">
        <Description>
                        The total number of activities ignored.
                    </Description>
        <Prompt>task_out_activity_aggregation_filtered</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RolePropagationTaskExecutor" name="Propagate Role Changes" progressInterval="5000" progressMode="String" resultRenderer="rolePropagationResult.xhtml" subType="task_item_type_identity" template="true" type="Identity">
  <Description>
            Template for role propagation.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_in_num_of_minutes" name="duration" type="int">
        <Prompt>task_in_num_of_mins</Prompt>
      </Argument>
      <Argument helpKey="help_task_apply_active_policies" name="checkPolicies" type="boolean">
        <Prompt>task_in_account_aggregation_check_policies</Prompt>
      </Argument>
      <Argument helpKey="help_task_in_keep_inactive_violations" name="keepInactiveViolations" type="boolean">
        <Prompt>task_in_identity_refresh_keep_inactive_violations</Prompt>
      </Argument>
      <Argument helpKey="help_task_in_policy_list" name="policies" type="string">
        <Prompt>task_in_policy_scan_policies</Prompt>
      </Argument>
      <Argument helpKey="help_task_in_role_propagation_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_role_propagation_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_in_max_failed_propagation_attempts" name="maxFailedAttempts" type="int">
        <Prompt>task_in_role_propagation_max_failed_attempts</Prompt>
      </Argument>
      <Argument helpKey="help_task_in_max_propagation_failure_threshold" name="maxFailureThreshold" type="int">
        <Prompt>task_in_role_propagation_max_failure_threshold</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_num_identity_updates</Prompt>
      </Argument>
      <Argument name="eventsTotal" type="int">
        <Prompt>task_out_num_events_total</Prompt>
      </Argument>
      <Argument name="eventsPending" type="int">
        <Prompt>task_out_num_events_pending</Prompt>
      </Argument>
      <Argument name="eventsSucceeded" type="int">
        <Prompt>task_out_num_events_succeeded</Prompt>
      </Argument>
      <Argument name="eventsFailed" type="int">
        <Prompt>task_out_num_events_failed</Prompt>
      </Argument>
      <Argument name="eventsPruned" type="int">
        <Prompt>task_out_num_events_pruned</Prompt>
      </Argument>
      <Argument name="eventsProcessingDetails" type="complex">
        <Prompt>task_out_events_processing_details</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_out_identity_refresh_policies</Prompt>
      </Argument>
      <Argument name="policyViolations" type="int">
        <Prompt>task_out_identity_refresh_policy_violations</Prompt>
      </Argument>
      <Argument name="policyNotifications" type="int">
        <Prompt>task_out_identity_refresh_policy_notifications</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.IdentityRefreshExecutor" name="Policy Scan" subType="task_item_type_identity" template="true" type="Identity">
  <Attributes>
    <Map>
      <entry key="correlateEntitlements" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Template for policy scanning.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="filter" type="string">
        <Prompt>task_in_policy_scan_filter</Prompt>
      </Argument>
      <Argument name="filterGroups" type="string">
        <Prompt>task_in_identity_refresh_filter_groups</Prompt>
      </Argument>
      <Argument name="checkPolicies" type="boolean">
        <Prompt>task_in_policy_scan_check_policies</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_in_policy_scan_policies</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_policy_scan_total</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_out_policy_scan_policies</Prompt>
      </Argument>
      <Argument name="policyViolations" type="int">
        <Prompt>task_out_policy_scan_policy_violations</Prompt>
      </Argument>
      <Argument name="policyNotifications" type="int">
        <Prompt>task_out_policy_scan_policy_notifications</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition concurrent="true" executor="sailpoint.task.CancelCertificationGroupTask" hidden="true" name="Cancel Certification Group" progressMode="String" subType="task_item_type_certification" template="true" type="Certification">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="2"/>
      <entry key="TaskDefinition.runLengthTotal" value="2"/>
      <entry key="TaskDefinition.runs" value="1"/>
    </Map>
  </Attributes>
  <Description>
            Template task for canceling a certification group.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationGroupId" required="true" type="String">
        <Description>
                        The id of the certification group to cancel.
                    </Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ActivateCertificationGroupTask" hidden="true" name="Activate Certification Group" progressMode="String" subType="task_item_type_certification" template="true" type="Certification">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="2"/>
      <entry key="TaskDefinition.runLengthTotal" value="19"/>
      <entry key="TaskDefinition.runs" value="8"/>
    </Map>
  </Attributes>
  <Description>
            Template task for activating a staged certification group.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationGroupId" required="true" type="String">
        <Description>
                        The id of the certification group to activate.
                    </Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ApplyCertificationDefinitionChangesTask" hidden="true" name="Apply Certification Definition Changes" progressMode="String" subType="task_item_type_certification" template="true" type="Certification">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="0"/>
      <entry key="TaskDefinition.runs" value="1"/>
    </Map>
  </Attributes>
  <Description>
            Task for applying changes made to a CertificationDefinition to the related Certifications and WorkItems.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="certificationGroupId" required="true" type="String">
        <Description>
                        The id of the certification group to update.
                    </Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition concurrent="true" executor="sailpoint.task.CertificationExecutor" hidden="true" name="Certification Manager" progressMode="String" subType="task_item_type_certification" template="true" type="Certification">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="10"/>
      <entry key="TaskDefinition.runLengthTotal" value="162"/>
      <entry key="TaskDefinition.runs" value="16"/>
    </Map>
  </Attributes>
  <Description>
            Template Task for scheduling access certifications.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="certifier" required="true" type="string">
        <Description>
                        Username that will be assigned as the certifier for this
                        Manager access certification.
                    </Description>
      </Argument>
      <Argument name="identities" type="string">
        <Description>
                        List of identity ids for use with creating an individual
                        certification
                    </Description>
      </Argument>
      <Argument name="identityManagers" type="string">
        <Description>
                        String representation of a mapping of identities to managers for
                        individually assigned certifications
                    </Description>
      </Argument>
      <Argument name="application" required="true" type="string">
        <Description>
                        Application that will be assigned as the application for
                        this App access certification.
                    </Description>
      </Argument>
      <Argument name="certifiedApplicationIds" required="true" type="string">
        <Description>
                        A comma-separated string of application IDs to certify for an
                        application owner certification.
                    </Description>
      </Argument>
      <Argument name="certificationType" required="true" type="string">
        <Description>Type of Access Certification to Run.</Description>
      </Argument>
      <Argument name="duration" required="true" type="string">
        <Description>
                        Date that the access certification will expire
                    </Description>
      </Argument>
      <Argument name="creator" required="true" type="string">
        <Description>
                        Username of the person who created this access certification.
                    </Description>
      </Argument>
      <Argument name="sendReminders" required="true" type="string">
        <Description>
                        "true" or "false" flag on whether to send reminders when the
                        certification expires.
                    </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="type" type="String">
        <Prompt>task_out_certification_manager_type</Prompt>
      </Argument>
      <Argument name="total" type="int">
        <Prompt>task_out_certification_manager_total</Prompt>
      </Argument>
      <Argument name="individual" type="String">
        <Prompt>task_out_certification_manager_individual</Prompt>
      </Argument>
      <Argument name="application" type="String">
        <Prompt>task_out_certification_manager_application</Prompt>
      </Argument>
      <Argument name="manager" type="String">
        <Prompt>task_out_certification_manager_manager</Prompt>
      </Argument>
      <Argument name="iPOPs" type="String">
        <Prompt>task_out_certification_manager_ipo_ps</Prompt>
      </Argument>
      <Argument name="activePeriodDurationAmount" type="String">
        <Prompt>task_out_active_period_duration</Prompt>
      </Argument>
      <Argument name="activePeriodDurationScale" type="String">
        <Prompt>task_out_active_period_scale</Prompt>
      </Argument>
      <Argument name="challengePeriodDurationAmount" type="String">
        <Prompt>task_out_challenge_period_duration</Prompt>
      </Argument>
      <Argument name="challengePeriodDurationScale" type="String">
        <Prompt>task_out_challenge_period_scale</Prompt>
      </Argument>
      <Argument name="remediationPeriodDurationAmount" type="String">
        <Prompt>task_out_remediation_period_duration</Prompt>
      </Argument>
      <Argument name="remediationPeriodDurationScale" type="String">
        <Prompt>task_out_remediation_period_scale</Prompt>
      </Argument>
      <Argument name="emailsSuppressed" type="String">
        <Prompt>task_out_emails_suppressed</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.UnstructuredTargetScan" formPath="/monitor/tasks/targetAggregationTask.xhtml" name="Target Aggregation" progressInterval="5000" progressMode="String" subType="task_item_type_target_aggregation" template="true" type="TargetAggregation">
  <Description>
            Template Task for running target aggregations.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="targetSource" type="TargetSource">
        <Prompt>task_in_target_aggregation_target_source</Prompt>
      </Argument>
      <Argument name="targetApplication" type="Application">
        <Prompt>task_in_target_aggregation_target_source</Prompt>
      </Argument>
      <Argument name="promoteInherited" type="boolean">
        <Prompt>task_in_target_aggregation_promote_inherited</Prompt>
      </Argument>
      <Argument name="disableEmptyTargetFilter" type="boolean">
        <Prompt>task_in_target_aggregation_include_empty_targets</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Description>
                        The total number of targets processed.
                    </Description>
        <Prompt>task_out_target_aggregation_total</Prompt>
      </Argument>
      <Argument name="correlated" type="int">
        <Description>
                        The total number of targets that correlated to one or more objects.
                    </Description>
        <Prompt>task_out_target_aggregation_correlated</Prompt>
      </Argument>
      <Argument name="uncorrelated" type="int">
        <Description>
                        The total number of targets that did not correlate to any objects.
                    </Description>
        <Prompt>task_out_target_aggregation_uncorrelated</Prompt>
      </Argument>
      <Argument name="mappingsProcessed" type="int">
        <Description>
                        The total number of Access Mappings processed
                    </Description>
        <Prompt>task_out_target_aggregation_mappings_processed</Prompt>
      </Argument>
      <Argument name="mappingsUnCorrelated" type="int">
        <Prompt>task_out_target_aggregation_mappings_uncorrelated</Prompt>
      </Argument>
      <Argument name="targetsDeleted" type="int">
        <Description>
                        The total number of Targets Deleted
                    </Description>
        <Prompt>task_out_target_aggregation_targets_deleted</Prompt>
      </Argument>
      <Argument name="associationsDeleted" type="int">
        <Description>
                        The total number of TargetAssociations deleted
                    </Description>
        <Prompt>task_out_target_aggregation_associations_deleted</Prompt>
      </Argument>
      <Argument name="deleteTime" type="string">
        <Description>
                        Time spent deleting old targets
                    </Description>
        <Prompt>task_out_target_aggregation_delete_time</Prompt>
      </Argument>
      <Argument name="associationDeleteTime" type="string">
        <Description>
                        Time spent deleting old TargetAssociations
                    </Description>
        <Prompt>task_out_target_aggregation_association_delete_time</Prompt>
      </Argument>
      <Argument name="processTime" type="string">
        <Description>
                        Time spent processing targets
                    </Description>
        <Prompt>task_out_target_aggregation_process_time</Prompt>
      </Argument>
      <Argument name="adornmentTime" type="string">
        <Description>
                        Time spent adorning targets to cubes and account groups
                    </Description>
        <Prompt>task_out_target_aggregation_adornment_time</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ResourceIdentityScan" formPath="/monitor/tasks/accountGroupAggregationTask.xhtml" name="Account Group Aggregation" progressInterval="5000" progressMode="String" resultRenderer="accountGroupAggregationResult.xhtml" subType="task_item_type_acct_grp_aggregation" template="true" type="AccountGroupAggregation">
  <Attributes>
    <Map>
      <entry key="aggregationType" value="group"/>
    </Map>
  </Attributes>
  <Description>
            Task template for application group scanning.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_select_apps" multi="true" name="applications" required="true" type="Application">
        <Prompt>task_in_account_group_aggregation_applications</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_select_schema" name="groupSchema" type="sailpoint.web.task.GroupSchemaCustomSerializer">
        <Prompt>task_in_account_group_aggregation_groups_to_scan</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_delta_aggregation" name="deltaAggregation" type="boolean">
        <Prompt>task_in_account_aggregation_delta</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_detect_deleted" name="checkDeleted" type="boolean">
        <Prompt>task_in_account_aggregation_check_deleted_acct_groups</Prompt>
      </Argument>
      <Argument helpKey="help_task_check_deleted_threshold" name="checkDeletedThreshold" type="string">
        <Prompt>task_in_account_group_aggregation_check_deleted_threshold</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_description_locale" name="descriptionLocale" type="string">
        <Prompt>task_in_account_aggregation_description_locale</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_description_attribute" name="descriptionAttribute" type="string">
        <Prompt>task_in_account_aggregation_description_attribute</Prompt>
      </Argument>
      <Argument filterString="type == Rule.Type.GroupAggregationRefresh" helpKey="help_task_group_refresh_rule" name="accountGroupRefreshRule" type="Rule">
        <Prompt>task_in_account_group_aggregation_refresh_rule</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_classification_promotion" name="promoteClassifications" type="boolean">
        <Prompt>task_in_account_group_aggregation_promote_classifications</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_classification_attribute" name="classificationAttribute" type="string">
        <Prompt>task_in_account_group_aggregation_classification_attribute</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_agg_enable_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_account_group_aggregation_enable_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_agg_objects_per_partition" name="objectsPerPartition" type="int">
        <Prompt>task_in_account_group_aggregation_objects_per_partition</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_agg_loss_limit" name="lossLimit" type="int">
        <Prompt>task_in_account_group_aggregation_loss_limit</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_agg_halt_on_max_error" name="haltOnMaxError" type="boolean">
        <Prompt>task_in_account_group_aggregation_halt_on_max_error</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_agg_max_error_threshold" name="maxErrorThreshold" type="int">
        <Prompt>task_in_account_group_aggregation_max_error_threshold</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applications" type="int">
        <Prompt>task_out_account_group_aggregation_applications</Prompt>
      </Argument>
      <Argument name="total" type="int">
        <Prompt>task_out_account_group_aggregation_total</Prompt>
      </Argument>
      <Argument name="groupsCreated" type="int">
        <Prompt>task_out_account_group_aggregation_created</Prompt>
      </Argument>
      <Argument name="groupsUpdated" type="int">
        <Prompt>task_out_account_group_aggregation_updated</Prompt>
      </Argument>
      <Argument name="groupsDeleted" type="int">
        <Prompt>task_out_account_group_aggregation_deleted</Prompt>
      </Argument>
      <Argument name="groupNativeIdentityChanges" type="int">
        <Prompt>task_out_aggregation_group_native_identity_changes</Prompt>
      </Argument>
      <Argument name="groupDetails" type="complex"/>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.MissingManagedEntitlementsTask" name="Missing Managed Entitlements Scan" progressInterval="5000" progressMode="String" subType="task_item_type_system" template="true" type="System">
  <Description>
            Creates missing managed entitlement objects for the applications specified. 
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" required="true" type="Application">
        <Prompt>task_in_missing_managed_entitlements_scan_applications</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applications" type="string">
        <Prompt>task_out_missing_managed_entitlements_scan_applications</Prompt>
      </Argument>
      <Argument name="managedAttributesCreated" type="int">
        <Prompt>task_out_missing_managed_entitlements_totalMissing</Prompt>
      </Argument>
      <Argument name="managedAttributesCreatedByApplication" type="string">
        <Prompt>task_out_missing_managed_entitlements_appSummary</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ITIMApplicationGenerator" name="ITIM Application Creator" subType="task_item_type_system" template="true" type="System">
  <Description>
            Automatically creates ITIM account applications using connection
            information from an authoritative ITIM application.
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="itimAppIds" required="true" type="Application">
        <Prompt>task_in_itim_app_generator_applications</Prompt>
      </Argument>
      <Argument name="appNamePrefix" type="string">
        <Prompt>task_in_itim_app_generator_app_name_prefix</Prompt>
      </Argument>
      <Argument name="appNameSuffix" type="string">
        <Prompt>task_in_itim_app_generator_app_name_suffix</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="appsCreated" type="int">
        <Prompt>task_out_itim_app_generator_apps_created</Prompt>
      </Argument>
      <Argument name="appsIgnored" type="int">
        <Prompt>task_out_itim_app_generator_apps_ignored</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RoleIndexRefreshExecutor" name="Role Index Refresh" progressInterval="5000" progressMode="String" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
            Analyzes each role in the system and collects statistics about them into a role index.
        </Description>
  <Signature>
    <Returns>
      <Argument name="totalRoles" type="int">
        <Prompt>task_out_refresh_role_indexes_totalRoles</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.EntitlementRoleGenerator" name="Entitlement Role Generator" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
        Automatically creates an Entitlement Role for every entitlement found in the specified application(s)
      </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" required="true" type="Application"/>
      <Argument name="roleType" type="string">
        <Prompt>entitlement_role_generator_role_type</Prompt>
      </Argument>
      <Argument name="locale" type="string">
        <Prompt>task_in_missing_managed_entitlements_scan_locale</Prompt>
      </Argument>
      <Argument name="attributeFilter" type="string">
        <Prompt>entitlement_role_generator_role_attribute_filter</Prompt>
      </Argument>
      <Argument name="permissionsFilter" type="string">
        <Prompt>entitlement_role_generator_role_permissions_filter</Prompt>
      </Argument>
      <Argument name="roleNamingTemplate" type="string">
        <Prompt>entitlement_role_generator_role_naming_template</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="numRolesGenerated" type="string">
        <Prompt>entitlement_role_generator_num_roles_generated</Prompt>
      </Argument>
      <Argument name="numEntitlementsFound" type="string">
        <Prompt>entitlement_role_generator_num_entitlements_detected</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RoleEntitlementAssociationsExecutor" name="Role-Entitlement Associations" progressInterval="5000" progressMode="String" subType="task_item_type_system" template="true" type="System">
  <Description>
            Deletes existing role-entitlement associations then analyzes each role in the system and creates associations between the role and any granted entitlements.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_role_entitlement_associations_partitioning" name="enablePartitioning" type="boolean">
        <Prompt>task_in_role_entitlement_associations_partitioning</Prompt>
      </Argument>
      <Argument helpKey="help_task_role_entitlement_associations_partitions" name="partitions" type="int">
        <Prompt>task_in_role_entitlement_associations_partitions</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="removedBundleProfileRelations" type="int">
        <Prompt>task_out_role_entitlement_associations_removedBundleProfileRelations</Prompt>
      </Argument>
      <Argument name="totalRolesAnalyzed" type="int">
        <Prompt>task_out_role_entitlement_associations_totalRolesAnalyzed</Prompt>
      </Argument>
      <Argument name="totalRolesSkipped" type="int">
        <Prompt>task_out_role_entitlement_associations_totalRolesSkipped</Prompt>
      </Argument>
      <Argument name="totalBundleProfileRelations" type="int">
        <Prompt>task_out_role_entitlement_associations_totalBundleProfileRelations</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.MissingManagedEntitlementsTask" hidden="true" name="Hidden Missing Managed Entitlements Scan" progressInterval="5000" progressMode="String" resultAction="Delete" subType="task_item_type_system" type="System">
  <Description>
            Creates missing managed entitlement objects for the applications specified. 
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" required="true" type="Application"/>
    </Inputs>
    <Returns>
      <Argument name="applications" type="string">
        <Prompt>task_out_missing_managed_entitlements_scan_application</Prompt>
      </Argument>
      <Argument name="managedAttributesCreated" type="int">
        <Prompt>task_out_missing_managed_entitlements_totalMissing</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.WhatIfExecutor" hidden="true" name="Impact Analysis" resultAction="RenameNew" resultRenderer="impactAnalysis.xhtml" subType="task_item_type_system" type="System">
  <Description>
            System task for performing impact analysis of role or profile changes.
        </Description>
  <Signature>
    <Returns>
      <Argument name="roles" type="string">
        <Prompt>task_out_impact_analysis_roles</Prompt>
      </Argument>
      <Argument name="profiles" type="string">
        <Prompt>task_out_impact_analysis_profiles</Prompt>
      </Argument>
      <Argument name="totalIdentities" type="int">
        <Prompt>task_out_impact_analysis_total_identities</Prompt>
      </Argument>
      <Argument name="totalLosses" type="int">
        <Prompt>task_out_impact_analysis_total_losses</Prompt>
      </Argument>
      <Argument name="totalGains" type="int">
        <Prompt>task_out_impact_analysis_total_gains</Prompt>
      </Argument>
      <Argument name="totalConflicts" type="int">
        <Prompt>task_out_impact_analysis_total_conflicts</Prompt>
      </Argument>
      <Argument name="analysis" type="complex"/>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.PolicyWhatIfExecutor" hidden="true" name="Policy Impact Analysis" progressInterval="5000" progressMode="String" resultAction="RenameNew" resultRenderer="policyImpactAnalysis.xhtml" subType="task_item_type_system" type="System">
  <Description>
            System task for performing impact analysis of policy changes.
        </Description>
  <Signature>
    <Returns>
      <Argument name="noActiveRule" type="boolean">
        <Prompt>task_out_policy_impact_analysis_noActiveRules</Prompt>
      </Argument>
      <Argument name="errorMessage" type="String">
        <Prompt>task_out_policy_impact_analysis_errorMessage</Prompt>
      </Argument>
      <Argument name="analysis" type="complex"/>
      <Argument name="ruleName" type="String">
        <Prompt>task_out_policy_impact_analysis_ruleName</Prompt>
      </Argument>
      <Argument name="vcount" type="int">
        <Prompt>task_out_policy_impact_analysis_vcount</Prompt>
      </Argument>
      <Argument name="icount" type="int">
        <Prompt>task_out_policy_impact_analysis_icount</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition concurrent="true" executor="sailpoint.task.WorkflowExecutor" hidden="true" name="Workflow Launcher" resultRenderer="workflow.xhtml" subType="task_item_type_workflow" type="Workflow">
  <Description>Workflow Case</Description>
  <Signature>
    <Inputs>
      <Argument name="workflow" required="true" type="string">
        <Prompt>task_in_workflow_launcher_workflow</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="case" type="complex"/>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.BusinessFunctionalRoleGenerator" hidden="true" name="Business Role Mining" resultAction="Rename" subType="task_item_type_role_mining" type="RoleMining">
  <Description>
        Mine Business Roles based on organizational and functional identity attributes
      </Description>
  <Signature>
    <Inputs>
      <Argument name="tieredIdentityMiningAttrs" required="true" type="string">
        <Prompt>Comma-separated list of identity mining attributes (required).</Prompt>
      </Argument>
      <Argument name="owner" required="true" type="string">
        <Prompt>Default owner of mined roles (required).</Prompt>
      </Argument>
      <Argument name="genContainerRole" type="boolean">
        <Prompt>Place mined business roles into auto-generated organizational roles using top-tier attribute.</Prompt>
      </Argument>
      <Argument name="containerRole" required="true" type="Bundle">
        <Prompt>Place mined roles into single, pre-existing Container Role.</Prompt>
      </Argument>
      <Argument name="bfrPrefix" type="string">
        <Prompt>Optional prefix to apply to all mined role names.</Prompt>
      </Argument>
      <Argument name="minimumRoleSize" type="int">
        <Prompt>Minimum number of users in each mined role.</Prompt>
      </Argument>
      <Argument name="createSubRoles" type="boolean">
        <Prompt>Use sub-roles in the mining process (optional).</Prompt>
      </Argument>
      <Argument name="computeCoverage" type="boolean">
        <Prompt>Compute population statistics (optional).</Prompt>
      </Argument>
      <Argument name="uidNaming" type="boolean">
        <Prompt>Use generic uid naming for mined roles (default: filter-based naming).</Prompt>
      </Argument>
      <Argument name="simulate" type="boolean">
        <Prompt>Perform What-If mining analysis (no roles are created).</Prompt>
      </Argument>
      <Argument name="mineITRoles" type="boolean">
        <Prompt>Mine for IT entitlements on each generated Business Functional Role (optional).</Prompt>
      </Argument>
      <Argument name="applications" type="Application">
        <Prompt>If mining for IT Roles, the Application(s) whose entitlements will be mined.</Prompt>
      </Argument>
      <Argument name="threshold" required="true" type="int">
        <Prompt>If mining for IT Roles, the percentage threshold for inclusion of an entitlement.</Prompt>
      </Argument>
      <Argument name="itRoleAssociation" type="boolean">
        <Prompt>Associate the mined IT Role to the BFR using "required" policy (default is "permits").</Prompt>
      </Argument>
      <Argument name="attachITProfiles" type="boolean">
        <Prompt>Attach mined IT profiles to BFR instead of creating an IT role.</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="simulation" type="string">
        <Prompt>Simulation:</Prompt>
      </Argument>
      <Argument name="miningInput" type="string">
        <Prompt>Identity Mining Attributes:</Prompt>
      </Argument>
      <Argument name="rolesCreated" type="string">
        <Prompt>Roles mined:</Prompt>
      </Argument>
      <Argument name="rolesUpdated" type="string">
        <Prompt>Roles updated:</Prompt>
      </Argument>
      <Argument name="rolesDiscarded" type="string">
        <Prompt>Roles discarded:</Prompt>
      </Argument>
      <Argument name="roleCoverage" type="string">
        <Prompt>Coverage of mined roles:</Prompt>
      </Argument>
      <Argument name="entMiningStats" type="string">
        <Prompt>Entitlement mining stats:</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.DirectMiningTask" hidden="true" name="IT Role Mining" subType="task_item_type_role_mining" type="RoleMining">
  <Description>
      IT Role Mining based on a Group Definition, List of applications and threshold.
    </Description>
  <Signature>
    <Inputs>
      <Argument name="roleName" type="Bundle">
        <Prompt>Business Role to Mine.  Select if you want an existing Business Role to be mined</Prompt>
      </Argument>
      <Argument name="newRoleName" type="string">
        <Prompt>New Business Role Name.  Enter if you want to create a new Business Role</Prompt>
      </Argument>
      <Argument name="defaultOwner" type="string">
        <Prompt>Default Business Role Owner.  If creating new Business Role, enter default owner</Prompt>
      </Argument>
      <Argument name="containerRole" type="Bundle">
        <Prompt>Place mined role into pre-existing Container Role.</Prompt>
      </Argument>
      <Argument name="groupName" type="GroupDefinition">
        <Prompt>Optional User Population to Mine</Prompt>
      </Argument>
      <Argument name="filter" type="string">
        <Prompt>Optional Filter to select Identities.  Example: department == "Finance"</Prompt>
      </Argument>
      <Argument multi="true" name="applications" required="true" type="Application">
        <Prompt>Applications to Mine Entitlements From</Prompt>
      </Argument>
      <Argument name="threshold" required="true" type="int">
        <Prompt>Entitlement Threshold Percentage (%)</Prompt>
      </Argument>
      <Argument name="simulate" type="boolean">
        <Prompt>Simulate Mining Activity.  No Business Roles/Profiles will be created</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="filterUsed" type="String">
        <Prompt>Filter Used to Mine:</Prompt>
      </Argument>
      <Argument name="numIdentitiesMined" type="String">
        <Prompt>Total Identities Mined:</Prompt>
      </Argument>
      <Argument name="numCandidateEntitlements" type="String">
        <Prompt>Candidate Entitlements:</Prompt>
      </Argument>
      <Argument name="numUsedEntitlements" type="String">
        <Prompt>Used Entitlements:</Prompt>
      </Argument>
      <Argument name="threshold" type="String">
        <Prompt>Threshold Percentage (%)</Prompt>
      </Argument>
      <Argument name="simulate" type="String">
        <Prompt>Simulate Mining Activity:</Prompt>
      </Argument>
      <Argument name="taskResults" type="String">
        <Prompt>Detailed Results:</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ITRoleMiningTask" hidden="true" name="New IT Role Mining" resultAction="Rename" subType="task_item_type_it_role_mining" type="ITRoleMining">
  <Description>
      IT Role Mining based on a population, List of applications/entitlements and thresholds.
    </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identityFilter" type="Filter">
        <Prompt>Filter that restricts the population of identities to mine roles from.</Prompt>
      </Argument>
      <Argument multi="true" name="applications" required="true" type="String">
        <Prompt>IDs for Applications that contain the users and entitlements from which roles are mined</Prompt>
      </Argument>
      <Argument multi="true" name="includedEntitlements" type="IdentityItem">
        <Prompt>Entitlements from which to mine roles</Prompt>
      </Argument>
      <Argument name="minIdentities" type="int">
        <Prompt>Minimum number of identities that must contain a given entitlement set to generate a candidate role</Prompt>
      </Argument>
      <Argument name="minEntitlements" type="int">
        <Prompt>Mininmum number of entitlements that must be in an entitlement set to generate a candidate role</Prompt>
      </Argument>
      <Argument name="maxCandidateRoles" type="int">
        <Prompt>Maximum number of candidate roles that will be generated before the task starts discarding data</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="itRoleMiningResult" type="Complex"/>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.DataExportExecutor" formPath="/monitor/tasks/dataExportInclude.xhtml" name="Data Export" progressInterval="5000" progressMode="String" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
            Template for creating a data export task.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="database" type="string">
        <Prompt>task_in_data_export_database</Prompt>
      </Argument>
      <Argument name="username" type="string">
        <Prompt>task_in_data_export_database_uname</Prompt>
      </Argument>
      <Argument name="password" type="secret">
        <Prompt>task_in_data_export_database_password</Prompt>
      </Argument>
      <Argument name="driverClass" type="string">
        <Prompt>task_in_data_export_database_driverClass</Prompt>
      </Argument>
      <Argument name="dbUrl" type="string">
        <Prompt>task_in_data_export_database_url</Prompt>
      </Argument>
      <Argument name="exportIdentities" type="boolean">
        <Prompt>task_in_data_export_identities</Prompt>
      </Argument>
      <Argument name="exportIdentitiesRiskScores" type="boolean">
        <Prompt>task_in_data_export_identities_risk_scores</Prompt>
      </Argument>
      <Argument name="exportAccounts" type="boolean">
        <Prompt>task_in_data_export_accounts</Prompt>
      </Argument>
      <Argument name="exportCertifications" type="boolean">
        <Prompt>task_in_data_export_certs</Prompt>
      </Argument>
      <Argument name="identitiesExportMode" type="string">
        <Prompt>task_in_data_export_identities_mode</Prompt>
      </Argument>
      <Argument name="accountsExportMode" type="string">
        <Prompt>task_in_data_export_accounts_mode</Prompt>
      </Argument>
      <Argument name="certificationsExportMode" type="string">
        <Prompt>task_in_data_export_certs_mode</Prompt>
      </Argument>
      <Argument name="identitiesExportFilter" type="string">
        <Prompt>task_in_data_export_identities_filter</Prompt>
      </Argument>
      <Argument name="accountsExportFilter" type="string">
        <Prompt>task_in_data_export_accounts_filter</Prompt>
      </Argument>
      <Argument name="certificationsExportFilter" type="string">
        <Prompt>task_in_data_export_certs_filter</Prompt>
      </Argument>
      <Argument name="promoteManagedAttributes" type="boolean">
        <Prompt>task_in_identity_refresh_promote_managed_attributes</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="identitiesExported" type="int">
        <Prompt>task_out_data_export_identities</Prompt>
      </Argument>
      <Argument name="accountsExported" type="int">
        <Prompt>task_out_data_export_accounts</Prompt>
      </Argument>
      <Argument name="certificationsExported" type="int">
        <Prompt>task_out_data_export_certs</Prompt>
      </Argument>
      <Argument name="identitiesPruned" type="int">
        <Prompt>task_out_data_export_pruned_identities</Prompt>
      </Argument>
      <Argument name="accountsPruned" type="int">
        <Prompt>task_out_data_export_pruned_accounts</Prompt>
      </Argument>
      <Argument name="certificationsPruned" type="int">
        <Prompt>task_out_data_export_pruned_certs</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.OIMApplicationGenerator" name="OIM Application Creator" subType="task_item_type_system" template="true" type="System">
  <Description>
            Automatically discover and create OIM Resource Applications.
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="oimAppIds" required="true" type="Application">
        <Prompt>task_in_oim_generator_applications</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="appsCreated" type="int">
        <Prompt>task_out_oim_generator_apps_created</Prompt>
      </Argument>
      <Argument name="appsIgnored" type="int">
        <Prompt>task_out_oim_generator_apps_ignored</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.CompleteOrphanIdentityRequestsTask" name="Complete Orphan Identity Requests" subType="task_item_type_system" type="System">
  <Description>Remove identity requests for older completed requests</Description>
  <Signature>
    <Returns>
      <Argument name="numRequestsCompleted" type="int">
        <Prompt>task_out_complete_orphan_identity_requests_completed</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.CIBSyncTask" name="Identity IQ Cloud Gateway Synchronization Task" subType="task_item_type_system" template="true" type="System">
  <Description>
                Synchronize the specified objects to the Cloud Gateway.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="cloudApp" required="true" type="Application">
        <Prompt>task_in_cloud_bridge_cloud_app</Prompt>
      </Argument>
      <Argument multi="true" name="hostedApps" required="true" type="Application">
        <Prompt>task_in_cloud_bridge_apps_to_sync</Prompt>
      </Argument>
      <Argument multi="true" name="ruleNames" type="Rule">
        <Prompt>task_in_cloud_bridge_rules_to_sync</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="appsSyncSuccessful" type="int">
        <Prompt>task_out_cloud_bridge_apps_sync_success</Prompt>
      </Argument>
      <Argument name="appsSyncFailed" type="int">
        <Prompt>task_out_cloud_bridge_apps_sync_failed</Prompt>
      </Argument>
      <Argument name="rulesSyncSuccessful" type="int">
        <Prompt>task_out_cloud_bridge_rules_sync_success</Prompt>
      </Argument>
      <Argument name="rulesSyncFailed" type="int">
        <Prompt>task_out_cloud_bridge_rules_sync_failed</Prompt>
      </Argument>
      <Argument name="systemConfigSyncSuccessful" type="int">
        <Prompt>task_out_cloud_bridge_system_config__sync_success</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RuleExecutor" name="Run Rule" subType="task_item_type_generic" template="true" type="Generic">
  <Description>A task that can be used to run an arbitrary rule.</Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_run_rule_rule" name="ruleName" required="true" type="Rule">
        <Prompt>label_rule</Prompt>
      </Argument>
      <Argument helpKey="help_task_run_rule_ruleconfig" name="ruleConfig" type="string">
        <Prompt>label_rule_config</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.arcsightDataExportExecutor" formPath="/monitor/tasks/arcsightDataExportInclude.xhtml" name="ArcSight Data Export" progressInterval="5000" progressMode="String" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
      Template for creating a ArcSight data export task.
    </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_arcsight_database" name="database" type="string">
        <Prompt>task_in_arcsight_data_export_database</Prompt>
      </Argument>
      <Argument helpKey="help_task_arcsight_username" name="username" type="string">
        <Prompt>task_in_arcsight_data_export_database_uname</Prompt>
      </Argument>
      <Argument helpKey="help_task_arcsight_password" name="password" type="secret">
        <Prompt>task_in_arcsight_data_export_database_password</Prompt>
      </Argument>
      <Argument helpKey="help_task_arcsight_driverclass" name="driverClass" type="string">
        <Prompt>task_in_arcsight_data_export_database_driverClass</Prompt>
      </Argument>
      <Argument helpKey="help_task_arcsight_dburl" name="dbUrl" type="string">
        <Prompt>task_in_arcsight_data_export_database_url</Prompt>
      </Argument>
      <Argument name="exportIdentities" type="boolean">
        <Prompt>task_in_arcsight_data_export_identities</Prompt>
      </Argument>
      <Argument name="identitiesExportMode" type="string">
        <Prompt>task_in_arcsight_data_export_identities_mode</Prompt>
      </Argument>
      <Argument name="exportAudits" type="boolean">
        <Prompt>task_in_arcsight_data_export_audits</Prompt>
      </Argument>
      <Argument name="auditsExportMode" type="string">
        <Prompt>task_in_arcsight_data_export_audits_mode</Prompt>
      </Argument>
      <Argument name="promoteManagedAttributes" type="boolean">
        <Prompt>task_in_identity_refresh_promote_managed_attributes</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="identitiesExported" type="int">
        <Prompt>task_out_arcsight_data_export_identities</Prompt>
      </Argument>
      <Argument name="identitiesPruned" type="int">
        <Prompt>task_out_arcsight_data_export_pruned_identities</Prompt>
      </Argument>
      <Argument name="auditsExported" type="int">
        <Prompt>task_out_arcsight_data_export_audits</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ApplicationBuilderExecutor" formPath="/monitor/tasks/applicationBuilderTask.xhtml" name="Application Builder" resultRenderer="applicationBuilderResult.xhtml" subType="task_item_type_generic" template="true" type="Generic">
  <Description>A task that can be used to Create, Update, Read multiple IdentityIQ applications.</Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_application_type" name="applicationType" type="string">
        <Prompt>task_in_application_type</Prompt>
      </Argument>
      <Argument helpKey="help_task_operation" name="operation" type="string">
        <Prompt>task_in_operation</Prompt>
      </Argument>
      <Argument helpKey="help_task_file_path" name="filePath" type="string">
        <Prompt>task_in_file_path</Prompt>
      </Argument>
      <Argument helpKey="help_task_account_aggregation" name="triggerAccountAggregation" type="boolean">
        <Prompt>task_in_account_aggregation</Prompt>
      </Argument>
      <Argument helpKey="help_task_group_aggregation" name="triggerGroupAggregation" type="boolean">
        <Prompt>task_in_group_aggregation</Prompt>
      </Argument>
      <Argument helpKey="help_task_applications_per_aggregation" name="applicationsPerAggregation" type="string">
        <Prompt>task_in_applications_per_aggregation</Prompt>
      </Argument>
      <Argument helpKey="help_task_skip_test_connection" name="skipTestConnection" type="string">
        <Prompt>task_in_skip_test_connection</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applicationsScanned" type="int">
        <Prompt>task_out_scanned_application</Prompt>
      </Argument>
      <Argument name="applicationsCreated" type="int">
        <Prompt>task_out_application_created</Prompt>
      </Argument>
      <Argument name="applicationsUpdated" type="int">
        <Prompt>task_out_application_updated</Prompt>
      </Argument>
      <Argument name="applicationsNotFound" type="int">
        <Prompt>task_out_application_not_found</Prompt>
      </Argument>
      <Argument name="applicationsFailed" type="string">
        <Prompt>task_out_application_failed</Prompt>
      </Argument>
      <Argument name="applicationsExists" type="string">
        <Prompt>task_out_application_exists</Prompt>
      </Argument>
      <Argument name="exportFilePath" type="string">
        <Prompt>task_out_export_file_path</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.PrunerTask" name="System Maintenance Object Pruner" resultAction="Delete" subType="task_item_type_system" template="true" type="System">
  <Description>Prunes expired objects as part of the system maintenance</Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_prune_history" name="pruneHistory" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_history</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_task_results" name="pruneTaskResults" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_task_results</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_requests" name="pruneRequests" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_requests</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_provisioning_transactions" name="pruneProvisioningTransactons" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_provisioning_transactions</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_batch_requests" name="pruneBatchRequests" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_batch_requests</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_syslog_events" name="pruneSyslogEvents" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_syslog_events</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_attachments" name="pruneAttachments" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_attachments</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_pending_attachments" name="prunePendingAttachments" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_pending_attachments</Prompt>
      </Argument>
      <Argument helpKey="help_task_prune_native_identity_change_events" name="pruneNativeIdentityChangeEvents" type="boolean">
        <Prompt>task_in_perform_maintenance_prune_native_identity_change_events</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="objectsDeleted" type="int">
        <Prompt>task_out_objects_deleted</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ResetOrphanWorkItem" name="Reset Orphaned WorkItem Events" subType="task_item_type_system" template="true" type="System">
  <Description>Locates WorkItem Events with expired locks and resets them by either removing the lock or pruning.</Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_reset_orphan_wi_min_lock_age" name="minLockAge" type="int">
        <Prompt>task_in_reset_orphan_wi_min_lock_age</Prompt>
      </Argument>
      <Argument helpKey="help_task_reset_orphan_wi_reset_work_flows" multi="true" name="resetWorkflows" type="Workflow">
        <Prompt>task_in_reset_orphan_wi_workflow_to_reset</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="eventsReset" type="int">
        <Prompt>task_out_reset_orphan_wi_events_reset</Prompt>
      </Argument>
      <Argument name="eventsDeleted" type="int">
        <Prompt>task_out_reset_orphan_wi_events_deleted</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.NewCertificationExecutor" name="New Certification Generator" progressMode="String" subType="task_item_type_certification" type="Certification">
  <Description>
    Task that uses the new certification generation framework.
  </Description>
</TaskDefinition>
<TaskDefinition name="Refresh Identity Cube" resultAction="Delete" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="29"/>
      <entry key="TaskDefinition.runLengthTotal" value="3805"/>
      <entry key="TaskDefinition.runs" value="131"/>
      <entry key="TaskSchedule.host"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deleteDormantGroups" value="false"/>
      <entry key="disableIdentityProcessingThreshold" value="false"/>
      <entry key="disableManagerLookup" value="false"/>
      <entry key="doManualActions" value="false"/>
      <entry key="enableManualAccountSelection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="excludeInactive" value="false"/>
      <entry key="filterNeedsRefresh" value="false"/>
      <entry key="forceWorkflow" value="false"/>
      <entry key="includeWindowModified" value="false"/>
      <entry key="keepInactiveViolations" value="false"/>
      <entry key="markDormantScopes" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noMaintenanceWindowRetry" value="false"/>
      <entry key="noResetNeedsRefresh" value="false"/>
      <entry key="noRoleDeprovisioning" value="false"/>
      <entry key="processTriggers" value="true"/>
      <entry key="promoteAttributes" value="true"/>
      <entry key="promoteManagedAttributes" value="false"/>
      <entry key="provision" value="false"/>
      <entry key="refreshCompositeApplications" value="true"/>
      <entry key="refreshGroups" value="false"/>
      <entry key="refreshIdentityEntitlements" value="false"/>
      <entry key="refreshManagerStatus" value="true"/>
      <entry key="refreshRoleMetadata" value="false"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="synchronizeAttributes" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Perform a full refresh of all the identities.</Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition concurrent="true" name="Refresh Identity Cube Concurrent" subType="task_item_type_identity" type="Identity">
  <Description>
            Perform a full refresh of selected identities. This supports running concurrently.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Refresh Identity Cube"/>
  </Parent>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.CompositeAccountRefreshExecutor" name="Refresh Logical Accounts" subType="task_item_type_identity" template="true" type="Identity">
  <Attributes>
    <Map>
      <entry key="refreshCompositeApplications" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Perform a full refresh of all the identities.
        </Description>
  <Signature>
    <Inputs>
      <Argument inputTemplate="/monitor/tasks/argTemplates/compositeAppSelect.xhtml" multi="true" name="applications" required="true" type="Application">
        <Prompt>task_in_refresh_composite_accts_apps</Prompt>
      </Argument>
      <Argument name="thresholdDate" type="date">
        <Prompt>task_in_identity_refresh_threshold</Prompt>
      </Argument>
      <Argument name="promoteAttributes" type="boolean">
        <Description>
                        When true, the identity attributes will be recalculated from the
                        application attributes.
                    </Description>
        <Prompt>task_in_identity_refresh_promote_attributes</Prompt>
      </Argument>
      <Argument name="refreshManagerStatus" type="boolean">
        <Description>
                        When true, the manager status for the identities will be refreshed.
                        The manager status is true for an identity if there is any
                        other identity that references the first identity as a manager.
                    </Description>
        <Prompt>task_in_identity_refresh_refresh_manager_status</Prompt>
      </Argument>
      <Argument name="refreshScorecard" type="boolean">
        <Prompt>task_in_identity_refresh_refresh_scorecard</Prompt>
      </Argument>
      <Argument name="checkHistory" type="boolean">
        <Prompt>task_in_identity_refresh_check_history</Prompt>
      </Argument>
      <Argument name="refreshGroups" type="boolean">
        <Prompt>task_in_identity_refresh_refresh_groups</Prompt>
      </Argument>
      <Argument name="checkPolicies" type="boolean">
        <Prompt>task_in_identity_refresh_check_policies</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_in_identity_refresh_policies</Prompt>
      </Argument>
      <Argument name="refreshThreads" type="int">
        <Prompt>task_in_identity_refresh_threads</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_identity_refresh_total</Prompt>
      </Argument>
      <Argument name="linksRefreshed" type="int">
        <Prompt>task_out_identity_refresh_links_refreshed</Prompt>
      </Argument>
      <Argument name="linksRemoved" type="int">
        <Prompt>task_out_identity_refresh_links_removed</Prompt>
      </Argument>
      <Argument name="linksUnavailable" type="int">
        <Prompt>task_out_identity_refresh_links_unavailable</Prompt>
      </Argument>
      <Argument name="identitiesPruned" type="int">
        <Prompt>task_out_identity_refresh_identities_pruned</Prompt>
      </Argument>
      <Argument name="managers" type="int">
        <Prompt>task_out_identity_refresh_managers</Prompt>
      </Argument>
      <Argument name="detectedRoleChanges" type="int">
        <Prompt>task_out_identity_refresh_business_role_changes</Prompt>
      </Argument>
      <Argument name="exceptionChanges" type="int">
        <Prompt>task_out_identity_refresh_exception_changes</Prompt>
      </Argument>
      <Argument name="provisioningRequests" type="int">
        <Prompt>task_out_identity_refresh_provisioning_requests</Prompt>
      </Argument>
      <Argument name="provisioningErrors" type="int">
        <Prompt>task_out_identity_refresh_provisioning_errors</Prompt>
      </Argument>
      <Argument name="policies" type="string">
        <Prompt>task_out_identity_refresh_policies</Prompt>
      </Argument>
      <Argument name="policyViolations" type="int">
        <Prompt>task_out_identity_refresh_policy_violations</Prompt>
      </Argument>
      <Argument name="policyNotifications" type="int">
        <Prompt>task_out_identity_refresh_policy_notifications</Prompt>
      </Argument>
      <Argument name="scoresChanged" type="int">
        <Prompt>task_out_identity_refresh_scores_changed</Prompt>
      </Argument>
      <Argument name="snapshotsCreated" type="int">
        <Prompt>task_out_identity_refresh_snapshots_created</Prompt>
      </Argument>
      <Argument name="groupDefinitions" type="string">
        <Prompt>task_out_identity_refresh_group_definitions</Prompt>
      </Argument>
      <Argument name="groupIndexes" type="int">
        <Prompt>task_out_identity_refresh_group_indexes</Prompt>
      </Argument>
      <Argument name="unscopedIdentities" type="int">
        <Prompt>task_out_identity_refresh_unscoped_identities</Prompt>
      </Argument>
      <Argument name="certificationsCreated" type="int">
        <Prompt>task_out_identity_refresh_certifications_created</Prompt>
      </Argument>
      <Argument name="certificationsDeleted" type="int">
        <Prompt>task_out_identity_refresh_certifications_deleted</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.IdentityCleanser" name="Prune Identity Cubes" progressInterval="5000" progressMode="String" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="24"/>
      <entry key="TaskDefinition.runLengthTotal" value="24"/>
      <entry key="TaskDefinition.runs" value="1"/>
    </Map>
  </Attributes>
  <Description>
            Delete identities that have no account links and have no important references.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="filter" type="string">
        <Prompt>task_in_identity_refresh_filter</Prompt>
      </Argument>
      <Argument name="noDelete" type="boolean">
        <Prompt>task_in_cleanser_no_delete</Prompt>
      </Argument>
      <Argument name="protectIfCertifying" type="boolean">
        <Prompt>task_in_cleanser_if_certifying</Prompt>
      </Argument>
      <Argument name="protectIfManuallyCorrelated" type="boolean">
        <Prompt>task_in_cleanser_if_manually_correlated</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_cleanser_total</Prompt>
      </Argument>
      <Argument name="deleted" type="int">
        <Prompt>task_out_cleanser_deleted</Prompt>
      </Argument>
      <Argument name="protected" type="int">
        <Prompt>task_out_cleanser_protected</Prompt>
      </Argument>
      <Argument name="certifying" type="int">
        <Prompt>task_out_cleanser_certifying</Prompt>
      </Argument>
      <Argument name="errors" type="int">
        <Prompt>task_out_cleanser_errors</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition name="Perform Maintenance" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="340"/>
      <entry key="TaskDefinition.runs" value="2820"/>
      <entry key="automaticallyCloseCertifications" value="true"/>
      <entry key="denormalizeScopes" value="true"/>
      <entry key="finishCertifications" value="true"/>
      <entry key="forwardInactiveWorkItems" value="true"/>
      <entry key="phaseCertifications" value="true"/>
      <entry key="processWorkflowEvents" value="true"/>
      <entry key="pruneCertifications" value="true"/>
      <entry key="pruneHistory" value="true"/>
      <entry key="pruneRequests" value="true"/>
      <entry key="pruneSyslogEvents" value="true"/>
      <entry key="pruneTaskResults" value="true"/>
      <entry key="scanRemediations" value="true"/>
    </Map>
  </Attributes>
  <Description>Prune identity snapshots, task results, and certifications. Perform other background maintenance tasks.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="System Maintenance"/>
  </Parent>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ApplicationScorer" name="Refresh Application Scores" progressInterval="5000" progressMode="String" subType="task_item_type_scoring" type="Scoring">
  <Description>
            Refresh application scores.
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Prompt>task_in_refresh_application_scores_applications</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="applicationScoresRefreshed" type="int">
        <Prompt>task_out_refresh_application_scores_application_scores_refreshed</Prompt>
      </Argument>
      <Argument name="linksExamined" type="int">
        <Prompt>task_out_refresh_application_scores_links_examined</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RoleScorer" name="Refresh Role Scorecard" progressInterval="5000" progressMode="String" subType="task_item_type_scoring" type="Scoring">
  <Description>
            Analyzes each role in the system and collects statistics about them.
        </Description>
  <Signature>
    <Returns>
      <Argument name="totalRoles" type="int">
        <Prompt>task_out_role_scorer_total_roles</Prompt>
      </Argument>
      <Argument name="rolesScored" type="int">
        <Prompt>task_out_role_scorer_roles_scored</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RemoveOrphanRoleRequestsTask" name="Remove Orphan Role Requests" progressMode="String" subType="task_item_type_system" type="System">
  <Description>Remove orphaned requests for roles that no longer exist</Description>
  <Signature>
    <Returns>
      <Argument name="numRequestsRemoved" type="int">
        <Prompt>task_out_remove_orphan_role_requests_removed</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition name="Perform Identity Request Maintenance" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="20"/>
      <entry key="TaskDefinition.runLengthTotal" value="683"/>
      <entry key="TaskDefinition.runs" value="34"/>
      <entry key="maxAge" value="0"/>
      <entry key="maxVerificationDays" value="7"/>
      <entry key="scanRequests" value="true"/>
    </Map>
  </Attributes>
  <Description>
          Prune old identity request objects and scan unverified access requests to check for provisioning completeness.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Request Maintenance"/>
  </Parent>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.ManagedAttributeUpgrader" hidden="true" name="Upgrade Managed Attributes" progressMode="String" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="retainGroups" value="false"/>
    </Map>
  </Attributes>
  <Description>
          Upgrade ManagedAttributes to the 6.0 model, and convert AccountGroups to ManagedAttributes.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="defaultLocale" required="true" type="string">
        <Prompt>Default locale (example En_US):</Prompt>
      </Argument>
      <Argument name="simulate" type="boolean">
        <Prompt>Simulate execution without persisting changes</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.FullTextIndexer" name="Full Text Index Refresh" progressMode="String" subType="task_item_type_system" type="System">
  <Description>
          Build full-text indexes for roles and managed attributes.
        </Description>
</TaskDefinition>
<TaskDefinition name="Effective Access Index Refresh" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="indexEntitlementTargets" value="true"/>
      <entry key="indexRoleTargets" value="true"/>
    </Map>
  </Attributes>
  <Description>
          Calculate the indirect target associations (Tcodes, etc.) for entitlements and roles.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Effective Access Indexing"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Entitlement Correlation" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="correlateEntitlements" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Refresh the business role assignments of all identities.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Risk Scores" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="refreshScorecard" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Refresh the risk scores of all identities.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Role Indexes" subType="task_item_type_generic" type="Generic">
  <Description>
            Refresh the statistics of all roles.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Role Index Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Role-Entitlement Associations" subType="task_item_type_system" type="System">
  <Description>
            Delete all existing role-entitlement associations and re-create them for all roles.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Role-Entitlement Associations"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Groups" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="refreshGroups" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Refresh indexes for all identity groups.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Check Active Policies" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="checkPolicies" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Check default policies and refresh the policy violation
            status on each identity.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.WorkItemExpirationScanner" name="Check Expired Work Items" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="21"/>
      <entry key="TaskDefinition.runs" value="37"/>
    </Map>
  </Attributes>
  <Description>Send reminders, escalate, or expire items.</Description>
  <Signature>
    <Returns>
      <Argument name="total" type="int">
        <Prompt>task_out_check_expired_work_items_total</Prompt>
      </Argument>
      <Argument name="totalWorkItems" type="int">
        <Prompt>task_out_check_expired_work_items_work_items_total</Prompt>
      </Argument>
      <Argument name="totalCertItems" type="int">
        <Prompt>task_out_check_expired_work_items_cert_items_total</Prompt>
      </Argument>
      <Argument name="expirations" type="int">
        <Prompt>task_out_check_expired_work_items_expirations</Prompt>
      </Argument>
      <Argument name="reminders" type="int">
        <Prompt>task_out_check_expired_work_items_reminders</Prompt>
      </Argument>
      <Argument name="escalations" type="int">
        <Prompt>task_out_check_expired_work_items_escalations</Prompt>
      </Argument>
      <Argument name="pushes" type="int">
        <Prompt>task_out_check_expired_work_items_pushes</Prompt>
      </Argument>
      <Argument name="emailsSuppressed" type="String">
        <Prompt>task_out_emails_suppressed</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.MitigationExpirationScanner" name="Check Expired Mitigations" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="24"/>
      <entry key="TaskDefinition.runs" value="36"/>
    </Map>
  </Attributes>
  <Description>Send notifications when mitigations expire.</Description>
  <Signature>
    <Returns>
      <Argument name="identities" type="int">
        <Prompt>task_out_check_expired_mitigations_identities</Prompt>
      </Argument>
      <Argument name="expired" type="int">
        <Prompt>task_out_check_expired_mitigations_expired</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RequestNotificationScanner" name="Check Sunset Requests" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="20"/>
      <entry key="TaskDefinition.runs" value="36"/>
    </Map>
  </Attributes>
  <Description>Send notifications when a Role with a sunset is approaching expiration</Description>
  <Signature>
    <Returns>
      <Argument name="sent" type="int">
        <Prompt>task_out_notifications_sent</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RoleMiningTask" hidden="true" name="Role Mining" subType="task_item_type_system" type="System">
  <Description>
            Performs undirected role mining.
        </Description>
  <Signature>
    <Inputs>
      <Argument name="configId" required="true" type="string">
        <Prompt>task_in_role_mining_config_id</Prompt>
      </Argument>
      <Argument name="filter" type="string">
        <Prompt>task_in_role_mining_filter</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="totalInstances" type="int">
        <Prompt>task_out_role_mining_total_instances</Prompt>
      </Argument>
      <Argument name="totalRoles" type="int">
        <Prompt>task_out_role_mining_total_roles</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.RoleSynchronizer" name="Synchronize Roles" subType="task_item_type_system" type="System">
  <Description>
            Synchronize roles with identity management systems.
        </Description>
  <Signature>
    <Returns>
      <Argument name="updates" type="int">
        <Prompt>task_out_role_sync_updates</Prompt>
      </Argument>
      <Argument name="updateFailures" type="int">
        <Prompt>task_out_role_sync_update_failures</Prompt>
      </Argument>
      <Argument name="deletes" type="int">
        <Prompt>task_out_role_sync_deletes</Prompt>
      </Argument>
      <Argument name="deleteFailures" type="int">
        <Prompt>task_out_role_sync_delete_failures</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition name="Role Overlap Analysis" resultRenderer="impactAnalysis.xhtml" subType="task_item_type_system" type="System">
  <Attributes>
    <Map>
      <entry key="baseResultName" value="Overlap Analysis - "/>
      <entry key="doOverlapAnalysis" value="true"/>
      <entry key="noImpactAnalysis" value="true"/>
    </Map>
  </Attributes>
  <Description>
            Run overlap analysis on a selected role.
        </Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Impact Analysis"/>
  </Parent>
  <Signature>
    <Inputs>
      <Argument name="targetRole" required="true" type="Bundle">
        <Prompt>task_in_overlap_role</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="roles" type="string">
        <Prompt>task_out_impact_analysis_roles</Prompt>
      </Argument>
      <Argument name="profiles" type="string">
        <Prompt>task_out_impact_analysis_profiles</Prompt>
      </Argument>
      <Argument name="totalIdentities" type="int">
        <Prompt>task_out_impact_analysis_total_identities</Prompt>
      </Argument>
      <Argument name="totalLosses" type="int">
        <Prompt>task_out_impact_analysis_total_losses</Prompt>
      </Argument>
      <Argument name="totalGains" type="int">
        <Prompt>task_out_impact_analysis_total_gains</Prompt>
      </Argument>
      <Argument name="totalConflicts" type="int">
        <Prompt>task_out_impact_analysis_total_conflicts</Prompt>
      </Argument>
      <Argument name="analysis" type="complex"/>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.SearchReport" formPath="/analyze/reports/searchreportargs.xhtml" hidden="true" name="Search Report" resultAction="Rename" subType="Search" template="true" type="GridReport">
  <Attributes>
    <Map>
      <entry key="jasperTemplate" value="SearchReport"/>
    </Map>
  </Attributes>
  <Description>
            Report created by the user from the analyze identities page.
        </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="columns" type="string">
        <Description>rept_input_search_report_columns</Description>
      </Argument>
      <Argument multi="true" name="filters" type="Filter">
        <Description>rept_input_search_report_filters</Description>
      </Argument>
      <Argument name="searchItem" type="SearchItem"/>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Uncorrelated Accounts Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Uncorrelated Accounts Report">
            <Chart category="application.name" groupBy="application.name" title="rept_uncorrelated_ids_chart_title" type="pie" value="count(*)"/>
            <DataSource objectType="sailpoint.object.Link" type="Filter">
              <QueryParameters>
                <Parameter argument="correlatedApps" property="application.id"/>
                <Parameter defaultValue="false" property="identity.correlated" valueClass="boolean"/>
                <Parameter defaultValue="false" property="application.authoritative" valueClass="boolean"/>
                <Parameter defaultValue="false" property="application.logical" valueClass="boolean"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Uncorrelated Accounts Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_uncorrelated_ids_grid_identity" property="identity.name" sortable="true" width="110"/>
              <ReportColumnConfig field="account" header="rept_uncorrelated_ids_grid_account" property="nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_uncorrelated_ids_grid_firstName" property="identity.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_uncorrelated_ids_grid_lastName" property="identity.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="applicationName" header="rept_uncorrelated_ids_grid_appName" property="application.name" sortable="true" width="110"/>
            </Columns>
            <ReportSummary title="Uncorrelated Account Details">
              <DataSourceScript>
                <Source>
                        
                        import java.util.*;
                        import sailpoint.tools.Util;
                        import java.lang.Math;
                        import sailpoint.object.*;
                        import sailpoint.api.ObjectUtil;

                        QueryOptions ops = new QueryOptions();
                        ops.addGroupBy("correlated");

                        String sources = "";
                        if (reportArgs.containsKey("correlatedApps")){
                           List apps = reportArgs.getList("correlatedApps");
                           if (apps != null){
                             ops.addFilter(Filter.in("links.application.id", apps));
                             List appNames = ObjectUtil.convertIdsToNames(context, Application.class, apps);
                             sources = Util.listToCsv(appNames);
                           }
                        }

                        List fields = new ArrayList();
                        fields.add("correlated");
                        fields.add("count(distinct id)");

                        int correlated = 0;
                        int uncorrelated = 0;
                        Iterator results = context.search(Identity.class, ops, fields);
                        while(results.hasNext()){
                            Object[] row = results.next();
                            int count = Util.otoi(row[1]);
                            if ((Boolean)row[0]){
                                correlated += count;
                            } else {
                                uncorrelated += count;
                            }
                        }

                        int totalIdentities =  correlated + uncorrelated;
                        float percent =  totalIdentities != 0 ? (float)uncorrelated/totalIdentities : 0;
                        String percentString = ((int)Math.floor(percent * 100)) +  "%";

                        Map map = new HashMap();
                        map.put("sources", sources);
                        map.put("correlatedIdentities", correlated);
                        map.put("uncorrelatedIdentities", uncorrelated);
                        map.put("totalIdentities", totalIdentities);
                        map.put("percentCorrelated", percentString);

                        return map;
                        
                      </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="rept_uncorrelated_ids_grid_label_auth_sources" name="sources"/>
                <LiveReportSummaryValue label="rept_uncorrelated_ids_summary_correlated" name="correlatedIdentities"/>
                <LiveReportSummaryValue label="rept_uncorrelated_ids_summary_uncorrelated" name="uncorrelatedIdentities"/>
                <LiveReportSummaryValue label="rept_uncorrelated_ids_summary_total_ids" name="totalIdentities"/>
                <LiveReportSummaryValue label="rept_uncorrelated_ids_summary_percent" name="percentCorrelated"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of the uncorrelated user accounts in the system.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessUncorrelatedIdentitiesReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="correlatedApps" type="Application">
        <Description>rept_input_uncorrelated_ident_report_correlated_apps</Description>
        <Prompt>report_input_correlated_apps</Prompt>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Risky Accounts Report" progressMode="String" resultAction="Rename" subType="Risk Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Risky Accounts Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.RiskyAccountsDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applications" property="application.id"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="application" header="rept_risky_accounts_grid_col_app" property="application.name" width="110"/>
              <ReportColumnConfig field="username" header="rept_risky_accounts_grid_col_username" property="identity.name" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_risky_accounts_grid_col_firstname" property="identity.firstname" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_risky_accounts_grid_col_lastname" property="identity.lastname" width="110"/>
              <ReportColumnConfig field="issues" header="rept_risky_accounts_grid_col_issues" property="id" width="110"/>
              <ReportColumnConfig field="accoundId" header="rept_risky_accounts_grid_col_account_id" property="nativeIdentity" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A summary view of risky accounts in the system and the causes of their risk.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityApplicationRiskReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_identity_app_risk_report_correlated_apps</Description>
        <Prompt>rept_risky_accounts_arg_correlated_apps</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Users by Application Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Users by Application Report">
            <DataSource objectType="Link" type="Filter">
              <QueryParameters>
                <Parameter argument="applications" property="application.id"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="application" header="rept_users_by_app_col_app" property="application.name" sortable="true" width="110"/>
              <ReportColumnConfig field="identityDisplayName" header="rept_users_by_app_col_identity_display" property="identity.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="identityName" header="rept_users_by_app_col_identity" property="identity.name" sortable="true" width="110"/>
              <ReportColumnConfig field="account" header="rept_users_by_app_col_account_id" property="nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="accountDisplayName" header="rept_users_by_app_col_account_name" property="displayName" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of the users in the system categorized by the applications that they belong to.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_user_report_apps</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Application Account Summary Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Application Account Summary Report">
            <DataSource objectType="Application" type="Filter">
              <QueryParameters>
                <Parameter argument="applications" property="id"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="application" header="rept_app_account_summary_col_app" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="totalAccounts" header="rept_app_account_summary_col_total_accounts" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("application.id", value));
                          return context.countObjects(Link.class, ops);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="distinctIdentities" header="rept_app_account_summary_col_identities_with_accounts" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("links.application.id", value));
                          ops.setDistinct(true);
                          return context.countObjects(Identity.class, ops);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="multipleAccounts" header="rept_app_account_summary_col_identities_with_mult_accounts" property="id" width="110">
                <RenderScript>
                  <Source>
                            import sailpoint.object.*;
                            Map queryArgs = new HashMap();
                            queryArgs.put("application", value);

                            int multipleLinksCount = 0;
                            String hql = "select count(distinct identityAlias.id) from sailpoint.object.Identity identityAlias where (select count(*) from sailpoint.object.Link links2 where links2.identity.id = identityAlias.id and links2.application.id = (:application)) &gt; 1";
                            Iterator it = context.search(hql, queryArgs, null);
                            while (it.hasNext()) {
                                Object o = it.next();
                                if(o!=null) {
                                    multipleLinksCount = ((Long)o).intValue();
                                }
                            }
                          return multipleLinksCount;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays a summary of the accounts on each application.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_accounts_report_apps</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Configured Applications Details Report" progressMode="Percentage" resultAction="Rename" subType="Configured Resource Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Applications Detail Report">
            <DataSource objectType="Application" type="Filter">
              <QueryParameters>
                <Parameter argument="applications" property="id"/>
                <Parameter argument="owners" property="owner.id"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Applications Detail Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="application" header="rept_app_grid_col_app" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_app_grid_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_app_grid_col_owner" property="owner.name" sortable="true" width="110"/>
              <ReportColumnConfig field="remediator" header="rept_app_grid_col_revoker" property="remediators.name" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                    import sailpoint.tools.Message;
                                    import sailpoint.web.messages.MessageKeys;
                                    
                                    if(value==null) {
                                    Message m = Message.localize(MessageKeys.REPT_APP_NO_REVOKERS);
                                    return m.getLocalizedMessage(locale,timezone);                    
                                    }
                                    else {
                                    return value;
                                    }
                                </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of all configured applications.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_report_apps</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners" type="Identity">
        <Description>rept_input_app_report_owners</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Delimited File Application Status Report" progressMode="Percentage" resultAction="Rename" subType="Configured Resource Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Delimited File Application Status Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.DelimitedFileReportDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applications"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Delimited File Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="application" header="rept_app_grid_col_app" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_app_grid_col_owner" sortable="true" width="110"/>
              <ReportColumnConfig field="remediator" header="rept_app_grid_col_revoker" width="110"/>
              <ReportColumnConfig field="refreshDate" header="rept_app_delimited_refresh_date" width="110"/>
              <ReportColumnConfig field="fileName" header="rept_app_delimited_filename" width="110"/>
              <ReportColumnConfig field="fileDate" header="rept_app_delimited_filedate" width="110"/>
              <ReportColumnConfig field="fileSize" header="rept_app_delimited_filesize" width="110"/>
              <ReportColumnConfig field="daysOld" header="rept_app_delimited_days_old" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of configured applications and the status of their local file repositories.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_report_apps</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Application Risk Live Report" progressMode="Percentage" resultAction="Rename" subType="Risk Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Application Risk Live Report">
            <DataSource objectType="Application" type="Filter">
              <QueryParameters>
                <Parameter argument="applications" property="id"/>
                <Parameter argument="owners" property="owner.id"/>
              </QueryParameters>
            </DataSource>
            <ExtendedColumnScript>
              <Source>
                          
                          import java.util.*;
                          import sailpoint.reporting.*;
                          import sailpoint.object.*;

                          List newCols = new ArrayList();
                          ScoreConfig config = context.getObjectByName(ScoreConfig.class, ScoreConfig.OBJ_NAME);
                          List scores = config.getApplicationScores();
                          if (scores != null) {
                              Rule rule = context.getObjectByName(Rule.class, "Report Scorecard Value Renderer");
                              for (ScoreDefinition score : scores) {
                                  if (!score.isDisabled()  &amp;&amp; score.getName()!=null) {
                                      ReportColumnConfig conf = new ReportColumnConfig(score.getName(),
                                          score.getDisplayableName(), "java.lang.String");
                                      conf.setProperty("scorecard");
                                      conf.setSortable(false);
                                      conf.setExtendedColumn(true);
                                      conf.setRenderRule(rule);
                                      newCols.add(conf);
                                  }
                              }
                          }

                          return newCols;
                          
                      </Source>
            </ExtendedColumnScript>
            <Columns>
              <ReportColumnConfig field="name" header="rept_app_risk_col_app" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="compositeScore" header="rept_app_risk_col_comp_score" property="scorecard.compositeScore" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A summary view of the risk of each application and the accounts that factor into that risk.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationRiskReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_report_apps</Description>
      </Argument>
      <Argument filterString="workgroup == true || workgroup == false" multi="true" name="owners" type="Identity">
        <Description>rept_input_app_report_owners</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="User Details Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="User Details Report">
            <DataSource defaultSort="name" objectType="Identity" type="Filter">
              <QueryParameters>
                <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                <Parameter argument="identityApplications" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="identityRoles">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Base Identity Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_user_details_col_identity" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_user_details_col_lastname" property="lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_user_details_col_firstname" property="firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_user_details_col_manager" property="manager.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="roles" header="rept_user_details_col_roles" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          import java.util.*;

                          List nameFilter = new ArrayList();
                          nameFilter.add(Filter.eq("name", "assignedRoles"));
                          nameFilter.add(Filter.eq("name", "detectedRoles"));

                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("identity.id", value));
                          ops.addFilter(Filter.or(nameFilter));

                          List names = new ArrayList();
                          List properties = new ArrayList();
                          properties.add("value");
                          Iterator iter = context.search(IdentityEntitlement.class, ops, properties);
                          while(iter.hasNext()){
                            names.add(iter.next()[0]);
                          }
                          return names;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="applications" header="rept_user_details_col_applications" property="links.application.name" subQueryKey="id" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of users currently detected by IdentityIQ.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="lastLogin" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefresh" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument multi="true" name="identityRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="identityApplications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Roles Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Identity Roles Report">
            <DataSource objectType="IdentityEntitlement" type="Filter">
              <Query>name=="assignedRoles" || name=="detectedRoles"</Query>
              <QueryParameters>
                <Parameter argument="identities" property="identity.id"/>
                <Parameter argument="lastRefresh" property="identity.lastRefresh" valueClass="daterange"/>
                <Parameter argument="lastLogin" property="identity.lastLogin" valueClass="daterange"/>
                <Parameter argument="identityApplications" property="identity.links.application.id"/>
                <Parameter argument="capabilities" property="identity.capabilities.id"/>
                <Parameter argument="identityRoles" property="value">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Bundle.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="groupDefinitions" property="identity">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, true, property);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Base Identity Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_id_roles_col_identity" property="identity.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="role" header="rept_id_roles_col_role" property="value" sortable="true" width="110"/>
              <ReportColumnConfig field="detected" header="rept_id_roles_col_method" property="name" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.tools.*;
                          return value.equals("assignedRoles") ? Message.localize("rept_id_roles_col_assigned") : Message.localize("rept_id_roles_col_detected");
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="lastCertification" header="rept_id_roles_last_cert" property="certificationItem.parent.certification.signed" sortable="true" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Entitlement Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays the roles that each identity is a member of.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityRoleReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="lastLoginType" type="string">
        <Description>rept_input_user_report_last_login_type</Description>
      </Argument>
      <Argument name="lastLogin" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefreshType" type="string">
        <Description>rept_input_user_report_last_refresh_type</Description>
      </Argument>
      <Argument name="lastRefresh" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument multi="true" name="identityRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="identityApplications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument filterString="managerStatus == true" multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Application Account by Attribute Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="User Account Attributes Report">
            <DataSource objectType="sailpoint.object.Link" type="Filter">
              <QueryParameters>
                <Parameter argument="application" property="application.id"/>
              </QueryParameters>
            </DataSource>
            <ExtendedColumnScript>
              <Source>
                        
                        import java.util.*;
                        import sailpoint.reporting.*;
                        import sailpoint.object.*;

                        List newCols = new ArrayList();
                        Map formValues = form.getFieldValues();
                        if (formValues != null &amp;&amp; formValues.containsKey("application") &amp;&amp; formValues.get("application") != null){
                          newCols = ReportingLibrary.createApplicationAttributeColumns(context, formValues.get("application"));
                        }

                        return newCols;
                        
                    </Source>
            </ExtendedColumnScript>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Application Account by Attribute Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="application" header="rept_account_by_attr_col_application" property="application.name" sortable="true" width="110"/>
              <ReportColumnConfig field="account" header="rept_account_by_attr_col_account" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_account_by_attr_col_identity" property="identity.displayName" sortable="true" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Account Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Report for querying accounts on extended account attributes.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="application" type="Application"/>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" formPath="/analyze/reports/userreportargs.xhtml" name="Identity Risk Live Report" progressMode="Percentage" resultAction="Rename" subType="Risk Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Identity Risk Report">
            <Chart bottomLabel="rept_id_risk_chart_bottom_label" leftLabel="rept_id_risk_chart_left_label" title="rept_id_risk_chart_title" type="column">
              <Script>
                <Source>
                        
                          import sailpoint.object.*;
                          import java.util.*;

                          Map scores = new HashMap();
                          scores.put("rept_id_risk_col_score", "compositeScore");
                          scores.put("rept_id_risk_col_role", "businessRoleScore");
                          scores.put("rept_id_risk_col_entitlements", "entitlementScore");
                          scores.put("rept_id_risk_col_policy", "policyScore");
                          scores.put("rept_id_risk_col_certification", "certificationScore");

                          List data = new ArrayList();
                          for(Map.Entry entry : scores.entrySet()){
                            for(var i=1;i&lt;=5;i++){
                              int min = (i - 1) * 200;
                              int max = i * 200;

                              Map rowData = new HashMap();
                              rowData.put("category", min + " - " + max);
                              rowData.put("series", entry.getKey());

                              List filters = new ArrayList();
                              filters.add(Filter.ge("scorecard." + entry.getValue(), min));
                              filters.add(Filter.le("scorecard." + entry.getValue(), max));
                              QueryOptions ops = new QueryOptions(baseQueryOptions);
                              ops.addFilter(Filter.and(filters));
                              int count = context.countObjects(Identity.class, ops);
                              rowData.put("value", count);

                              data.add(rowData);
                            }
                          }
                          return data;
                        
                      </Source>
              </Script>
            </Chart>
            <DataSource objectType="Identity" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
                <Parameter argument="lastRefreshStart" operation="GT" property="lastRefresh"/>
                <Parameter argument="lastRefreshEnd" operation="LT" property="lastRefresh"/>
                <Parameter argument="lastLoginStart" operation="GT" property="lastLogin"/>
                <Parameter argument="lastLoginEnd" operation="LT" property="lastLogin"/>
                <Parameter argument="identityApplications" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="identityBusinessRoles">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.or(roleFilters));
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity Risk Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="username" header="rept_id_risk_col_username" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_id_risk_col_first_name" property="firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_id_risk_col_manager" property="manager.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="risk" header="rept_id_risk_col_score" property="scorecard.compositeScore" sortable="true" width="110"/>
              <ReportColumnConfig field="roleRisk" header="rept_id_risk_col_role" property="scorecard.businessRoleScore" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlementRisk" header="rept_id_risk_col_entitlements" property="scorecard.entitlementScore" sortable="true" width="110"/>
              <ReportColumnConfig field="policyRisk" header="rept_id_risk_col_policy" property="scorecard.policyScore" sortable="true" width="110"/>
              <ReportColumnConfig field="certRisk" header="rept_id_risk_col_certification" property="scorecard.certificationScore" sortable="true" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of the risk associated with each identity detected by IdentityIQ.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityRiskReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="lastLoginStart" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastLoginEnd" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefreshStart" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument name="lastRefreshEnd" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument multi="true" name="identityBusinessRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="identityApplications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Forwarding Report" progressMode="String" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Identity Forwarding Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.UserForwardLiveReportDataSource" objectType="Identity" type="Java">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
                <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                <Parameter argument="applications" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="businessRoles">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity Forwarding Report Options Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_usr_forward_col_identity" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="rept_usr_forward_col_identity_display" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="forwardingUser" header="rept_usr_forward_col_forward" property="preferences" width="110"/>
              <ReportColumnConfig field="forwardingDisplayName" header="rept_usr_forward_col_forward_display" property="preferences" width="110"/>
              <ReportColumnConfig field="startDate" header="rept_usr_forward_col_start" property="preferences" width="110"/>
              <ReportColumnConfig field="endDate" header="rept_usr_forward_col_end" property="preferences" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A list of users who have forwarding configured and to which user.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="lastLogin" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefresh" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument multi="true" name="businessRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.ApplicationReport" formPath="/analyze/reports/applicationreportargs.xhtml" name="Configured Applications Archive Report" progressMode="Percentage" resultAction="Rename" subType="Configured Resource Reports" template="true" type="Report">
  <Attributes>
    <Map>
      <entry key="jasperTemplate" value="ApplicationMainReport"/>
    </Map>
  </Attributes>
  <Description> 
      Displays configured applications in archive format.
    </Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_report_apps</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners" type="Identity">
        <Description>rept_input_app_report_owners</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
      <Argument name="dontEmailEmptyReport" type="boolean">
        <Description>label_dont_email_empty_reports</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.BusinessRoleReport" formPath="/analyze/reports/businessrolereportargs.xhtml" name="Role Archive Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="Report">
  <Attributes>
    <Map>
      <entry key="jasperTemplate" value="BusinessRoleMainReport"/>
    </Map>
  </Attributes>
  <Description> 
      Displays role information in archive format.
    </Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument multi="true" name="type" type="string">
        <Description>rept_input_biz_role_report_type</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners" type="Identity">
        <Description>rept_input_biz_role_report_owners</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_biz_role_report_status</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
      <Argument name="dontEmailEmptyReport" type="boolean">
        <Description>label_dont_email_empty_reports</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="User Activity Report" progressMode="Percentage" resultAction="Rename" subType="Activity Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="User Activity Report">
            <DataSource objectType="ApplicationActivity" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="identityName">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="applications" property="sourceApplication">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="startDate" operation="GE" property="timeStamp"/>
                <Parameter argument="endDate" operation="LE" property="timeStamp"/>
                <Parameter argument="target" property="target"/>
                <Parameter argument="action" property="action" valueClass="sailpoint.object.ApplicationActivity$Action"/>
                <Parameter argument="result" property="result" valueClass="sailpoint.object.ApplicationActivity$Result"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="User Activity Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_app_activity_col_identity" property="identityName" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_app_activity_col_app" property="sourceApplication" sortable="true" width="110"/>
              <ReportColumnConfig field="target" header="rept_app_activity_col_target" property="target" sortable="true" width="110"/>
              <ReportColumnConfig field="action" header="rept_app_activity_col_action" property="action" sortable="true" width="110"/>
              <ReportColumnConfig field="result" header="rept_app_activity_col_result" property="result" sortable="true" width="110"/>
              <ReportColumnConfig field="activityDate" header="rept_app_activity_col_date" property="timeStamp" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about user activity on each application in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationActivityReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_app_activity_report_apps</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity">
        <Description>rept_input_app_activity_report_identities</Description>
      </Argument>
      <Argument multi="true" name="action" type="string">
        <Description>rept_input_app_activity_report_action</Description>
      </Argument>
      <Argument name="target" type="string">
        <Description>rept_input_app_activity_report_target</Description>
      </Argument>
      <Argument multi="true" name="result" type="string">
        <Description>rept_input_app_activity_report_result</Description>
      </Argument>
      <Argument name="startDate" type="date">
        <Description>rept_input_app_activity_report_start_date</Description>
      </Argument>
      <Argument name="endDate" type="date">
        <Description>rept_input_app_activity_report_end_date</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Access Review Signoff Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource objectType="Certification" type="Filter">
              <QueryParameters>
                <Parameter argument="groups" property="groupDefinitionId"/>
                <Parameter argument="tags" property="tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="certificationGroups.id"/>
                <Parameter argument="managers" property="manager">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="applications" property="applicationId"/>
                <Parameter argument="creationDate" property="created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="expiration" valueClass="daterange"/>
                <Parameter argument="esigned" property="signOffHistory.electronicSign" valueClass="boolean">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import sailpoint.api.*;
                            if (value != null &amp;&amp; !"null".equals(value)){
                              if (value){
                                queryOptions.addFilter(Filter.eq("signOffHistory.electronicSign", true));
                              } else {
                                List filters = new ArrayList();
                                filters.add(Filter.eq("signOffHistory.electronicSign", false));
                                filters.add(Filter.isempty("signOffHistory"));
                                queryOptions.addFilter(Filter.or(filters));
                              }
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="signedOff" property="signed">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import sailpoint.api.*;

                            if (value != null &amp;&amp; !"null".equals(value)){
                              if (Boolean.parseBoolean(value)){
                                queryOptions.addFilter(Filter.notnull("signed"));
                              } else {
                                queryOptions.addFilter(Filter.isnull("signed"));
                              }
                            }

                            return queryOptions;
                           
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Certification Signoff Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="certName" header="rept_cert_signoff_cert_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="signer" header="rept_cert_signoff_signer" property="signOffHistory.signerName" sortable="true" width="110"/>
              <ReportColumnConfig field="signed" header="rept_cert_signoff_signoff_date" property="signOffHistory.date" sortable="true" width="110"/>
              <ReportColumnConfig field="start" header="rept_cert_signoff_start_date" property="created" sortable="true" width="110"/>
              <ReportColumnConfig field="due" header="rept_cert_signoff_due_date" property="expiration" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_cert_signoff_owner" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          import java.util.*;
                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("id", value));
                          ops.addFilter(Filter.join("certifiers", "Identity.name"));
                          List names = new ArrayList();
                          List properties = new ArrayList();
                          properties.add("Identity.name");
                          Iterator iter = context.search(Certification.class, ops, properties);
                          while(iter.hasNext()){
                            names.add(iter.next()[0]);
                          }
                          return names;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="tags" header="rept_cert_signoff_tags" property="tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="esigned" header="rept_cert_signoff_esig" property="signOffHistory.electronicSign" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.web.messages.MessageKeys;

                          if (value != null)
                            return value ? MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_TRUE : MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_FALSE;

                          return MessageKeys.REPT_CERT_SIGNOFF_ESIGNED_VALUE_FALSE;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="meaning" header="rept_cert_signoff_meaning" property="signOffHistory.text" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about when and by whom an access review was signed off.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessCertificationSignoffReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="tags" type="Tag"/>
      <Argument multi="true" name="applications" type="Application"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_cert_report_mgrs</Description>
      </Argument>
      <Argument multi="true" name="signers" type="Identity">
        <Description>rept_input_cert_report_signers</Description>
      </Argument>
      <Argument multi="true" name="groups" type="GroupDefinition">
        <Description>rept_input_cert_report_groups</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
      <Argument name="esigned" type="boolean"/>
      <Argument name="signedOff" type="boolean"/>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Details Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Role Details Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.RoleDetailsDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applications" property="profiles.application.id">
                  <QueryScript>
                    <Source>
                              import sailpoint.object.*;

                              if (value != null) {
                                queryOptions.addFilter(Filter.in("profiles.application.id", value));
                                queryOptions.setDistinct(true);
                              }

                              return queryOptions;
                            </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="type" property="type"/>
                <Parameter argument="owners" property="owner.id"/>
                <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                <Parameter argument="showIndirectApps" property="showIndirectApps" valueClass="boolean"/>
                <Parameter argument="showInheritedApps" property="showInheritedApps" valueClass="boolean"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Profiles Details Report Custom Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_role_details_col_role" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_role_details_col_owner" property="owner.name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_role_details_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_role_details_col_apps" property="profiles.application.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="inherited" header="rept_role_details_col_inherited" width="110"/>
              <ReportColumnConfig field="classification" header="rept_role_details_col_classifications" property="classifications.classification.displayableName" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="elevatedAccess" header="rept_role_details_col_elevated_access" property="iiqElevatedAccess" sortable="true" subQueryKey="id" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about each role in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument multi="true" name="type" type="string">
        <Description>rept_input_biz_role_report_type</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners" type="Identity">
        <Description>rept_input_biz_role_report_owners</Description>
      </Argument>
      <Argument name="disabled" type="string">
        <Description>rept_input_biz_role_report_status</Description>
      </Argument>
      <Argument name="showIndirectApps" type="boolean">
        <Description>rept_input_biz_role_report_indirect</Description>
      </Argument>
      <Argument name="showInheritedApps" type="boolean">
        <Description>rept_input_biz_role_report_inherited</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Roles by Application Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Roles by Application Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.ApplicationBundleDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applications" property="profiles.application.id"/>
                <Parameter argument="includeInherited" property="includeInherited" valueClass="boolean"/>
                <Parameter argument="showAllApps" property="showAllApps" valueClass="boolean"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Roles by Application Report Custom Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_role_details_col_role" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_role_details_col_owner" property="owner.name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_role_details_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="status" property="disabled" sortable="true" width="110"/>
              <ReportColumnConfig field="relation" header="rept_role_by_app_relation" width="110"/>
              <ReportColumnConfig field="classification" header="rept_role_details_col_classifications" width="110"/>
              <ReportColumnConfig field="elevatedAccess" header="rept_role_details_col_elevated_access" property="iiqElevatedAccess" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays all roles for the chosen application(s).</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="applications" type="Application">
        <Description>rept_input_biz_role_report_app</Description>
      </Argument>
      <Argument name="includeInherited" type="boolean">
        <Description>rept_role_by_app_input_inherit</Description>
      </Argument>
      <Argument name="showAllApps" type="boolean">
        <Description>rept_role_by_app_input_show_all_apps</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Roles by Entitlement Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Roles by Entitlement Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.RoleEntitlementsDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applications" property="profiles.application.id"/>
                <Parameter argument="profileType" property="profileType" valueClass="string"/>
                <Parameter argument="entitlementAttribute" property="profileEntAttribute"/>
                <Parameter argument="entitlementValue" property="profileEntValue"/>
                <Parameter argument="permissionTarget" property="profilePermTarget"/>
                <Parameter argument="permissionRight" property="profilePermRight"/>
                <Parameter argument="relationships" property="relationships"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Roles by Entitlement Report Custom Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_role_details_col_role" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_role_details_col_owner" property="owner.name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_role_details_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="status" property="disabled" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlementRelationships" header="rept_role_by_entitlement_relation" width="110"/>
              <ReportColumnConfig field="classification" header="rept_role_details_col_classifications" width="110"/>
              <ReportColumnConfig field="elevatedAccess" header="rept_role_details_col_elevated_access" property="iiqElevatedAccess" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays all roles for the chosen entitlement(s).</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessRoleEntitlementsReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument name="profileType" type="string">
        <Description>rept_role_by_entitlement_help_profile_type</Description>
      </Argument>
      <Argument multi="true" name="entitlementAttribute" type="string">
        <Description>rept_role_by_entitlement_help_entitlement_attribute</Description>
      </Argument>
      <Argument multi="true" name="entitlementValue" type="string">
        <Description>rept_role_by_entitlement_help_entitlement_value</Description>
      </Argument>
      <Argument multi="true" name="permissionTarget" type="string">
        <Description>rept_role_by_entitlement_help_permission_target</Description>
      </Argument>
      <Argument multi="true" name="permissionRight" type="string">
        <Description>rept_role_by_entitlement_help_permission_right</Description>
      </Argument>
      <Argument name="relationships" type="string">
        <Description>rept_role_by_entitlement_help_relationships</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Profiles Composition Report" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Role Composition Report">
            <DataSource objectType="Bundle" type="Hql">
              <Query>from Bundle bundle left outer join bundle.profiles as profile left outer join profile.application application</Query>
              <QueryParameters>
                <Parameter argument="applications" property="application.id"/>
                <Parameter argument="type" property="type"/>
                <Parameter argument="owners" property="owners"/>
                <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                <Parameter argument="filters" excludeHqlParameter="true" property="filters"/>
              </QueryParameters>
              <QueryScript>
                <Source>
                          
                              import sailpoint.reporting.ReportingLibrary;
                              String whereClause = "";

                              List clauseItems = new ArrayList();

                              String typeClause = ReportingLibrary.buildHqlFilter("type", "bundle.type", args);
                              if (typeClause != null)
                                clauseItems.add(typeClause);

                              String appClause = ReportingLibrary.buildHqlFilter("applications", "application.id", args);
                              if (appClause != null)
                                clauseItems.add(appClause);

                              String ownerClause = ReportingLibrary.buildHqlFilter("owners", "bundle.owner.id", args);
                              if (ownerClause != null)
                                clauseItems.add(ownerClause);

                              String disabledClause = ReportingLibrary.buildHqlFilter("disabled", "bundle.disabled", args);
                              if (disabledClause != null)
                                clauseItems.add(disabledClause);

                              String filterOption = args.containsKey("filters") ? args.get("filters") : "";
                              if (filterOption.equalsIgnoreCase("true")){
                                clauseItems.add(" profile is not null ");
                              } else if (filterOption.equalsIgnoreCase("false")){
                                clauseItems.add(" profile is null ");
                              }


                              if (!clauseItems.isEmpty()){
                                 for(String c : clauseItems){
                                    if (whereClause == ""){
                                      whereClause = " where ";
                                    } else {
                                      whereClause += " and ";
                                    }
                                    whereClause += c;
                                 }
                              }

                              return query + whereClause;
                          
                       </Source>
              </QueryScript>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Profiles Composition Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_role_profiles_comp_grid_col_role" property="bundle.name" sortable="true" width="110"/>
              <ReportColumnConfig field="profileDescription" header="rept_role_profiles_comp_grid_col_profile_description" property="profile" width="110">
                <RenderScript>
                  <Source>
                          
                              import sailpoint.tools.Message;
                               return value != null ? value.description : Message.localize("rept_role_comp_msg_no_profiles");
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="filters" header="rept_role_profiles_comp_grid_col_filters" property="profile" width="110">
                <RenderScript>
                  <Source>
                          
                              import sailpoint.object.*;
                              List filterStrings = new ArrayList();
                              if (value != null &amp;&amp; value.getConstraints()  != null){
                                  for(Filter filter : value.getConstraints() ){
                                    filterStrings.add(filter.toString());
                                  }
                                }
                              return filterStrings;
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_role_profiles_comp_grid_col_profile_app" property="application.name" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the composition of each role in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleCompositionReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument multi="true" name="type" type="string">
        <Description>rept_input_biz_role_report_type</Description>
      </Argument>
      <Argument multi="true" name="owners" type="Identity">
        <Description>rept_input_biz_role_report_owners</Description>
      </Argument>
      <Argument name="filters" type="string">
        <Description>rept_input_biz_role_report_composition_exceptions</Description>
      </Argument>
      <Argument name="disabled" type="string">
        <Description>rept_input_biz_role_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Members Report" progressMode="String" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Role Membership Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.RoleMembersDataSource" defaultSort="name" objectType="Bundle" type="Java">
              <QueryParameters>
                <Parameter argument="applications" property="profiles.application.id">
                  <QueryScript>
                    <Source>
                           
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getApplicationsSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                         </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="type" property="type"/>
                <Parameter argument="owners" property="owner.id"/>
                <Parameter argument="disabled" property="disabled" valueClass="boolean"/>
                <Parameter argument="roleName" operation="IN" property="name"/>
                <Parameter argument="entitlementAttribute" property="profileEntAttribute">
                  <QueryScript>
                    <Source>
                             
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getEntitlementAttributeSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                           </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="entitlementValue" property="profileEntValue">
                  <QueryScript>
                    <Source>
                               
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getEntitlementValueSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                             </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="permissionTarget" property="profilePermTarget">
                  <QueryScript>
                    <Source>
                             
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getPermissionTargetSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                           </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="permissionRight" property="profilePermRight">
                  <QueryScript>
                    <Source>
                              
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getPermissionRightSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                            </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="relationships" defaultValue="All" property="relationships">
                  <QueryScript>
                    <Source>
                             
                               import sailpoint.reporting.*;
                               import sailpoint.object.*;
                               Filter f = ReportingLibrary.getBundleProfileRelationSubQueryFilter(value);
                               if(f!=null) {
                                 queryOptions.addFilter(f);
                               }
                               return queryOptions;
                               
                            </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Members Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="rept_role_members_col_role_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_role_members_col_identity" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_role_members_col_firstname" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_role_members_col_lastname" width="110"/>
              <ReportColumnConfig field="type" header="rept_role_members_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_role_members_col_status" property="disabled" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the membership of each role in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessBusinessRoleMembershipReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument multi="true" name="type" type="string">
        <Description>rept_input_biz_role_report_type</Description>
      </Argument>
      <Argument name="showEmpty" type="string">
        <Description>rept_input_biz_role_report_member_exceptions</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="owners" type="Identity">
        <Description>rept_input_biz_role_report_owners</Description>
      </Argument>
      <Argument name="disabled" type="string">
        <Description>rept_input_biz_role_report_status</Description>
      </Argument>
      <Argument multi="true" name="roleName" type="string">
        <Description>rept_input_biz_role_report_role_name</Description>
      </Argument>
      <Argument multi="true" name="entitlementAttribute" type="string">
        <Description>rept_input_biz_role_report_entitlement_attribute</Description>
      </Argument>
      <Argument multi="true" name="entitlementValue" type="string">
        <Description>rept_input_biz_role_report_entitlement_value</Description>
      </Argument>
      <Argument multi="true" name="permissionTarget" type="string">
        <Description>rept_input_biz_role_report_permission_target</Description>
      </Argument>
      <Argument multi="true" name="permissionRight" type="string">
        <Description>rept_input_biz_role_report_permission_right</Description>
      </Argument>
      <Argument name="relationships" type="string">
        <Description>rept_input_biz_role_report_relationships</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Work Item Archive Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Work Item Archive Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.WorkItemArchiveDataSource" defaultSort="name" type="Java">
              <QueryParameters>
                <Parameter argument="levels" property="level"/>
                <Parameter argument="types" property="type"/>
                <Parameter argument="states" property="state"/>
                <Parameter argument="remindersMin" operation="GE" property="reminders"/>
                <Parameter argument="remindersMax" operation="LE" property="reminders"/>
                <Parameter argument="owners">
                  <QueryScript>
                    <Source>
                                    
                                    import sailpoint.object.*;
                                    import sailpoint.api.*;
                                    if (value != null &amp;&amp; !value.isEmpty()){
                                      if (arguments.get("isArchive") == true){
                                        List names = ObjectUtil.convertIdsToNames(context, Identity.class, value);
                                        queryOptions.addFilter(Filter.in("ownerName", names));
                                      } else {
                                        queryOptions.addFilter(Filter.in("owner.id", value));
                                      }
                                    }

                                    return queryOptions;
                                    
                                  </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="requesters">
                  <QueryScript>
                    <Source>
                                    
                                    import sailpoint.object.*;
                                    import sailpoint.api.*;
                                    if (value != null &amp;&amp; !value.isEmpty()){
                                      if (arguments.get("isArchive") == true){
                                        List names = ObjectUtil.convertIdsToNames(context, Identity.class, value);
                                        queryOptions.addFilter(Filter.in("requester", names));
                                      } else {
                                        queryOptions.addFilter(Filter.in("requester.id", value));
                                      }
                                    }

                                    return queryOptions;
                                    
                                  </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Work Item Archive Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="rept_workitems_col_id" property="name" width="110"/>
              <ReportColumnConfig field="description" header="rept_workitems_col_name" property="description" width="110"/>
              <ReportColumnConfig field="owner" header="rept_workitems_col_owner" property="owner" sortable="true" width="110"/>
              <ReportColumnConfig field="requester" header="rept_workitems_col_requester" property="requester" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_workitems_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="level" header="rept_workitems_col_level" property="level" sortable="true" width="110"/>
              <ReportColumnConfig field="expiration" header="rept_workitems_col_expiration" property="expiration" width="110"/>
              <ReportColumnConfig field="state" header="rept_workitems_col_state" property="state" sortable="true" width="110"/>
              <ReportColumnConfig field="reminders" header="rept_workitems_col_reminders" property="reminders" sortable="true" width="110"/>
              <ReportColumnConfig field="escalationCount" header="rept_workitems_col_escalations" property="escalationCount" sortable="true" width="110"/>
              <ReportColumnConfig field="archiveStatus" header="rept_workitems_col_status" sortable="true" width="110"/>
              <ReportColumnConfig field="accessRecommendationDecision" header="rept_col_access_request_recommendation" property="attributes" width="110"/>
              <ReportColumnConfig field="accessRecommendationReasons" header="rept_col_access_request_recommendation_reasons" property="attributes" width="110"/>
              <ReportColumnConfig field="accessRecommendationTimestamp" header="rept_col_access_request_recommendation_timestamp" property="attributes" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all active work items.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessWorkItemReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="owners" type="string">
        <Description>rept_input_work_item_report_owners</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_work_item_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="states" type="string">
        <Description>rept_input_work_item_report_states</Description>
      </Argument>
      <Argument multi="true" name="requesters" type="Identity">
        <Description>rept_input_work_item_report_requesters</Description>
      </Argument>
      <Argument multi="true" name="types" type="string">
        <Description>rept_input_work_item_report_types</Description>
      </Argument>
      <Argument name="remindersMin" type="int">
        <Description>rept_input_work_item_report_reminders</Description>
      </Argument>
      <Argument name="remindersMax" type="int"/>
      <Argument name="levels" type="String">
        <Description>rept_input_work_item_report_priority</Description>
      </Argument>
      <Argument name="statusOptions" type="String">
        <Description>rept_input_work_item_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Mitigation Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Mitigation Report">
            <DataSource objectType="MitigationExpiration" type="Filter">
              <QueryParameters>
                <Parameter operation="NOTNULL" property="identity"/>
                <Parameter argument="identities" property="identity.id"/>
                <Parameter argument="managers" property="mitigator.id"/>
                <Parameter argument="expirationDate" operation="LT" property="expiration"/>
                <Parameter argument="roles" property="roleName">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Bundle.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Mitigation Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_mitigations_grid_col_identity" property="identity.name" sortable="true" width="110"/>
              <ReportColumnConfig field="mitigator" header="rept_mitigations_grid_col_mitigator" property="mitigator.name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_mitigations_grid_col_type" property="certifiableDescriptor" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                    import sailpoint.object.*;
                                    import sailpoint.tools.Message;
                                    if (value != null){
                                        if (value.getBusinessRole() != null)
                                          return Message.localize("rept_mitigations_type_role");
                                        else if (value.getExceptionEntitlements() != null)
                                          return Message.localize("rept_mitigations_type_entitlement");
                                        else if (value.getPolicyViolation() != null)
                                          return Message.localize("rept_mitigations_type_violation");
                                    }
                                    return "";
                                  </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="item" header="rept_mitigations_grid_col_item" property="certifiableDescriptor" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                    import sailpoint.object.*;
                                    import sailpoint.tools.Message;
                                    import sailpoint.api.EntitlementDescriber;
                                    if (value != null){
                                        if (value.getBusinessRole() != null){
                                          return value.getBusinessRole();
                                        } else if (value.getExceptionEntitlements() != null) {
                                          return EntitlementDescriber.summarize(value.getExceptionEntitlements());
                                        } else if (value.getPolicyViolation() != null) {
                                          return value.getPolicyViolation().getConstraintName();
                                        }
                                    }
                                    return "";
                         </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig dateFormat="short" field="expiration" header="rept_mitigations_grid_col_expiration" property="expiration" sortable="true" timeFormat="long" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all current mitigations in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessMitigationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identities" type="Identity">
        <Description>rept_input_mitigation_report_identities</Description>
      </Argument>
      <Argument filterString="capabilitiesString != &quot;null&quot;" multi="true" name="managers" type="Identity">
        <Description>rept_input_mitigation_report_mgrs</Description>
      </Argument>
      <Argument multi="true" name="roles" type="Bundle">
        <Description>rept_input_mitigation_report_biz_roles</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_mitigation_report_exp_dt</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Policy Violation Report" progressMode="Percentage" resultAction="Rename" subType="Policy Enforcement Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Policy Violation Report">
            <Chart category="status" groupBy="status,policyName" series="policyName" title="rept_violations_chart_title" type="column" value="count(*)"/>
            <DataSource objectType="PolicyViolation" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="identity.id"/>
                <Parameter argument="status" property="active">
                  <ValueScript>
                    <Source>
                                            if ("active".equals(value)){
                                              return true;
                                            }
                                            else if("completed".equals(value)) {
                                              return false;
                                            }

                                          return null;
                                        </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="policies" property="policyId"/>
                <Parameter argument="violationDate" operation="LT" property="created"/>
                <Parameter argument="actualStatus" property="status"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Policy Violation Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="firstname" header="rept_viol_grid_col_first_name" property="identity.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_viol_grid_col_last_name" property="identity.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="name" header="rept_viol_grid_col_identity" property="identity.name" sortable="true" width="110"/>
              <ReportColumnConfig field="policy" header="rept_viol_grid_col_policy" property="policyName" sortable="true" width="110"/>
              <ReportColumnConfig field="violationOwner" header="rept_viol_grid_col_violation_owner" property="owner" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                        import sailpoint.object.*;
                                        if (value != null){
                                        return value.getDisplayableName();
                                        }
                                        return "";
                                    </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="rule" header="rept_viol_grid_col_rule" property="constraintName" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_viol_grid_col_status" property="status" scriptArguments="identity,policyName,constraintName,created" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                    
                                        import sailpoint.object.*;
                                        import sailpoint.api.*;
                                        import sailpoint.tools.*;
                                        import sailpoint.web.messages.MessageKeys;
                                        import java.text.DateFormat;
                                        
                                        String identityId = scriptArgs.get("identity").id;
                                        QueryOptions ops = new QueryOptions();
                                        IdentityHistoryItem lastDecision;
                                        Message out = null;
                                        
                                        ops.addFilter(Filter.eq("identity.id", identityId));
                                        ops.addFilter(Filter.eq("type", IdentityHistoryItem.Type.Decision));
                                        if (scriptArgs.get("policyName") != null)
                                            ops.addFilter(Filter.eq("policy", scriptArgs.get("policyName")));
                                        if (scriptArgs.get("constraintName") != null)
                                            ops.addFilter(Filter.eq("constraintName", scriptArgs.get("constraintName")));
                                            
                                        ops.setOrderBy("created");
                                        ops.setOrderAscending(false);
                                        ops.setResultLimit(1);
                                        List items = context.getObjects(IdentityHistoryItem.class, ops);
                                        if (items != null &amp;&amp; !items.isEmpty()){
                                            lastDecision = (IdentityHistoryItem)items.get(0);
                                        }
                                        if (lastDecision != null &amp;&amp; lastDecision.getAction() != null){
                                            // if the decision was made after the last policy scan then display it. We don't want to
                                            // display old decisions, just those made for the current violation. If no decisions have been made on
                                            // the violation, display any mitigation if it is still active.
                                            if (lastDecision.getAction().getCreated().compareTo(scriptArgs.get("created")) &gt; 0 ||
                                                    lastDecision.getAction().isMitigation()){
                                
                                                if (lastDecision.getAction().isMitigation()){
                                                    LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getMitigationExpiration(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_ALLOWED, ldate);
                                                } else if (lastDecision.getAction().isRemediation()){
                                                    LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getCreated(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_REMEDIATED, ldate);
                                                } else if (lastDecision.getAction().isAcknowledgment()){
                                                     LocalizedDate[] ldate = {new LocalizedDate(lastDecision.getAction().getCreated(), DateFormat.SHORT, null)};
                                                    out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_ACKNOWLEDGED, ldate);       
                                                }
                              
                                            }
                                        }
                                         
                                        if (out==null) {
                                        out = Message.localize(MessageKeys.REPT_VIOL_GRID_STATUS_OPEN);
                                        }
                                        return out.getLocalizedMessage(locale, timezone);
                                        

                                    </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="summary" header="rept_viol_grid_col_summary" property="description" scriptArguments="rightBundles,leftBundles,policyId,policyName,constraintId,constraintName" sortable="true" width="110">
                <RenderScript>
                  <Source>
                                    
                                        import sailpoint.object.*;
                                        import sailpoint.tools.*;
                                        import java.util.*;
                                        import sailpoint.web.messages.MessageKeys;

                                        String summary = value;
                                        BaseConstraint found = null;
                                        if(summary == null) {
                                            if (( scriptArgs.get("leftBundles") != null ) &amp;&amp; ( scriptArgs.get("rightBundles") != null)) {
                                                List leftBundles = Util.csvToList((String)scriptArgs.get("leftBundles"));
                                                List rightBundles = Util.csvToList((String)scriptArgs.get("rightBundles"));
        
                                                List[] bund = new List [] {leftBundles, rightBundles};
                                                
                                                Message msg = Message.localize( MessageKeys.POLICY_VIOLATION_SOD_SUMMARY, bund);
        
                                                summary = msg.getLocalizedMessage(locale, timezone);
                                            }
                                            else {
                                            Policy p = null;
                                            if (scriptArgs.get("policyId") != null)
                                                p = context.getObjectById(Policy.class, scriptArgs.get("policyId"));
                                            else if (scriptArgs.get("policyName") != null)
                                                p = context.getObjectByName(Policy.class, scriptArgs.get("policyName"));
                                            
         
                                            found = p.getConstraint(scriptArgs.get("constraintId"), scriptArgs.get("constraintName"));
                                            
                                            if(found != null) {
                                            
                                            summary = found.getDescription();
                                            
                                            }
                                            
                                            }
        
                                        }
                                        
                                        return summary;
                                        
                                    </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <ReportSummary title="rept_violations_summary_title">
              <DataSourceScript>
                <Source>
                              
                              import java.util.*;
                              import sailpoint.object.*;

                              QueryOptions ops = baseQueryOptions;

                              List fields = new ArrayList();
                              fields.add("count(*)");
                              fields.add("count(distinct identity.id)");

                              Iterator iter = context.search(PolicyViolation.class, ops, fields);

                              Map map = new HashMap();

                              if (iter.hasNext()){
                                Object[] results = iter.next();
                                map.put("total", results[0]);
                                map.put("identities", results[1]);
                              }

                              QueryOptions mitigations = new QueryOptions(baseQueryOptions);
                              mitigations.addFilter(Filter.eq("status", PolicyViolation.Status.Mitigated));
                              map.put("mitigations", context.countObjects(PolicyViolation.class, mitigations));

                              QueryOptions open = new QueryOptions(baseQueryOptions);
                              open.addFilter(Filter.eq("status", PolicyViolation.Status.Open));
                              map.put("open", context.countObjects(PolicyViolation.class, open));

                              return map;
                              
                            </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="rept_violations_summary_total" name="total"/>
                <LiveReportSummaryValue label="rept_violations_summary_identities" name="identities"/>
                <LiveReportSummaryValue label="rept_violations_summary_open" name="open"/>
                <LiveReportSummaryValue label="rept_violations_summary_mitigations" name="mitigations"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all current policy violations in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessViolationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="status" type="string">
        <Description>rept_input_violation_report_status</Description>
      </Argument>
      <Argument name="actualStatus" type="string">
        <Description>rept_input_violation_report_status</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity">
        <Description>rept_input_violation_report_identities</Description>
      </Argument>
      <Argument multi="true" name="businessRoles" type="Bundle">
        <Description>rept_input_violation_report_biz_roles</Description>
      </Argument>
      <Argument filterString="template == false" multi="true" name="policies" type="Policy">
        <Description>rept_input_violation_report_policies</Description>
      </Argument>
      <Argument multi="true" name="rules" type="SODConstraint">
        <Description>rept_input_violation_report_rules</Description>
      </Argument>
      <Argument name="violationDate" type="date">
        <Description>rept_input_violation_report_violation_date</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.CertificationDetailReport" formPath="/analyze/reports/certificationReportArgs.xhtml" name="Access Review Decision Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="Report">
  <Attributes>
    <Map>
      <entry key="handlerPageSize" value="25"/>
      <entry key="jasperTemplate" value="CertificationDetailReport"/>
    </Map>
  </Attributes>
  <Description>
            Displays information on current certifications in the systems and the decisions made by system users in detailed format.
        </Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessCertificationDecisionReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_cert_report_apps</Description>
      </Argument>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_cert_report_mgrs</Description>
      </Argument>
      <Argument multi="true" name="creationDateStartUse" type="boolean">
        <Description>rept_input_cert_report_create_dt_start_use</Description>
      </Argument>
      <Argument name="creationDateStart" type="date">
        <Description>rept_input_cert_report_create_dt_start</Description>
      </Argument>
      <Argument multi="true" name="creationDateEndUse" type="boolean">
        <Description>rept_input_cert_report_create_dt_end_use</Description>
      </Argument>
      <Argument name="creationDateEnd" type="date">
        <Description>rept_input_cert_report_create_dt_end</Description>
      </Argument>
      <Argument multi="true" name="signedDateStartUse" type="boolean">
        <Description>rept_input_cert_report_signed_date_start_use</Description>
      </Argument>
      <Argument name="signedDateStart" type="date">
        <Description>rept_input_cert_report_signed_date_start</Description>
      </Argument>
      <Argument multi="true" name="signedDateEndUse" type="boolean">
        <Description>rept_input_cert_report_signed_date_end_use</Description>
      </Argument>
      <Argument name="signedDateEnd" type="date">
        <Description>rept_input_cert_report_signed_date_end</Description>
      </Argument>
      <Argument multi="true" name="expirationDateStartUse" type="boolean">
        <Description>rept_input_cert_report_exp_dt_start_use</Description>
      </Argument>
      <Argument name="expirationDateStart" type="date">
        <Description>rept_input_cert_report_exp_dt_start</Description>
      </Argument>
      <Argument multi="true" name="expirationDateEndUse" type="boolean">
        <Description>rept_input_cert_report_exp_dt_end_use</Description>
      </Argument>
      <Argument name="expirationDateEnd" type="date">
        <Description>rept_input_cert_report_exp_dt_end</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
      <Argument name="resultScope" type="Scope">
        <Description>rept_input_result_scope</Description>
      </Argument>
      <Argument multi="true" name="emailIdentities" type="Identity">
        <Description>rept_input_email_recips</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
      <Argument name="dontEmailEmptyReport" type="boolean">
        <Description>label_dont_email_empty_reports</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Application Owner Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <Chart category="type" groupBy="action.status,type" nullSeries="cert_action_open" series="action.status" title="rept_cert_chart_title" type="column" value="count(*)"/>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="ApplicationOwner" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications" property="parent.certification.applicationId"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Application Owner Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlements" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                           return value != null ? value.getComments() : null;
                         </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                              return value.getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionGenerated(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionAccepted(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;
                          import sailpoint.service.classification.ClassificationService;
                          import sailpoint.tools.Util;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                          return Util.listToCsv(names);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          return item.isIiqElevatedAccess();
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
            <ReportSummary title="rept_cert_summary_title">
              <DataSourceScript>
                <Source>
                        
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        
                      </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="reprt_cert_summary_total_certs" name="certifications"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_access_reviews" name="accessReviews"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_identities" name="identities"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_items" name="items"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all application owner certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationOwnerCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_cert_report_apps_owner</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Manager Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <Chart category="type" groupBy="action.status,type" nullSeries="cert_action_open" series="action.status" title="rept_cert_chart_title" type="column" value="count(*)"/>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="Manager" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="managers" property="parent.certification.manager">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Manager Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent.certification.manager" sortable="true" width="110"/>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null) {
                            if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                              return value.getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionGenerated(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionAccepted(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;
                          import sailpoint.service.classification.ClassificationService;
                          import sailpoint.tools.Util;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                          return Util.listToCsv(names);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          return item.isIiqElevatedAccess();
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
            <ReportSummary title="rept_cert_summary_title">
              <DataSourceScript>
                <Source>
                        
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        
                      </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="reprt_cert_summary_total_certs" name="certifications"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_access_reviews" name="accessReviews"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_identities" name="identities"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_items" name="items"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all manager certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_cert_report_mgrs</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Advanced Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="Group" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="groups" property="parent.certification.groupDefinitionId"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Advanced Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlements" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                &amp;&amp; archivedEntities.size() &gt; 0
                                &amp;&amp; archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionGenerated(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionAccepted(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;
                          import sailpoint.service.classification.ClassificationService;
                          import sailpoint.tools.Util;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                          return Util.listToCsv(names);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          return item.isIiqElevatedAccess();
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all advanced certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAdvancedCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="groups" type="GroupDefinition">
        <Description>rept_input_cert_report_groups</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Revocation Live Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Revocation Report">
            <DataSource objectType="CertificationItem" type="Filter">
              <QueryParameters>
                <Parameter argument="remediationKickedOff" defaultValue="true" property="action.remediationKickedOff" valueClass="boolean"/>
                <Parameter argument="type" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            import java.util.*;

                            if (value != null){
                              List appNames = ObjectUtil.convertIdsToNames(context, Application.class, value);
                              if (appNames != null &amp;&amp; !appNames.isEmpty()){
                                List filters = new ArrayList();
                                for(String appName : appNames){
                                  List appList = new ArrayList();
                                  appList.add(appName);
                                  filters.add(Filter.containsAll("applicationNames", appList));
                                }
                                queryOptions.addFilter(Filter.or(filters));
                              }
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groups">
                  <QueryScript>
                    <Source>
                            import sailpoint.reporting.*;
                            import sailpoint.object.*;

                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, true);
                            if(f!=null) {
                              queryOptions.addFilter(Filter.join("parent.identity", "Identity.name"));
                              queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="creationStartDate" operation="GT" property="parent.certification.created"/>
                <Parameter argument="creationEndDate" operation="LT" property="parent.certification.created"/>
                <Parameter argument="signedStartDate" operation="GT" property="parent.certification.signed"/>
                <Parameter argument="signedEndDate" operation="LT" property="parent.certification.signed"/>
                <Parameter argument="expirationStartDate" operation="GT" property="parent.certification.expiration"/>
                <Parameter argument="expirationEndDate" operation="LT" property="parent.certification.expiration"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Revocation Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="status" header="rept_remediation_progress_grid_col_status" property="action.remediationCompleted" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.tools.Message;
                          import sailpoint.web.messages.MessageKeys;
                          return value == true ? Message.localize(MessageKeys.WORK_ITEM_STATE_FINISHED) : Message.localize(MessageKeys.WORK_ITEM_STATE_OPEN);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recipient" header="rept_remediation_progress_grid_col_recipient" property="action.ownerName" sortable="true" width="110"/>
              <ReportColumnConfig field="requestor" header="rept_remediation_progress_grid_col_requester" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_remediation_progress_grid_col_type" property="action" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                          import sailpoint.object.*;
                          Object returnValue = null;
                          if(value != null &amp;&amp; value.getRemediationAction() != null) {
                            if (value.getRemediationAction().equals(CertificationAction.RemediationAction.SendProvisionRequest)) {
                              ProvisioningPlan plan = value.getRemediationDetails();
                              if(plan != null &amp;&amp; plan.getAccountRequests() !=null) {
                                    if(!plan.getAccountRequests().isEmpty()) {
                                        returnValue = plan.getAccountRequests().get(0).getTargetIntegration();
                                    }
                              }
                              else 
                                 returnValue = null;
                            }

                            if (null == returnValue)
                              returnValue = value.getRemediationAction();

                            return returnValue;
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="requestId" header="rept_remediation_progress_grid_col_requestID" property="action" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                            import sailpoint.object.*;
                             if(value!=null) {
                                ProvisioningPlan plan = value.getRemediationDetails();
                                if(plan!=null &amp;&amp; plan.getAccountRequests()!=null &amp;&amp; !plan.getAccountRequests().isEmpty())
                                  return plan.getAccountRequests().get(0).getRequestID();
                             }

                            return null;
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="expiration" header="rept_remediation_progress_grid_col_expiration" property="parent.certification.expiration" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_remediation_progress_grid_col_identity" property="parent.identity" scriptArguments="type,targetName" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          CertificationItem.Type type = scriptArgs.get("type");
                          if(type.equals(CertificationItem.Type.AccountGroupMembership) || type.equals(CertificationItem.Type.DataOwner)) {
                              return scriptArgs.get("targetName");
                          } else {
                              return value;
                          }
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="account" header="rept_remediation_progress_grid_col_account" property="exceptionEntitlements.displayName" scriptArguments="policyViolation" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                            import sailpoint.object.*;
                            import sailpoint.policy.*;
                            import sailpoint.tools.*;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null) {
                                if(violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS)!=null) {
                                    return Util.listToCsv((List)violation.getArgument(AccountPolicyExecutor.VIOLATION_ACCOUNTS));
                                }
                            }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_remediation_progress_grid_col_application" property="exceptionEntitlements.application" scriptArguments="policyViolation" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                            import sailpoint.object.*;
                            import sailpoint.tools.Util;
                            if(value!=null)
                                return value;

                            PolicyViolation violation = scriptArgs.get("policyViolation");
                            if(violation != null &amp;&amp; violation.getRelevantApps() != null) {
                                return Util.listToCsv(violation.getRelevantApps());
                            }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="instance" header="rept_certification_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_remediation_progress_grid_col_entitlement" property="exceptionEntitlements" scriptArguments="bundle,violationSummary,targetName" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, null, scriptArgs.get("violationSummary"), scriptArgs.get("targetName"));
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="newValue" header="rept_remediation_progress_grid_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="accessReviewName" header="rept_remediation_progress_grid_col_accessReview" property="parent.certification.name" width="110"/>
              <ReportColumnConfig field="requestComments" header="rept_remediation_progress_detail_requester_comments" property="action.comments" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_remediation_progress_detail_completion_comments" property="action.completionComments" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all revocations in the system and how they have been handled in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessRemediationProgressReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="tags" type="Tag"/>
      <Argument multi="true" name="groups" type="GroupDefinition">
        <Description>rept_input_cert_report_groups</Description>
      </Argument>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_remed_progr_report_apps</Description>
      </Argument>
      <Argument name="creationStartDate" type="date">
        <Description>rept_input_remed_progr_report_create_dt_start</Description>
      </Argument>
      <Argument name="creationEndDate" type="date">
        <Description>rept_input_remed_progr_report_create_dt_end</Description>
      </Argument>
      <Argument name="signedStartDate" type="date">
        <Description>rept_input_remed_progr_report_signed_date_start</Description>
      </Argument>
      <Argument name="signedEndDate" type="date">
        <Description>rept_input_remed_progr_report_signed_date_end</Description>
      </Argument>
      <Argument name="expirationStartDate" type="date">
        <Description>rept_input_remed_progr_report_exp_dt_start</Description>
      </Argument>
      <Argument name="expirationEndDate" type="date">
        <Description>rept_input_remed_progr_report_exp_dt_end</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Certification Activity by Application Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <Chart category="type" groupBy="action.status,type" nullSeries="cert_action_open" series="action.status" title="rept_cert_chart_title" type="column" value="count(*)"/>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="phase" defaultValue="Staged" operation="NE" property="parent.certification.phase" valueClass="sailpoint.object.Certification$Phase"/>
                <Parameter argument="type">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            queryOptions.addFilter(Filter.ne("parent.certification.type", Certification.Type.BusinessRoleComposition));
                            queryOptions.addFilter(Filter.ne("parent.certification.type", Certification.Type.AccountGroupPermissions));
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applicationNames" property="applicationNames">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            List appNames = new ArrayList();
                            if (value != null){
                              appNames = ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }

                            if (appNames.size() != 0){
                              queryOptions.addFilter(Filter.containsAll("applicationNames", appNames));
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Certification Activity by Application Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_identity" property="parent.identity" scriptArguments="parent.certification.type,targetName" width="110">
                <RenderScript>
                  <Source>
                            
                                import sailpoint.object.*;
                                if (value == null || Certification.Type.DataOwner.equals(scriptArgs.get("parent.certification.type"))){
                                  return scriptArgs.get("targetName");
                                }

                                return value;
                            
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="signer" header="rept_cert_signoff_signer" property="parent.certification.signOffHistory.signerName" sortable="true" width="110"/>
              <ReportColumnConfig field="signed" header="rept_cert_signoff_signoff_date" property="parent.certification.signOffHistory.date" sortable="true" width="110"/>
              <ReportColumnConfig field="esigned" header="rept_cert_signoff_esig" property="parent.certification.signOffHistory.electronicSign" sortable="true" width="110"/>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="entitlementType" header="rept_cert_col_entitlement_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_cert_col_entitlement_desc" property="exceptionEntitlements" scriptArguments="bundle,violationSummary,targetName" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), scriptArgs.get("targetName"));
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_certification_form_application" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                &amp;&amp; archivedEntities.size() &gt; 0
                                &amp;&amp; archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionGenerated(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionAccepted(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;
                          import sailpoint.service.classification.ClassificationService;
                          import sailpoint.tools.Util;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                          return Util.listToCsv(names);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.isIiqElevatedAccess(context, scriptArgs.get("id"));
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
            <ReportSummary title="rept_cert_summary_title">
              <DataSourceScript>
                <Source>
                        
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("identities", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        
                      </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="reprt_cert_summary_total_certs" name="certifications"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_access_reviews" name="accessReviews"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_identities" name="identities"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_items" name="items"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the activity on the certifications in the system in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationCentricCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applicationNames" type="Application">
        <Description>rept_input_app_centric_cert_report_app</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Membership Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="BusinessRoleMembership" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="identities" property="parent.identity">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Identity.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="roles" property="bundle">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Bundle.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Membership Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.*;
                          return value != null ? ReportingLibrary.getCertificationItemManagerName(context, value) : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="role" header="rept_cert_col_role_name" property="bundle" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" width="110"/>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionGenerated(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          return ReportingLibrary.getAutoDecisionAccepted(context, value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;
                          import sailpoint.service.classification.ClassificationService;
                          import sailpoint.tools.Util;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                          return Util.listToCsv(names);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.CertificationItem;

                          CertificationItem item = context.getObjectById(CertificationItem.class, value);
                          return item.isIiqElevatedAccess();
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all role membership certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="roles" type="Bundle">
        <Description>rept_input_biz_role_cert_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity"/>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Composition Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="BusinessRoleComposition" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="roles" property="parent.targetId"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Composition Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_comp_cert_col_role" property="parent.targetName" sortable="true" width="110"/>
              <ReportColumnConfig field="objectType" header="rept_comp_cert_col_obj_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="objectName" header="rept_comp_cert_col_obj_name" property="targetName" sortable="true" width="110"/>
              <ReportColumnConfig field="description" header="rept_comp_cert_col_revoke_desc" property="targetId" scriptArguments="type,targetName" sortable="true" width="110">
                <RenderScript>
                  <Source>
                        
                          return sailpoint.reporting.ReportingLibrary.describeCompositionItem(context, locale, scriptArgs.get("type"), value, scriptArgs.get("targetName"));
                        
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="status" header="rept_comp_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_comp_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_comp_cert_col_decider" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_comp_cert_col_decider_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                          return value != null ? value.getComments() : null;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent.certification" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            List archivedEntities = value.fetchArchivedEntities(context);
                            if (archivedEntities != null
                                &amp;&amp; archivedEntities.size() &gt; 0
                                &amp;&amp; archivedEntities.get(0) != null) {
                              return archivedEntities.get(0).getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about all role composition certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessManagerCertificationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="roles" type="Bundle">
        <Description>rept_input_biz_role_cert_report_biz_roles</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Group Membership Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="AccountGroupMembership" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                          
                          import sailpoint.object.*;
                          import java.util.*;

                          if (value != null &amp;&amp; !value.isEmpty()){
                            queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                          }

                          return queryOptions;
                          
                        </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications" property="parent.certification.applicationId"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Account Group Membership Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_identity" property="targetName" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="parent.application" sortable="true" width="110"/>
              <ReportColumnConfig field="accountGroup" header="rept_cert_col_account_group" property="parent.accountGroup" sortable="true" width="110"/>
              <ReportColumnConfig field="accountGroupType" header="rept_cert_col_type" property="parent.schemaObjectType" sortable="true" width="110"/>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.datasource.*;
                        return DataSourceUtil.getRemediationModifiableNewValue(value);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        import sailpoint.tools.Util;
                        import java.lang.String;
                        String status = ReportingLibrary.getRemediationStatus(context, value);
                        return Util.isNullOrEmpty(status) ? "" : status;
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                              return value != null ? value.getComments() : null;
                          </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" width="110">
                <RenderScript>
                  <Source>
                        
                        if (value != null){
                          if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                            return value.getExplanation();
                          }
                        }
                        
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the account group membership certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_account_grp_cert_report_apps</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Group Permissions Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="AccountGroupPermissions" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications" property="parent.certification.applicationId"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Account Group Permissions Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="accountGroup" header="rept_cert_col_account_group" property="parent.accountGroup" sortable="true" width="110"/>
              <ReportColumnConfig field="schemaObjectType" header="rept_cert_col_type" property="parent.schemaObjectType" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="parent.application" sortable="true" width="110"/>
              <ReportColumnConfig field="permission" header="rept_cert_col_account_group_permission" property="exceptionEntitlements" sortExpression="exceptionApplication,exceptionPermissionTarget,exceptionPermissionRight" sortable="true" width="110">
                <RenderScript>
                  <Source>
                            if(value instanceof sailpoint.object.EntitlementSnapshot){
                                return sailpoint.api.EntitlementDescriber.summarize(value);
                            }
                            return "";
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.datasource.*;
                          return DataSourceUtil.getRemediationModifiableNewValue(value);
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                               return value != null ? value.getComments() : null;
                            </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                              return value.getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the account group permission certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument multi="true" name="applications" type="string">
        <Description>rept_input_account_grp_cert_report_apps</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Group Members Report" progressMode="Percentage" resultAction="Rename" subType="Account Group Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Account Group Membership Report">
            <DataSource defaultSort="application.name,value,identity.name" objectType="IdentityEntitlement" type="Filter">
              <Join joinProperty="ManagedAttribute.value" property="value"/>
              <Join joinProperty="ManagedAttribute.application" property="application"/>
              <Join joinProperty="ManagedAttribute.attribute" property="name"/>
              <QueryParameters>
                <Parameter argument="application" property="application.id"/>
                <Parameter defaultValue="true" property="ManagedAttribute.aggregated" valueClass="boolean"/>
                <Parameter defaultValue="Connected" property="aggregationState" valueClass="sailpoint.object.IdentityEntitlement$AggregationState"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="accountGroupName" header="rept_account_group_membership_col_account_group" property="value" sortable="true" width="110"/>
              <ReportColumnConfig field="accountGroupDisplayName" header="rept_account_group_membership_col_account_group_display" property="value" scriptArguments="application.id,name" width="110">
                <RenderScript>
                  <Source>
                            return sailpoint.api.Explanator.getDisplayValue(scriptArgs.get("application.id"), scriptArgs.get("name"), value);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="accountGroupType" header="rept_cert_col_type" property="ManagedAttribute.type" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_account_group_membership_col_app" property="application.name" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_account_group_membership_col_identity" property="identity.displayName" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays Account Group members</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAccountGroupMembershipReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="application" type="Application">
        <Description>rept_app_account_grp_memb_input_application_desc</Description>
        <Prompt>rept_app_account_grp_memb_input_application</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Group Membership Totals Report" progressMode="Percentage" resultAction="Rename" subType="Account Group Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Account Group Membership Totals Report">
            <DataSource objectType="ManagedAttribute" type="Hql">
              <Query>from ManagedAttribute m where aggregated=true</Query>
              <QueryParameters>
                <Parameter argument="application" property="application"/>
              </QueryParameters>
              <QueryScript>
                <Source>
                        
                          import java.util.*;

                          List applications = args.get("application");
                          if (applications != null &amp;&amp; !applications.isEmpty()){
                            query = query + " and application.id in(:application) ";
                          }

                          //We wont have membership on indirect groups
                          query = query + " and attribute is not null ";

                          return query;
                        
                      </Source>
              </QueryScript>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="accountGroupName" header="rept_app_account_grp_memb_col_name" property="value" sortable="true" width="110"/>
              <ReportColumnConfig field="accountGroupDisplayName" header="rept_app_account_grp_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="schemaObjectType" header="rept_cert_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_app_account_grp_memb_app" property="application.name" sortable="true" width="110"/>
              <ReportColumnConfig field="total" header="rept_app_account_grp_memb_col_members" property="(select count(*) from IdentityEntitlement ie where ie.value = m.value and ie.application = m.application and ie.name = m.attribute and ie.aggregationState = 'Connected')" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays Account Group membership information</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAccountGroupMembershipReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="application" type="Application">
        <Description>rept_app_account_grp_memb_input_application_desc</Description>
        <Prompt>rept_app_account_grp_memb_input_application</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="User Account Attributes Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="User Account Attributes Report">
            <DataSource objectType="sailpoint.object.Link" type="Filter">
              <QueryParameters>
                <Parameter argument="application" property="application.id"/>
                <Parameter argument="inactive" property="identity.inactive" valueClass="boolean"/>
              </QueryParameters>
            </DataSource>
            <ExtendedColumnScript>
              <Source>
                      
                        import java.util.*;
                        import sailpoint.reporting.*;
                        import sailpoint.object.*;

                        List newCols = new ArrayList();
                        Map formValues = form.getFieldValues();
                        if (formValues != null &amp;&amp; formValues.containsKey("application") &amp;&amp; formValues.get("application") != null){
                          newCols = ReportingLibrary.createApplicationAttributeColumns(context, formValues.get("application"));
                        }

                        return newCols;
                      
                    </Source>
            </ExtendedColumnScript>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Application Account Attributes Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_app_account_attrs_col_account" property="nativeIdentity" skipLocalization="true" sortable="true" width="110"/>
              <ReportColumnConfig field="identityFirstname" header="first_name" property="identity.firstname" skipLocalization="true" sortable="true" width="110"/>
              <ReportColumnConfig field="identityLastname" header="last_name" property="identity.lastname" skipLocalization="true" sortable="true" width="110"/>
              <ReportColumnConfig field="identityEmail" header="email" property="identity.email" sortable="true" width="110"/>
              <ReportColumnConfig field="identityManager" header="manager" property="identity.manager.name" skipLocalization="true" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays all attributes for a given account on each application</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationAccountAttributesReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="application" required="true" type="Application">
        <Description>rept_account_attributes_app_desc</Description>
      </Argument>
      <Argument name="inactive" type="string">
        <Description>rept_input_user_report_inactive</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Privileged Access Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Privileged Access Report">
            <DataSource objectType="Link" type="Filter">
              <QueryParameters>
                <Parameter argument="managers" property="identity.manager.id"/>
                <Parameter argument="applications" property="application.id"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Privileged Access Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="user" header="rept_priv_user_username" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="risk" header="rept_priv_user_risk_score" property="identity.scorecard.compositeScore" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_priv_user_first_name" property="identity.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_priv_user_last_name" property="identity.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_priv_user_manager" property="identity.manager.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_priv_user_application" property="application.name" sortable="true" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Privileged Access Report Customizer"/>
            </InitializationRule>
            <ValidationRule>
              <Reference class="sailpoint.object.Rule" name="Privileged Access Report Validation Rule"/>
            </ValidationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of privileged users currently detected by IdentityIQ.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="firstname" type="string">
        <Description>rept_input_user_report_fname</Description>
      </Argument>
      <Argument name="lastname" type="string">
        <Description>rept_input_user_report_lname</Description>
      </Argument>
      <Argument name="email" type="string">
        <Description>rept_input_user_report_email</Description>
      </Argument>
      <Argument name="applications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Role Change History Report" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Role Change Management Report">
            <DataSource objectType="Bundle" type="Hql">
              <Query>from Bundle bundle, BundleArchive archive where archive.sourceId=bundle.id and
                       archive.version = (select max(archive2.version) from BundleArchive archive2 where archive2.sourceId=bundle.id %CREATED)</Query>
              <QueryParameters>
                <Parameter argument="applications" property="bundle.profiles.applications.id"/>
                <Parameter argument="owners" property="bundle.owner.id"/>
                <Parameter argument="type" property="bundle.type"/>
                <Parameter argument="disabled" property="bundle.disabled" valueClass="boolean"/>
                <Parameter argument="createStart" operation="GE" property="archive2.created" valueClass="date"/>
                <Parameter argument="createEnd" operation="LE" property="archive2.created" valueClass="date"/>
              </QueryParameters>
              <QueryScript>
                <Source>
                          
                              import sailpoint.reporting.ReportingLibrary;

                              String dateClause = "";
                              if (args.get("createStart") != null){
                                 dateClause += " and archive2.created&gt;=:createStart ";
                              }
                              if (args.get("createEnd") != null){
                                 dateClause += " and archive2.created&lt;=:createEnd ";
                              }

                              query = query.replace("%CREATED", dateClause);

                              StringBuffer queryBuffer = new StringBuffer(query);

                              List clauseItems = new ArrayList();

                              String typeClause = ReportingLibrary.buildHqlFilter("type", "bundle.type", args);
                              if (typeClause != null)
                                clauseItems.add(typeClause);

                              String ownerClause = ReportingLibrary.buildHqlFilter("owners", "bundle.owner.id", args);
                              if (ownerClause != null)
                                clauseItems.add(ownerClause);

                              String disabledClause = ReportingLibrary.buildHqlFilter("disabled", "bundle.disabled", args);
                              if (disabledClause != null)
                                clauseItems.add(disabledClause);

                              String appsClause = ReportingLibrary.buildHqlFilter("applications", "profile.application.id", args);
                              if (appsClause != null){
                                queryBuffer.insert(query.indexOf("where"), " inner join bundle.profiles as profile ");
                                clauseItems.add(appsClause);
                              }

                              if (!clauseItems.isEmpty()){
                                 for(String c : clauseItems){
                                    queryBuffer.append(" and " + c);
                                 }
                              }

                              return queryBuffer.toString();
                          
                       </Source>
              </QueryScript>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Role Change Management Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="role" header="rept_role_change_mgmt_name" property="bundle.name" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="rept_role_change_mgmt_type" property="bundle.type" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                              import sailpoint.tools.Message;
                              import sailpoint.reporting.ReportingLibrary;
                              if (value != null){
                                String displayName = ReportingLibrary.getRoleTypeDisplayName(value);
                                if (displayName != null){
                                  return Message.localize("rept_change_mgmt_role_type_desc", new String[]{value, displayName});
                                }
                              }

                              return value;
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="version" header="rept_role_change_mgmt_version" property="archive.version" sortable="true" width="110"/>
              <ReportColumnConfig field="changeDate" header="rept_role_change_mgmt_date" property="archive.created" sortable="true" width="110"/>
              <ReportColumnConfig field="approver" header="rept_role_change_mgmt_approver" property="archive.creator" sortable="true" width="110"/>
              <ReportColumnConfig field="disabled" header="rept_role_change_mgmt_status" property="bundle.disabled" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                              import sailpoint.tools.Message;
                              import sailpoint.tools.Util;
                              return Util.otob(value) ? Message.localize("rept_change_mgmt_status_disabled") :
                                Message.localize("rept_change_mgmt_status_enabled");
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of the roles that have been recently changed</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessRoleChangeMgmtReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_biz_role_report_apps</Description>
      </Argument>
      <Argument multi="true" name="type" type="string">
        <Description>rept_input_biz_role_report_type</Description>
      </Argument>
      <Argument multi="true" name="owners" type="Identity">
        <Description>rept_input_biz_role_report_owners</Description>
      </Argument>
      <Argument name="createStart" type="date"/>
      <Argument name="createEnd" type="date"/>
      <Argument name="disabled" type="string"/>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="User Security Question Status Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="User Security Question Status Report">
            <DataSource objectType="Identity" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
                <Parameter argument="lastRefreshStart" operation="GT" property="lastRefresh"/>
                <Parameter argument="lastRefreshEnd" operation="LT" property="lastRefresh"/>
                <Parameter argument="lastLoginStart" operation="GT" property="lastLogin"/>
                <Parameter argument="lastLoginEnd" operation="LT" property="lastLogin"/>
                <Parameter argument="applications" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="businessRoles">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));

                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="User Security Question Status Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="username" header="rept_users_auth_col_user" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_users_auth_col_fame" property="firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_users_auth_col_lname" property="lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="email" header="rept_users_auth_col_email" property="email" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_users_auth_col_manager" property="manager.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="lastLogin" header="rept_users_auth_col_last_login" property="lastLogin" sortable="true" width="110"/>
              <ReportColumnConfig field="questions" header="rept_users_auth_col_questions" property="id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;

                          Integer required = renderCache.get("requiredAuthQuestions");
                          if (required == null){
                            required = context.getConfiguration().getInt( Configuration.NUM_AUTH_QUESTION_ANSWERS_REQUIRED );
                            renderCache.put("requiredAuthQuestions", required);
                          }

                          QueryOptions ops = new QueryOptions();
                          ops.addFilter(Filter.eq("identity.id", value));
                          ops.addFilter(Filter.notnull("question"));
                          return context.countObjects(AuthenticationAnswer.class, ops) + "/" + required;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about users with insufficient challenge questions.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationUserReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="lastLoginStart" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastLoginEnd" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefreshStart" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument name="lastRefreshEnd" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument multi="true" name="businessRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Status Summary Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Identity Status Report">
            <DataSource objectType="Identity" type="Filter"/>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_identity_status_summary_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="rept_identity_status_summary_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_identity_status_summary_status" property="inactive" sortable="true" width="110"/>
              <ReportColumnConfig field="correlated" header="rept_identity_status_summary_correlated" property="correlated" sortable="true" width="110"/>
            </Columns>
            <ReportSummary title="rept_identity_status_summary_summary_title">
              <DataSourceScript>
                <Source>
                            
                            import java.util.*;
                            import sailpoint.object.*;
                            import java.lang.*;

                            QueryOptions queryOptions = baseQueryOptions;

                            queryOptions.addGroupBy("inactive");
                            queryOptions.addGroupBy("correlated");
                            List fields = new ArrayList();
                            fields.add("inactive");
                            fields.add("correlated");
                            fields.add("count(*)");

                            int activeCorrelated = 0;
                            int activeUncorrelated = 0;
                            int inactiveCorrelated = 0;
                            int inactiveUncorrelated = 0;
                            Iterator results = context.search(Identity.class, queryOptions, fields);
                            while(results.hasNext()){
                                Object[] row = results.next();
                                int count = row[2] != null ? row[2].intValue() : 0;
                                if (row[0]){
                                  //Inactive
                                  if (row[1]) {
                                    //Inactive and Correlated
                                    inactiveCorrelated = count;
                                  } else {
                                    //Inactive not Correlated
                                    inactiveUncorrelated = count;
                                  }
                                } else {
                                  //Active
                                  if (row[1]) {
                                    //Active and Correlated
                                    activeCorrelated = count;
                                  } else {
                                    //Active not Correlated
                                    activeUncorrelated = count;
                                  }
                                }
                            }

                            Map map = new HashMap();
                            map.put("total", inactiveCorrelated + inactiveUncorrelated + activeCorrelated + activeUncorrelated);
                            map.put("inactive", inactiveCorrelated + inactiveUncorrelated);
                            map.put("active", activeCorrelated + activeUncorrelated);
                            map.put("inactiveCorrelated", inactiveCorrelated);
                            map.put("inactiveUncorrelated", inactiveUncorrelated);
                            map.put("activeCorrelated", activeCorrelated);
                            map.put("activeUncorrelated", activeUncorrelated);

                            return map;
                            
                          </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="rept_identity_status_summary_active_identities" name="active"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_correlated" name="activeCorrelated"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_uncorrelated" name="activeUncorrelated"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_inactive_identities" name="inactive"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_correlated" name="inactiveCorrelated"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_uncorrelated" name="inactiveUncorrelated"/>
                <LiveReportSummaryValue label="rept_identity_status_summary_total_identities" name="total"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays summary of active, inactive, correlated, uncorrelated, and total identities</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityCubeSummaryReport"/>
  </RequiredRights>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.IdentityHistoryExport" hidden="true" name="Identity History Export" resultAction="Rename" subType="Search" template="true" type="GridReport">
  <Attributes>
    <Map>
      <entry key="jasperTemplate" value="IdentityHistoryExport"/>
    </Map>
  </Attributes>
  <Description>
          Report created by the user from the Identity - History tab
      </Description>
  <Signature>
    <Inputs>
      <Argument multi="true" name="columns" type="string">
        <Description>rept_input_search_report_columns</Description>
      </Argument>
      <Argument multi="true" name="filters" type="Filter">
        <Description>rept_input_search_report_filters</Description>
      </Argument>
      <Argument name="REPORT_MAX_COUNT" type="int">
        <Description>rept_input_max_rows</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Entitlement Owner Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <Chart category="action.status" groupBy="action.status" nullCategory="cert_action_open" title="rept_cert_chart_title" type="pie" value="count(*)"/>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="DataOwner" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                            
                            import sailpoint.object.*;
                            import java.util.*;

                            if (value != null &amp;&amp; !value.isEmpty()){
                              queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                            }

                            return queryOptions;
                            
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="applications" property="parent.application">
                  <ValueScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.api.ObjectUtil;
                            if (value != null){
                              return ObjectUtil.convertIdsToNames(context, Application.class, value);
                            }
                            return null;
                          </Source>
                  </ValueScript>
                </Parameter>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Entitlement Owner Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="application" header="rept_data_owner_col_app" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_data_owner_col_description" property="exceptionEntitlements" width="110">
                <RenderScript>
                  <Source>
                            if(value instanceof sailpoint.object.EntitlementSnapshot){
                                return sailpoint.api.EntitlementDescriber.summarize(value);
                            }
                            return "";
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="schemaObjectType" header="rept_data_owner_col_schema_object_type" property="parent.schemaObjectType" sortable="true" width="110"/>
              <ReportColumnConfig field="accountName" header="rept_data_owner_col_account_name" ifEmpty="exceptionEntitlements.nativeIdentity" property="exceptionEntitlements.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="targetId" width="110">
                <RenderScript>
                  <Source>
                          return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "firstname");
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="targetId" width="110">
                <RenderScript>
                  <Source>
                          return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "lastname");
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="targetId" width="110">
                <RenderScript>
                  <Source>
                          
                            return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "manager.name");
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_data_owner_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_data_owner_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.reporting.ReportingLibrary;
                          import sailpoint.tools.Util;
                          import java.lang.String;
                          String status = ReportingLibrary.getRemediationStatus(context, value);
                          return Util.isNullOrEmpty(status) ? "" : status;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                                return value != null ? value.getComments() : null;
                            </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="exclusionExplanation" header="rept_cert_col_exclusion_explanation" property="parent" width="110">
                <RenderScript>
                  <Source>
                          
                          if (value != null){
                            if (value instanceof sailpoint.object.ArchivedCertificationEntity) {
                              return value.getExplanation();
                            }
                          }
                          
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
            <ReportSummary title="rept_cert_summary_title">
              <DataSourceScript>
                <Source>
                        
                        import java.util.*;
                        import sailpoint.object.*;

                        QueryOptions ops = baseQueryOptions;

                        List fields = new ArrayList();
                        fields.add("count(*)");
                        fields.add("count(distinct parent.id)");
                        fields.add("count(distinct parent.certification.id)");
                        fields.add("count(distinct parent.certification.certificationGroups.id)");

                        Iterator iter = context.search(CertificationItem.class, ops, fields);

                        Map map = new HashMap();

                        if (iter.hasNext()){
                          Object[] results = iter.next();
                          map.put("certifications", results[3]);
                          map.put("accessReviews", results[2]);
                          map.put("entitlements", results[1]);
                          map.put("items", results[0]);
                        }

                        return map;
                        
                      </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="reprt_cert_summary_total_certs" name="certifications"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_access_reviews" name="accessReviews"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_entitlements" name="entitlements"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_items" name="items"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the entitlement owner certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementOwnerAccessReviewReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument name="exclusions" type="boolean"/>
      <Argument multi="true" name="applications" type="string">
        <Description>rept_input_account_grp_cert_report_apps</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>rept_input_cert_report_create_dt</Description>
      </Argument>
      <Argument name="signedDate" type="date">
        <Description>rept_input_cert_report_signed_date</Description>
      </Argument>
      <Argument name="expirationDate" type="date">
        <Description>rept_input_cert_report_exp_dt</Description>
      </Argument>
      <Argument multi="true" name="tags" type="Tag">
        <Description>rept_input_cert_report_tags</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Targeted Access Review Live Report" progressMode="Percentage" resultAction="Rename" subType="Access Review and Certification Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Certification Report">
            <Chart category="action.status" groupBy="action.status" nullCategory="cert_action_open" title="rept_cert_chart_title" type="pie" value="count(*)"/>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CertificationLiveReportDataSource" objectType="CertificationItem" type="Java">
              <QueryParameters>
                <Parameter argument="type" defaultValue="Focused" property="parent.certification.type" valueClass="sailpoint.object.Certification$Type"/>
                <Parameter argument="tags" property="parent.certification.tags.id">
                  <QueryScript>
                    <Source>
                          
                          import sailpoint.object.*;
                          import java.util.*;

                          if (value != null &amp;&amp; !value.isEmpty()){
                            queryOptions.addFilter(Filter.containsAll("parent.certification.tags.id", value));
                          }

                          return queryOptions;
                          
                        </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certificationGroups" property="parent.certification.certificationGroups.id"/>
                <Parameter argument="creationDate" property="parent.certification.created" valueClass="daterange"/>
                <Parameter argument="signedDate" property="parent.certification.signed" valueClass="daterange"/>
                <Parameter argument="expirationDate" property="parent.certification.expiration" valueClass="daterange"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Focused Access Review Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="nativeIdentity" header="rept_cert_col_account_id" property="exceptionEntitlements.nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="firstName" header="rept_cert_col_first_name" property="parent.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastName" header="rept_cert_col_last_name" property="parent.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="manager" header="rept_cert_col_manager_name" property="parent.targetId" width="110">
                <RenderScript>
                  <Source>
                        
                            import sailpoint.reporting.*;
                            return sailpoint.reporting.ReportingLibrary.getColumnValue(context, sailpoint.object.Identity.class, value, "manager.name");
                          
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="certName" header="rept_cert_col_cert_access_review" property="parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="certGroupName" header="rept_cert_col_cert_grp_name" property="parent.certification.certificationGroups.name" sortable="true" width="110"/>
              <ReportColumnConfig field="tags" header="rept_cert_col_tags" property="parent.certification.tags.name" subQueryKey="id" width="110"/>
              <ReportColumnConfig field="type" header="rept_cert_col_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="rept_cert_col_display_name" property="exceptionEntitlements" scriptArguments="bundle,violationSummary" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.*;
                        return ReportingLibrary.describeCertificationEntitlement(value, scriptArgs.get("bundle"), scriptArgs.get("violationSummary"), null);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="application" header="rept_cert_col_application" property="exceptionEntitlements.application" sortable="true" width="110"/>
              <ReportColumnConfig field="instance" header="rept_cert_col_instance" property="exceptionEntitlements.instance" sortable="true" width="110"/>
              <ReportColumnConfig field="identity" header="rept_cert_col_name" property="parent.identity" sortable="true" width="110"/>
              <ReportColumnConfig field="accountName" header="rept_data_owner_col_account_name" ifEmpty="exceptionEntitlements.nativeIdentity" property="exceptionEntitlements.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_cert_col_status" property="summaryStatus" sortable="true" width="110"/>
              <ReportColumnConfig field="decision" header="rept_cert_col_decision" property="action.status" sortable="true" width="110"/>
              <ReportColumnConfig field="newValue" header="rept_cert_col_newValue" property="action" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.datasource.*;
                        return DataSourceUtil.getRemediationModifiableNewValue(value);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="remediationCompleted" header="rept_cert_col_revoke_completed" property="action" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        import sailpoint.tools.Util;
                        import java.lang.String;
                        String status = ReportingLibrary.getRemediationStatus(context, value);
                        return Util.isNullOrEmpty(status) ? "" : status;
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="decisionMaker" header="rept_cert_col_decision_maker" property="action.actorName" sortable="true" width="110"/>
              <ReportColumnConfig field="comments" header="rept_cert_col_decision_maker_comments" property="action" width="110">
                <RenderScript>
                  <Source>
                        return value != null ? value.getComments() : null;
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendation" header="rept_cert_col_recommendation" property="recommendValue" scriptArguments="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        return ReportingLibrary.getRecommendedDecision(context, value, scriptArgs.get("id"), locale, timezone);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationReasons" header="rept_cert_col_recommendation_reasons" property="id" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        return ReportingLibrary.getRecommendationReasons(context, value, locale, timezone);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_cert_col_recommendation_timestamp" property="id" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        return ReportingLibrary.getRecommendationTimestamp(context, value, locale, timezone);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionGenerated" header="rept_cert_col_auto_decision_gen" property="id" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        return ReportingLibrary.getAutoDecisionGenerated(context, value);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="autoDecisionAccepted" header="rept_cert_col_auto_decision_acc" property="id" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.reporting.ReportingLibrary;
                        return ReportingLibrary.getAutoDecisionAccepted(context, value);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="classifications" header="rept_cert_col_classifications" property="id" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.object.CertificationItem;
                        import sailpoint.service.classification.ClassificationService;
                        import sailpoint.tools.Util;

                        CertificationItem item = context.getObjectById(CertificationItem.class, value);
                        List names = new ClassificationService(context).getDisplayableNames(item.getClassificationNames());
                        return Util.listToCsv(names);
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="rept_cert_col_elevated_access" property="id" sortable="true" width="110">
                <RenderScript>
                  <Source>
                        import sailpoint.object.CertificationItem;

                        CertificationItem item = context.getObjectById(CertificationItem.class, value);
                        return item.isIiqElevatedAccess();
                      </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Certification Report Customizer"/>
            </InitializationRule>
            <ReportSummary title="rept_cert_summary_title">
              <DataSourceScript>
                <Source>
                      
                          import java.util.*;
                          import sailpoint.object.*;

                          QueryOptions ops = baseQueryOptions;

                          List fields = new ArrayList();
                          fields.add("count(*)");
                          fields.add("count(distinct parent.id)");
                          fields.add("count(distinct parent.certification.id)");
                          fields.add("count(distinct parent.certification.certificationGroups.id)");

                          Iterator iter = context.search(CertificationItem.class, ops, fields);

                          Map map = new HashMap();

                          if (iter.hasNext()){
                            Object[] results = iter.next();
                            map.put("certifications", results[3]);
                            map.put("accessReviews", results[2]);
                            map.put("entitlements", results[1]);
                            map.put("items", results[0]);
                          }

                          return map;
                          
                    </Source>
              </DataSourceScript>
              <Values>
                <LiveReportSummaryValue label="reprt_cert_summary_total_certs" name="certifications"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_access_reviews" name="accessReviews"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_entitlements" name="entitlements"/>
                <LiveReportSummaryValue label="reprt_cert_summary_total_items" name="items"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about the Targeted certifications in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessTargetedAccessReviewReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="certificationGroups" type="CertificationGroup"/>
      <Argument name="creationDate" type="date"/>
      <Argument name="signedDate" type="date"/>
      <Argument name="expirationDate" type="date"/>
      <Argument multi="true" name="tags" type="Tag"/>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Entitlements Detail Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Identity Entitlements Report">
            <DataSource objectType="IdentityEntitlement" type="Filter">
              <QueryParameters>
                <Parameter argument="identity" property="identity.id"/>
                <Parameter argument="application" property="application.id"/>
                <Parameter argument="attribute" property="name"/>
                <Parameter argument="entitlementValue" property="value"/>
                <Parameter argument="accountId" property="nativeIdentity"/>
                <Parameter argument="instance" property="instance"/>
                <Parameter argument="source" property="source"/>
                <Parameter argument="aggregationState" property="aggregationState">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.Filter;
                            import sailpoint.object.IdentityEntitlement.AggregationState;
                            import sailpoint.tools.Util;
                            
                            // "null" indicates include all
                            if ( Util.getString((String)value) != null ) {
                                if ( Util.nullSafeEq("Connected", (String)value) ) {
                                    queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Connected));                                   
                                } else {
                                    queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Disconnected));
                                }
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="type" property="type">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.Filter;
                            import sailpoint.object.IdentityEntitlement.AggregationState;
                            import sailpoint.tools.Util;
                            
                            // "null" indicates include all
                            if ( Util.getString((String)value) != null ) {
                                queryOptions.addFilter(Filter.eq("type", value));                                   
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="allowed" property="allowed" valueClass="boolean"/>
                <Parameter argument="assigned" property="assigned" valueClass="boolean"/>
                <Parameter argument="grantedByRole" property="grantedByRole" valueClass="boolean"/>
                <Parameter argument="assigner" property="assigner"/>
                <Parameter argument="pendingRequest" property="pendingRequestItem">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="currentRequest" property="requestItem">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="pendingCertification" property="pendingCertificationItem">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certified" property="certificationItem">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.tools.*;

                            // "null" indicates no value
                            if ( Util.getString((String)value) != null ) {
                                boolean bool = Util.otob(value);
                                if ( !bool ) 
                                    queryOptions.addFilter(Filter.isnull(property));
                                else 
                                    queryOptions.addFilter(Filter.notnull(property));
                                    
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity Entitlements Report Search Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="identity" property="identity.displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="label_application" property="application.name" sortable="true" width="110"/>
              <ReportColumnConfig field="attribute" header="label_attribute" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="value" header="entitlement" property="value" sortable="true" width="110"/>
              <ReportColumnConfig field="displayValue" header="label_display_value" property="application.id" scriptArguments="name,value,type" width="110">
                <RenderScript>
                  <Source>
                          
                            import sailpoint.api.Explanator;
                            import sailpoint.api.Explanator.Explanation;
                            import sailpoint.api.ObjectUtil;
                            import sailpoint.object.ManagedAttribute.Type;
                            import sailpoint.object.Bundle;
                            import sailpoint.object.ProvisioningPlan;
                            import sailpoint.service.classification.ClassificationService;
                            import sailpoint.tools.Util;

                            String appId = (String) value;
                            // aka attribute
                            String name = (String) scriptArgs.get("name");
                            String val = (String) scriptArgs.get("value");
                            Type type = (Type) scriptArgs.get("type");

                            if (type != null &amp;&amp; type == Type.Entitlement &amp;&amp; appId != null &amp;&amp; name != null) {
                              Explanation exp = Explanator.get(appId, name, val, type.name());

                              if (exp != null) {
                                return exp.getDisplayValue();
                              }
                            }

                            return null;
                            
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="accountId" header="account_name" property="nativeIdentity" skipLocalization="true" sortable="true" width="110"/>
              <ReportColumnConfig field="accountDisplayName" header="account_display_name" property="displayName" skipLocalization="true" sortable="true" width="110"/>
              <ReportColumnConfig field="instance" header="instance" property="instance" sortable="true" width="110"/>
              <ReportColumnConfig field="source" header="identity_entitlements_source" property="source" sortable="true" width="110"/>
              <ReportColumnConfig field="aggregationState" header="identity_entitlements_aggregation_state_display" property="aggregationState" width="110"/>
              <ReportColumnConfig field="type" header="srch_input_def_entitlement_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="allowed" header="identity_entitlements_allowed" property="allowed" sortable="true" width="110"/>
              <ReportColumnConfig field="assigned" header="identity_entitlements_assigned" property="assigned" sortable="true" width="110"/>
              <ReportColumnConfig field="grantedByRole" header="identity_entitlements_granted_by_role" property="grantedByRole" sortable="true" width="110"/>
              <ReportColumnConfig field="assigner" header="identity_entitlements_assigner" property="assigner" sortable="true" width="110"/>
              <ReportColumnConfig field="lastCertName" header="identity_entitlements_cert_last" property="certificationItem.parent.certification.name" sortable="true" width="110"/>
              <ReportColumnConfig field="lastCertDate" header="identity_entitlements_cert_last_date" property="certificationItem.modified" sortable="true" width="110"/>
              <ReportColumnConfig field="lastRequestId" header="identity_entitlements_request_id" property="requestItem.identityRequest.name" sortable="true" width="110"/>
              <ReportColumnConfig field="classificationNames" header="rept_cert_col_classifications" property="application.id" scriptArguments="name,value,type" width="110">
                <RenderScript>
                  <Source>
                            
                            import sailpoint.api.Explanator;
                            import sailpoint.api.Explanator.Explanation;
                            import sailpoint.api.ObjectUtil;
                            import sailpoint.object.ManagedAttribute.Type;
                            import sailpoint.object.Bundle;
                            import sailpoint.object.ProvisioningPlan;
                            import sailpoint.service.classification.ClassificationService;
                            import sailpoint.tools.Util;

                            String appId = (String) value;
                            // aka attribute
                            String name = (String) scriptArgs.get("name");
                            String val = (String) scriptArgs.get("value");
                            Type type = (Type) scriptArgs.get("type");

                            // Check if it is representing a role
                            if (ProvisioningPlan.ATT_IIQ_DETECTED_ROLES.equals(name) ||
                                    ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES.equals(name)) {

                                String classifiableId = ObjectUtil.getId(context, Bundle.class, val);
                                if (classifiableId != null) {
                                    ClassificationService service = new ClassificationService(context);
                                    return Util.listToCsv(service.getClassificationNames(Bundle.class, classifiableId));
                                }
                            }
                            // Otherwise it is an entitlement
                            else {
                                if (appId != null &amp;&amp; name != null &amp;&amp; type != null) {
                                    Explanation exp = type == Type.Permission ?
                                                      Explanator.get(appId, name) :
                                                      Explanator.get(appId, name, val);

                                    if (exp != null) {
                                        return Util.listToCsv(exp.getClassificationDisplayableNames());
                                    }
                                }
                            }

                            return null;
                            
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="elevatedAccess" header="label_elevated_access" property="application.id" scriptArguments="name,value,type" sortable="true" width="110">
                <RenderScript>
                  <Source>
                          
                            import sailpoint.api.Explanator;
                            import sailpoint.api.Explanator.Explanation;
                            import sailpoint.api.ObjectUtil;
                            import sailpoint.object.ManagedAttribute.Type;
                            import sailpoint.object.Bundle;
                            import sailpoint.object.ProvisioningPlan;
                            import sailpoint.service.classification.ClassificationService;
                            import sailpoint.tools.Util;

                            String appId = (String) value;
                            // aka attribute
                            String name = (String) scriptArgs.get("name");
                            String val = (String) scriptArgs.get("value");
                            Type type = (Type) scriptArgs.get("type");

                            if (type != null &amp;&amp; type == Type.Entitlement &amp;&amp; appId != null &amp;&amp; name != null) {
                              Explanation exp = Explanator.get(appId, name, val, type.name());
                              return exp == null ? null : exp.isIiqElevatedAccess();
                            }

                            return null;
                            
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays identity/account entitlement information.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEntitlementReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identity" type="Identity">
        <Description>Identities to include in the report</Description>
        <Prompt>identities</Prompt>
      </Argument>
      <Argument multi="true" name="application" type="Application">
        <Description>Applications to include in the report</Description>
        <Prompt>applications</Prompt>
      </Argument>
      <Argument multi="true" name="attribute">
        <Description>Attirubtes to include in the report</Description>
        <Prompt>attribute</Prompt>
      </Argument>
      <Argument multi="true" name="entitlementValue">
        <Description>Attirubtes to include in the report</Description>
        <Prompt>attribute</Prompt>
      </Argument>
      <Argument name="accountId">
        <Description>Account ids to include in the report</Description>
        <Prompt>account_name</Prompt>
      </Argument>
      <Argument name="instance">
        <Description>Instances to include</Description>
        <Prompt>instance</Prompt>
      </Argument>
      <Argument name="source" type="string">
        <Description>Include only Entitlements with a specific source</Description>
        <Prompt>identity_entitlements_source</Prompt>
      </Argument>
      <Argument name="aggregationState" type="string">
        <Description>Include only connected or disconnected entitlements</Description>
        <Prompt>identity_entitlements_aggregation_state_display</Prompt>
      </Argument>
      <Argument name="type" type="string">
        <Description>Include only certain types of permissions. Either Permission or Entitlement</Description>
        <Prompt>srch_input_def_entitlement_type</Prompt>
      </Argument>
      <Argument name="allowed" type="string">
        <Description>Include only allowed entitlements</Description>
        <Prompt>identity_entitlements_role_allowed</Prompt>
      </Argument>
      <Argument name="assigned" type="string">
        <Description>Include only entitlements that are assigned</Description>
        <Prompt>identity_entitlements_assigned</Prompt>
      </Argument>
      <Argument name="grantedByRole" type="string">
        <Description>Include only entitlements granted by a role.</Description>
        <Prompt>granted</Prompt>
      </Argument>
      <Argument name="pendingRequest" type="string">
        <Description>Include only entitlements that have a pending access request.</Description>
        <Prompt>pendingRequest</Prompt>
      </Argument>
      <Argument name="currentRequest" type="string">
        <Description>Include only entitlements that have a current access request.</Description>
        <Prompt>pendingRequest</Prompt>
      </Argument>
      <Argument name="pendingCertification" type="string">
        <Description>Include only entitlements that have a pending certification.</Description>
        <Prompt>pendingCertification</Prompt>
      </Argument>
      <Argument name="certified" type="string">
        <Description>Include only entitlements that have been certified.</Description>
        <Prompt>certified</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Effective Access Live Report" progressMode="String" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Identity Effective Access Live Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.IdentityEffectiveEntitlementsDataSource" objectType="Identity" type="Java">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
                <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                <Parameter argument="applications" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="businessRoles">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import java.lang.*;
                            List roleFilters = new ArrayList();
                            if (value != null){
                              for(String role : value){
                                roleFilters.add(Filter.eq("bundles.id", role));
                                roleFilters.add(Filter.eq("assignedRoles.id", role));
                              }

                              if (!roleFilters.isEmpty())
                                queryOptions.addFilter(Filter.subquery("id", Identity.class, "id", Filter.or(roleFilters)));

                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity Effective Access Options Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="identity" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="rept_identity_effective_access_report_header_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_identity_effective_access_report_header_first_name" property="firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_identity_effective_access_report_header_last_name" property="lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_identity_effective_access_report_header_app" width="110"/>
              <ReportColumnConfig field="account" header="rept_identity_effective_access_report_header_account" width="110"/>
              <ReportColumnConfig field="entitlement" header="rept_identity_effective_access_report_header_entitlement" width="110"/>
              <ReportColumnConfig field="value" header="rept_identity_effective_access_report_header_value" width="110"/>
              <ReportColumnConfig field="accountGroup" header="rept_identity_effective_access_report_header_account_group" width="110"/>
              <ReportColumnConfig field="detectedRole" header="rept_identity_effective_access_report_header_detected_role" width="110"/>
              <ReportColumnConfig field="assignedRole" header="rept_identity_effective_access_report_header_assigned_role" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays the effective access of an identity</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEffectiveAccessReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identities" type="Identity">
        <Description>rept_input_user_report_identities</Description>
      </Argument>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="firstname" type="string">
        <Description>rept_input_user_report_fname</Description>
      </Argument>
      <Argument name="lastname" type="string">
        <Description>rept_input_user_report_lname</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="inactive" type="boolean">
        <Description>rept_input_user_report_inactive</Description>
      </Argument>
      <Argument name="lastLoginType" type="string">
        <Description>rept_input_user_report_last_login_type</Description>
      </Argument>
      <Argument name="lastLogin" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefreshType" type="string">
        <Description>rept_input_user_report_last_refresh_type</Description>
      </Argument>
      <Argument name="lastRefresh" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument name="email" type="string">
        <Description>rept_input_user_report_email</Description>
      </Argument>
      <Argument multi="true" name="noBusinessRoles" type="boolean">
        <Description>rept_input_user_report_no_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="businessRoles" type="Bundle">
        <Description>rept_input_user_report_biz_roles</Description>
      </Argument>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument filterString="managerStatus == true" multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Attributes Live Report" progressMode="String" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Account Attributes Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.AccountAttributesLiveReportDataSource" objectType="Identity" type="Java">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
                <Parameter argument="lastRefresh" property="lastRefresh" valueClass="daterange"/>
                <Parameter argument="lastLogin" property="lastLogin" valueClass="daterange"/>
                <Parameter argument="identityApplication" property="links.application.id"/>
                <Parameter argument="capabilities" property="capabilities.id"/>
                <Parameter argument="groupDefinitions">
                  <QueryScript>
                    <Source>
                            import sailpoint.object.*;
                            import sailpoint.reporting.*;
                            Filter f = ReportingLibrary.getGroupDefinitionFilter(context, value, false);
                            if(f!=null) {
                                queryOptions.addFilter(f);
                            }
                            return queryOptions;
                          </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Account Attributes Live Options Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="identity" header="rept_entitlement_grid_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="rept_entitlement_grid_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="rept_entitlement_grid_first_name" property="firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="rept_entitlement_grid_last_name" property="lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="email" header="rept_entitlement_grid_email" property="email" sortable="true" width="110"/>
              <ReportColumnConfig field="account" header="rept_entitlement_grid_account" width="110"/>
              <ReportColumnConfig field="application" header="rept_entitlement_grid_application" width="110"/>
              <ReportColumnConfig field="attribute" header="rept_entitlement_grid_entitlement_attribute" width="110"/>
              <ReportColumnConfig field="value" header="rept_entitlement_grid_entitlement_value" width="110"/>
            </Columns>
            <InitializationRule>
              <Reference class="sailpoint.object.Rule" name="Identity Report Form Customizer"/>
            </InitializationRule>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>A detailed view of each identity and the entitlements that they are assigned.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessIdentityEntitlementReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="groupDefinitions" type="string">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
      <Argument name="firstname" type="string">
        <Description>rept_input_user_report_fname</Description>
      </Argument>
      <Argument name="lastname" type="string">
        <Description>rept_input_user_report_lname</Description>
      </Argument>
      <Argument name="capabilities" type="string">
        <Description>rept_input_user_report_capabilities</Description>
      </Argument>
      <Argument name="inactive" type="boolean">
        <Description>rept_input_user_report_inactive</Description>
      </Argument>
      <Argument name="showScopes" type="boolean">
        <Description>rept_input_user_report_scopes_caps</Description>
      </Argument>
      <Argument name="lastLogin" type="date">
        <Description>rept_input_user_report_last_login</Description>
      </Argument>
      <Argument name="lastRefresh" type="date">
        <Description>rept_input_user_report_last_refresh</Description>
      </Argument>
      <Argument name="email" type="string">
        <Description>rept_input_user_report_email</Description>
      </Argument>
      <Argument multi="true" name="identityApplication" type="Application">
        <Description>rept_input_user_report_apps</Description>
      </Argument>
      <Argument filterString="managerStatus == true" multi="true" name="managers" type="Identity">
        <Description>rept_input_user_report_mgrs</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Application Status Report" progressMode="Percentage" resultAction="Rename" subType="Application Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Application Status Report">
            <DataSource objectType="Application" type="Hql">
              <Query>from Application a</Query>
              <QueryParameters>
                <Parameter argument="applications"/>
              </QueryParameters>
              <QueryScript>
                <Source>
                        
                              if (args.containsKey("applications")){
                                return query + " where a.id in (:applications)";
                              }
                              return query;
                          
                       </Source>
              </QueryScript>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="name" header="rept_app_status_col_app_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="numberAccounts" header="rept_app_status_col_num_accounts" property="(select count(id) from sailpoint.object.Link l where l.application.id = a.id)" width="110"/>
              <ReportColumnConfig field="lastAgg" header="rept_app_status_col_last_agg" property="attributes" sortable="true" width="110">
                <RenderScript>
                  <Source>
                            if(null != value){
                              return value.get("acctAggregationEnd");
                            }
                          </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="oldRefresh" header="rept_app_status_col_oldest_refresh" property="(select min(lastRefresh) from sailpoint.object.Link l where l.application.id = a.id)" width="110"/>
              <ReportColumnConfig field="newRefresh" header="rept_app_status_col_newest_refresh" property="(select max(lastRefresh) from sailpoint.object.Link l where l.application.id = a.id)" width="110"/>
              <ReportColumnConfig field="totalAssignments" header="rept_app_status_col_assignments" property="(select count(id) from sailpoint.object.IdentityEntitlement e where e.application.id = a.id and e.type is not null)" width="110"/>
              <ReportColumnConfig field="totalAttributes" header="rept_app_status_col_entitlements" property="a.id" width="110">
                <RenderScript>
                  <Source>
                          import sailpoint.object.*;
                          import sailpoint.tools.BrandingServiceFactory;
                          import java.util.*;
                          import sailpoint.tools.*;

                          /*
                            HQL does not allow us to count multiple distinct columns so use sql
                          */

                          String hql = "sql:select count(*) from (select distinct name, value, type from  "
                                  + BrandingServiceFactory.getService().brandTableName( "identity_entitlement" ) +
                                  " where type is not null and application = :applicationId) subquery";
                          Map params = new HashMap();
                          params.put("applicationId", value);
                          Iterator result = context.search(hql, params, new QueryOptions());
                          int count = 0;
                          while (result.hasNext()){
                              Integer val = Util.otoi(result.next());
                              count = val != null ? val.intValue() : 0;
                          }

                          return count;
                        </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about each application in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessApplicationStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_app_status_help_apps</Description>
        <Prompt>rept_app_status_label_apps</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Environment Information Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="knownBadVersions">
        <value>
          <Map>
            <entry key="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
            <entry key="com.mysql.cj.jdbc.Driver"/>
            <entry key="oracle.jdbc.driver.OracleDriver">
              <value>
                <List>
                  <String>2111220-fc074b0027bc6f77a67a4c4aac2f490d</String>
                </List>
              </value>
            </entry>
          </Map>
        </value>
      </entry>
      <entry key="report">
        <value>
          <LiveReport title="Environment Information Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.EnvironmentInformationDataSource" type="Java"/>
            <Columns>
              <ReportColumnConfig field="objectType" header="rept_environment_information_object_type" property="objectType" sortable="true" width="110"/>
              <ReportColumnConfig field="property" header="rept_environment_information_property" property="property" width="110"/>
              <ReportColumnConfig field="value" header="rept_environment_information_value" property="value" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays statistics about IdentityIQ environment</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEnvironmentInformationReport"/>
  </RequiredRights>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Provisioning Transaction Object Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Provisioning Transaction Object Report">
            <DataSource objectType="ProvisioningTransaction" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="identityName"/>
                <Parameter argument="applications" property="applicationName"/>
                <Parameter argument="integration" property="integration">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                         if (value != null &amp;&amp; !value.isEmpty()){
                           queryOptions.addFilter(Filter.ignoreCase(Filter.like("integration", value, Filter.MatchMode.START)));
                         }

                         return queryOptions;
                         
                      </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="accountDisplayName" property="accountDisplayName">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                        if (value != null &amp;&amp; !value.isEmpty()){
                          queryOptions.addFilter(Filter.ignoreCase(Filter.like("accountDisplayName", value, Filter.MatchMode.START)));
                        }

                        return queryOptions;
                        
                      </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="status" property="status"/>
                <Parameter argument="type" property="type"/>
                <Parameter argument="operation" property="operation"/>
                <Parameter argument="source" property="source"/>
                <Parameter argument="creationDate" property="created" valueClass="daterange"/>
                <Parameter argument="forced" property="forced">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                        if (value == true){
                          queryOptions.addFilter(Filter.eq("forced", true));
                        }

                        return queryOptions;
                        
                      </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Provisioning Transaction Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="report_provisioning_id" property="name" sortable="true" width="110">
                <RenderScript>
                  <Source>
                      
                        import sailpoint.tools.Util;
                        return Util.stripLeadingChar(value, '0');
                      
                    </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="applicationName" header="report_provisioning_application" property="applicationName" sortable="true" width="110"/>
              <ReportColumnConfig field="identityDisplayName" header="report_provisioning_identity_display" property="identityDisplayName" sortable="true" width="110"/>
              <ReportColumnConfig field="identityName" header="report_provisioning_identity" property="identityName" sortable="true" width="110"/>
              <ReportColumnConfig field="integration" header="report_provisioning_integration" property="integration" sortable="true" width="110"/>
              <ReportColumnConfig field="nativeIdentity" header="report_provisioning_native_identity" property="nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="accountDisplayName" header="report_provisioning_account_display" property="accountDisplayName" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="report_provisioning_status" property="status" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="report_provisioning_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="operation" header="report_provisioning_operation" property="operation" sortable="true" width="110"/>
              <ReportColumnConfig field="source" header="report_provisioning_source" property="source" sortable="true" width="110"/>
              <ReportColumnConfig field="created" header="report_provisioning_date" property="created" sortable="true" width="110"/>
              <ReportColumnConfig field="forced" header="report_provisioning_forced" property="forced" sortable="true" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays provisioning transactions.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessProvisioningTransactionReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>help_report_provisioning_application</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity">
        <Description>help_report_provisioning_identity</Description>
      </Argument>
      <Argument name="integration" type="string">
        <Description>help_report_provisioning_integration</Description>
      </Argument>
      <Argument name="accountDisplayName" type="string">
        <Description>help_report_provisioning_account_display_name</Description>
      </Argument>
      <Argument name="operation" type="string">
        <Description>help_report_provisioning_operation</Description>
      </Argument>
      <Argument name="source" type="string">
        <Description>help_report_provisioning_source</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>help_report_provisioning_status</Description>
      </Argument>
      <Argument name="type" type="string">
        <Description>help_report_provisioning_type</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>help_report_provisioning_date</Description>
      </Argument>
      <Argument name="forced" type="boolean">
        <Description>help_report_provisioning_forced</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Detailed Provisioning Transaction Object Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Detailed Provisioning Transaction Object Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.ProvisioningTransactionObjectDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="identities" property="identityName"/>
                <Parameter argument="applications" property="applicationName"/>
                <Parameter argument="integration" property="integration">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                         if (value != null &amp;&amp; !value.isEmpty()){
                           queryOptions.addFilter(Filter.ignoreCase(Filter.like("integration", value, Filter.MatchMode.START)));
                         }

                         return queryOptions;
                         
                      </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="accountDisplayName" property="accountDisplayName">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                        if (value != null &amp;&amp; !value.isEmpty()){
                          queryOptions.addFilter(Filter.ignoreCase(Filter.like("accountDisplayName", value, Filter.MatchMode.START)));
                        }

                        return queryOptions;
                        
                      </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="status" property="status"/>
                <Parameter argument="type" property="type"/>
                <Parameter argument="operation" property="operation"/>
                <Parameter argument="source" property="source"/>
                <Parameter argument="creationDate" property="created" valueClass="daterange"/>
                <Parameter argument="forced" property="forced">
                  <QueryScript>
                    <Source>
                        
                        import sailpoint.object.*;
                        import java.util.*;

                        if (value == true){
                          queryOptions.addFilter(Filter.eq("forced", true));
                        }

                        return queryOptions;
                        
                      </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Provisioning Transaction Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="report_provisioning_id" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="applicationName" header="report_provisioning_application" property="applicationName" sortable="true" width="110"/>
              <ReportColumnConfig field="identityName" header="report_provisioning_identity" property="identityName" sortable="true" width="110"/>
              <ReportColumnConfig field="identityDisplayName" header="report_provisioning_identity_display" property="identityDisplayName" sortable="true" width="110"/>
              <ReportColumnConfig field="integration" header="report_provisioning_integration" property="integration" sortable="true" width="110"/>
              <ReportColumnConfig field="nativeIdentity" header="report_provisioning_native_identity" property="nativeIdentity" sortable="true" width="110"/>
              <ReportColumnConfig field="accountDisplayName" header="report_provisioning_account_display" property="accountDisplayName" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="report_provisioning_status" property="status" sortable="true" width="110"/>
              <ReportColumnConfig field="type" header="report_provisioning_type" property="type" sortable="true" width="110"/>
              <ReportColumnConfig field="operation" header="report_provisioning_operation" property="operation" sortable="true" width="110"/>
              <ReportColumnConfig field="source" header="report_provisioning_source" property="source" sortable="true" width="110"/>
              <ReportColumnConfig field="created" header="report_provisioning_date" property="created" sortable="true" width="110"/>
              <ReportColumnConfig field="forced" header="report_provisioning_forced" property="forced" sortable="true" width="110"/>
              <ReportColumnConfig field="retryCount" header="report_provisioning_retry_count" width="110"/>
              <ReportColumnConfig field="manualWorkItem" header="report_provisioning_work_item" width="110"/>
              <ReportColumnConfig field="ticketId" header="report_provisioning_ticket_id" width="110"/>
              <ReportColumnConfig field="timedOut" header="report_provisioning_timed_out" width="110"/>
              <ReportColumnConfig field="certificationId" header="report_provisioning_certification_id" property="certificationId" sortable="true" width="110"/>
              <ReportColumnConfig field="certificationName" header="report_provisioning_certification_name" width="110"/>
              <ReportColumnConfig field="errorMessages" header="report_provisioning_errors" width="110"/>
              <ReportColumnConfig field="requestOperation" header="report_provisioning_request_operation" width="110"/>
              <ReportColumnConfig field="requestName" header="report_provisioning_request_name" width="110"/>
              <ReportColumnConfig field="requestValue" header="report_provisioning_request_value" width="110"/>
              <ReportColumnConfig field="requestResult" header="report_provisioning_request_result" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays all information from provisioning transactions.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessProvisioningTransactionDetailedReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>help_report_provisioning_application</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity">
        <Description>help_report_provisioning_identity</Description>
      </Argument>
      <Argument name="integration" type="string">
        <Description>help_report_provisioning_integration</Description>
      </Argument>
      <Argument name="accountDisplayName" type="string">
        <Description>help_report_provisioning_account_display_name</Description>
      </Argument>
      <Argument name="operation" type="string">
        <Description>help_report_provisioning_operation</Description>
      </Argument>
      <Argument name="source" type="string">
        <Description>help_report_provisioning_source</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>help_report_provisioning_status</Description>
      </Argument>
      <Argument name="type" type="string">
        <Description>help_report_provisioning_type</Description>
      </Argument>
      <Argument name="creationDate" type="date">
        <Description>help_report_provisioning_date</Description>
      </Argument>
      <Argument name="forced" type="boolean">
        <Description>help_report_provisioning_forced</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Capability to Identities Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Capability to Identities Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.CapabilityObjectDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="capabilities" property="id"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Capability to Identities Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="report_capability_identities_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="id" header="report_capability_identities_id" hidden="true" property="id" width="110"/>
              <ReportColumnConfig field="displayName" header="report_capability_identities_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="identities" header="report_capability_identities_identities" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays a list of identities that are assigned this capability.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessCapabilitiesReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="excludeIndirectCapabilities" type="boolean">
        <Description>help_report_capability_identities_exclude_indirect_caps</Description>
      </Argument>
      <Argument name="excludeWorkgroups" type="boolean">
        <Description>help_report_capability_identities_exclude_workgroups</Description>
      </Argument>
      <Argument multi="true" name="capabilities" type="Capability">
        <Description>help_report_capability_capabilities</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity to Capabilities Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport disablePreview="true" title="Identity to Capabilities Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.IdentityCapabilitiesObjectDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity to Capabilities Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="report_identity_capabilities_name" property="name" sortable="true" width="110"/>
              <ReportColumnConfig field="displayName" header="report_identity_capabilities_display_name" property="displayName" sortable="true" width="110"/>
              <ReportColumnConfig field="capabilities" header="report_identity_capabilities_capabilities" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays the capabilities associated with an identity.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessCapabilitiesReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument name="excludeIndirectCapabilities" type="boolean">
        <Description>help_report_identity_capabilities_exclude_indirect_caps</Description>
      </Argument>
      <Argument name="excludeWorkgroups" type="boolean">
        <Description>help_report_identity_capabilities_exclude_workgroups</Description>
      </Argument>
      <Argument name="includeEmptyCapabilities" type="boolean">
        <Description>help_report_identity_capabilities_include_empty_caps</Description>
      </Argument>
      <Argument multi="true" name="identities" type="Identity">
        <Description>help_report_identity_capabilities_identities</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Connectivity Information Report" progressMode="Percentage" resultAction="Rename" subType="Administration Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Connectivity Information Report">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.ConnectivityInformationDataSource" type="Java">
              <QueryParameters>
                <Parameter argument="applicationNames" property="application.id"/>
                <Parameter argument="applicationTypes" property="type"/>
                <Parameter argument="excludeList" property="excludeList"/>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Connectivity Information Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="name" header="rept_connectivity_info_report_header_name" property="name" sortable="true" width="70"/>
              <ReportColumnConfig field="type" header="rept_connectivity_info_report_header_type" property="type" width="70"/>
              <ReportColumnConfig field="attributeType" header="rept_connectivity_info_report_header_attribute" property="attributeType" width="150"/>
              <ReportColumnConfig field="attributeValue" header="rept_connectivity_info_report_header_attribute_value" property="attributeValue" width="40"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>The Connectivity Information Report collects the statistical and configurational data of Applications from IdentityIQ database based on filter criteria.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessConnectivityInformationReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applicationNames" type="Application">
        <Description>List of execluded application names</Description>
      </Argument>
      <Argument multi="true" name="applicationTypes" type="Application">
        <Description>List of execluded application types</Description>
      </Argument>
      <Argument multi="true" name="excludeList" type="string">
        <Description>Filtered attributes</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Access Request Status Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="auditEventTypes">
        <value>
          <List>
            <String>AccessRequest</String>
            <String>EntitlementsRequest</String>
            <String>RolesRequest</String>
          </List>
        </value>
      </entry>
      <entry key="report">
        <value>
          <LiveReport title="Access Request Status Report">
            <Chart title="rept_lcm_access_request_chart_title" type="pie">
              <Script>
                <Source>
                             
                                import sailpoint.object.*;
                                import java.util.*;

                                List data = new ArrayList();

                                QueryOptions approvalStateOps = new QueryOptions(baseQueryOptions);
                                Filter filter = Filter.and( Filter.notnull("approvalState"),
                                    Filter.ne("identityRequest.executionStatus", IdentityRequest.ExecutionStatus.Terminated));

                                approvalStateOps.addFilter(filter);
                                approvalStateOps.addGroupBy("approvalState");

                                List fields = new ArrayList();
                                fields.add("count(*)");
                                fields.add("approvalState");

                                Iterator iter = context.search(IdentityRequestItem.class, approvalStateOps, fields);
                                while (iter.hasNext()){
                                    Object[] row = iter.next();
                                    Map val = new HashMap();
                                    val.put("category", row[1].toString());
                                    val.put("value", row[0]);
                                    data.add(val);
                                }

                                QueryOptions terminatedStateOps = new QueryOptions(baseQueryOptions);
                                filter = Filter.and( Filter.notnull("approvalState"),
                                    Filter.eq("identityRequest.executionStatus", IdentityRequest.ExecutionStatus.Terminated));
                                terminatedStateOps.addFilter(filter);

                                int terminatedCount = context.countObjects(IdentityRequestItem.class, terminatedStateOps);
                                if (terminatedCount &gt; 0) {
                                    Map val = new HashMap();
                                    val.put("category", "identity_request_terminated");
                                    val.put("value", terminatedCount);
                                    data.add(val);
                                }

                                QueryOptions requestStateOps = new QueryOptions(baseQueryOptions);
                                requestStateOps.addFilter(Filter.isnull("approvalState"));
                                requestStateOps.addGroupBy("identityRequest.completionStatus");

                                fields = new ArrayList();
                                fields.add("count(*)");
                                fields.add("identityRequest.completionStatus");

                                iter = context.search(IdentityRequestItem.class, requestStateOps, fields);
                                while (iter.hasNext()){
                                    Object[] row = iter.next();
                                    Map val = new HashMap();
                                    if( IdentityRequest.CompletionStatus.Success.equals(row[1])) {
                                        val.put("category", "rept_lcm_request_status_col_status_pending_provision");
                                    } else {
                                        val.put("category", "rept_lcm_request_status_col_status_pending_completion");
                                    }

                                    val.put("value", row[0]);
                                    data.add(val);
                                }

                                return data;
                              
                           </Source>
              </Script>
            </Chart>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" objectType="sailpoint.object.IdentityRequestItem" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Access Request Status Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requester" header="rept_lcm_request_status_col_requester" property="requester" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="owner" header="rept_lcm_request_status_col_owner" property="owner" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="operation" header="rept_lcm_request_status_col_operation" property="operation" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="application" header="rept_lcm_request_status_col_app" property="application" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="account" header="rept_lcm_request_status_col_account" property="account" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attribute" header="rept_lcm_request_status_col_entitlement" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attributeValue" header="rept_lcm_request_status_col_entitlement_value" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="description" header="rept_lcm_request_status_col_entitlement_description" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="approvers" header="rept_lcm_request_status_col_approver" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="rejecters" header="rept_lcm_request_status_col_rejecter" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="status" header="rept_lcm_request_status_col_status" property="status" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attachmentsCount" header="rept_lcm_request_status_col_attachments_count" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendation" header="rept_lcm_request_status_col_recommendation" property="recommendation" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendationReasons" header="rept_lcm_request_status_col_recommendation_reasons" property="recommendationReasons" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_lcm_request_status_col_recommendation_timestamp" property="recommendationTimestamp" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="classificationNames" header="rept_lcm_request_status_col_classifications" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="accessRecommendation" header="rept_col_access_request_recommendation" property="accessRecommendation" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="accessRecommendationReasons" header="rept_col_access_request_recommendation_reasons" property="accessRecommendationReasons" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="accessRecommendationTimestamp" header="rept_col_access_request_recommendation_timestamp" property="accessRecommendationTimestamp" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="iiqElevatedAccess" header="rept_lcm_request_status_col_iiq_elevated_access" property="iiqElevatedAccess" sortable="true" valueClass="java.lang.String" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
      <entry key="reportTitle" value="rept_lcm_entitlement_request_status_title"/>
    </Map>
  </Attributes>
  <Description>Displays information about access requests from LCM in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementRequestStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_lcm_request_status_report_apps</Description>
      </Argument>
      <Argument multi="true" name="approvers" type="Identity">
        <Description>rept_input_lcm_request_status_report_approver</Description>
      </Argument>
      <Argument multi="true" name="requestors" type="Identity">
        <Description>rept_input_lcm_request_status_report_requester</Description>
      </Argument>
      <Argument multi="true" name="entitlements" type="sailpoint.object.IdentityItem">
        <Description>rept_input_lcm_request_status_report_entitlements</Description>
      </Argument>
      <Argument multi="true" name="roles" type="Role">
        <Description>rept_input_lcm_request_status_report_roles</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Lifecycle Events Status Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="auditEventTypes">
        <value>
          <List>
            <String>Lifecycle</String>
          </List>
        </value>
      </entry>
      <entry key="report">
        <value>
          <LiveReport title="Lifecycle Events Status Report">
            <Chart title="rept_lcm_access_request_chart_title" type="pie">
              <Script>
                <Source>
                             
                                import sailpoint.object.*;
                                import java.util.*;
                                List data = new ArrayList();
                                QueryOptions approvalStateOps = new QueryOptions(baseQueryOptions);
                                Filter filter = Filter.and( Filter.notnull("approvalState"),
                                    Filter.ne("identityRequest.executionStatus", IdentityRequest.ExecutionStatus.Terminated));
                                approvalStateOps.addFilter(filter);
                                approvalStateOps.addGroupBy("approvalState");
                                List fields = new ArrayList();
                                fields.add("count(*)");
                                fields.add("approvalState");
                                Iterator iter = context.search(IdentityRequestItem.class, approvalStateOps, fields);
                                while (iter.hasNext()){
                                    Object[] row = iter.next();
                                    Map val = new HashMap();
                                    val.put("category", row[1].toString());
                                    val.put("value", row[0]);
                                    data.add(val);
                                }
                                QueryOptions terminatedStateOps = new QueryOptions(baseQueryOptions);
                                filter = Filter.and( Filter.notnull("approvalState"),
                                    Filter.eq("identityRequest.executionStatus", IdentityRequest.ExecutionStatus.Terminated));
                                terminatedStateOps.addFilter(filter);
                                int terminatedCount = context.countObjects(IdentityRequestItem.class, terminatedStateOps);
                                if (terminatedCount &gt; 0) {
                                    Map val = new HashMap();
                                    val.put("category", "identity_request_terminated");
                                    val.put("value", terminatedCount);
                                    data.add(val);
                                }
                                QueryOptions requestStateOps = new QueryOptions(baseQueryOptions);
                                requestStateOps.addFilter(Filter.isnull("approvalState"));
                                requestStateOps.addGroupBy("identityRequest.completionStatus");
                                fields = new ArrayList();
                                fields.add("count(*)");
                                fields.add("identityRequest.completionStatus");
                                iter = context.search(IdentityRequestItem.class, requestStateOps, fields);
                                while (iter.hasNext()){
                                    Object[] row = iter.next();
                                    Map val = new HashMap();
                                    if( IdentityRequest.CompletionStatus.Success.equals(row[1])) {
                                        val.put("category", "rept_lcm_request_status_col_status_pending_provision");
                                    } else {
                                        val.put("category", "rept_lcm_request_status_col_status_pending_completion");
                                    }
                                    val.put("value", row[0]);
                                    data.add(val);
                                }
                                return data;
                              
                           </Source>
              </Script>
            </Chart>
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" objectType="sailpoint.object.IdentityRequestItem" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Lifecycle Events Status Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requester" header="rept_lcm_request_status_col_requester" property="requester" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="owner" header="rept_lcm_request_status_col_owner" property="owner" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="operation" header="rept_lcm_request_status_col_operation" property="operation" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="application" header="rept_lcm_request_status_col_app" property="application" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="account" header="rept_lcm_request_status_col_account" property="account" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attribute" header="rept_lcm_request_status_col_entitlement" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attributeValue" header="rept_lcm_request_status_col_entitlement_value" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="description" header="rept_lcm_request_status_col_entitlement_description" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="approvers" header="rept_lcm_request_status_col_approver" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="rejecters" header="rept_lcm_request_status_col_rejecter" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="status" header="rept_lcm_request_status_col_status" property="status" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attachmentsCount" header="rept_lcm_request_status_col_attachments_count" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendation" header="rept_lcm_request_status_col_recommendation" property="recommendation" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendationReasons" header="rept_lcm_request_status_col_recommendation_reasons" property="recommendationReasons" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="recommendationTimestamp" header="rept_lcm_request_status_col_recommendation_timestamp" property="recommendationTimestamp" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="classificationNames" header="rept_lcm_request_status_col_classifications" valueClass="java.lang.String" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
      <entry key="reportTitle" value="rept_lcm_entitlement_request_status_title"/>
    </Map>
  </Attributes>
  <Description>Displays information about lifecycle access requests from LCM in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessEntitlementRequestStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_lcm_request_status_report_apps</Description>
      </Argument>
      <Argument multi="true" name="approvers" type="Identity">
        <Description>rept_input_lcm_request_status_report_approver</Description>
      </Argument>
      <Argument multi="true" name="requestors" type="Identity">
        <Description>rept_input_lcm_request_status_report_requester</Description>
      </Argument>
      <Argument multi="true" name="entitlements" type="sailpoint.object.IdentityItem">
        <Description>rept_input_lcm_request_status_report_entitlements</Description>
      </Argument>
      <Argument multi="true" name="roles" type="Role">
        <Description>rept_input_lcm_request_status_report_roles</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Identity Requests Status Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="auditEventTypes">
        <value>
          <List>
            <String>IdentityEditRequest</String>
            <String>IdentityCreateRequest</String>
            <String>Registration</String>
            <String>AttributeSync</String>
          </List>
        </value>
      </entry>
      <entry key="report">
        <value>
          <LiveReport title="rept_lcm_attribute_request_status_title">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Identity Request Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requester" header="rept_lcm_request_status_col_requester" property="requester" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="owner" header="rept_lcm_request_status_col_owner" property="owner" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="operation" header="rept_lcm_request_status_col_operation" property="opertation" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attribute" header="rept_lcm_request_status_col_attr" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="attributeValue" header="rept_lcm_request_status_col_attr_summary" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="approvers" header="rept_lcm_request_status_col_approver" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="rejecters" header="rept_lcm_request_status_col_rejecter" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="status" header="rept_lcm_request_status_col_status" property="status" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" valueClass="java.lang.String" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
      <entry key="reportTitle" value="rept_lcm_attribute_request_status_title"/>
    </Map>
  </Attributes>
  <Description>Displays information about identity requests from LCM in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAttributeRequestStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_lcm_request_status_report_apps</Description>
      </Argument>
      <Argument multi="true" name="approvers" type="Identity">
        <Description>rept_input_lcm_request_status_report_approver</Description>
      </Argument>
      <Argument multi="true" name="requestors" type="Identity">
        <Description>rept_input_lcm_request_status_report_requester</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Account Requests Status Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="auditEventTypes" value="AccountsRequest"/>
      <entry key="report">
        <value>
          <LiveReport title="Account Request Status Report Test">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Account Request Status Custom Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" width="110"/>
              <ReportColumnConfig field="requester" header="rept_lcm_request_status_col_requester" property="requester" sortable="true" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" width="110"/>
              <ReportColumnConfig field="owner" header="rept_lcm_request_status_col_owner" property="owner" sortable="true" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" width="110"/>
              <ReportColumnConfig field="application" header="rept_lcm_request_status_col_app" property="application" sortable="true" width="110"/>
              <ReportColumnConfig field="account" header="rept_lcm_request_status_col_account" property="account" sortable="true" width="110"/>
              <ReportColumnConfig field="operation" header="rept_lcm_request_status_col_operation" property="operation" sortable="true" width="110"/>
              <ReportColumnConfig field="approvers" header="rept_lcm_request_status_col_approver" property="approvers" sortable="true" width="110"/>
              <ReportColumnConfig field="rejecters" header="rept_lcm_request_status_col_rejecter" property="rejecters" sortable="true" width="110"/>
              <ReportColumnConfig field="status" header="rept_lcm_request_status_col_status" property="status" sortable="true" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" property="requestorComments" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" property="workItemComments" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" property="completionComments" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays information about account requests from LCM in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAccountRequestStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="approvers" type="Identity">
        <Description>rept_input_lcm_request_status_report_approver</Description>
      </Argument>
      <Argument multi="true" name="requestors" type="Identity">
        <Description>rept_input_lcm_request_status_report_requester</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_lcm_request_status_report_apps</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Password Management Requests Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="rept_password_management_title">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Password Management Requests Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requester" header="rept_lcm_request_status_col_requester" property="requester" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="owner" header="rept_lcm_request_status_col_owner" property="owner" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="application" header="rept_lcm_request_status_col_app" property="application" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="account" header="rept_lcm_request_status_col_account" property="account" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="cause" header="rept_password_management_col_cause" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="provisioningState" header="rept_lcm_request_status_col_provisioning_status" valueClass="java.lang.String" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
      <entry key="reportTitle" value="rept_password_management_title"/>
    </Map>
  </Attributes>
  <Description>Displays information about password managements requests</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessPasswordManagementReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="applications" type="Application">
        <Description>rept_input_lcm_request_status_report_apps</Description>
      </Argument>
      <Argument multi="true" name="roles" type="Role">
        <Description>rept_input_lcm_request_status_report_roles</Description>
      </Argument>
      <Argument multi="true" name="requestors" type="Identity">
        <Description>rept_input_lcm_request_status_report_requester</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument multi="true" name="cause" type="string">
        <Description>rept_input_password_management_cause</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.reporting.LiveReportExecutor" name="Registration Requests Status Report" progressMode="Percentage" resultAction="Rename" subType="Lifecycle Manager Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="auditEventTypes">
        <value>
          <List>
            <String>Registration</String>
          </List>
        </value>
      </entry>
      <entry key="report">
        <value>
          <LiveReport title="rept_lcm_registration_request_status_title">
            <DataSource dataSourceClass="sailpoint.reporting.datasource.LcmIdentityRequestStatusJavaDataSource" type="Java"/>
            <ReportForm>
              <Reference class="sailpoint.object.Form" name="Registration Request Report Form"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="requestId" header="rept_lcm_request_status_col_request_id" property="requestId" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestedFor" header="rept_lcm_request_status_col_requested_for" property="requestedFor" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="created" header="rept_lcm_request_status_col_request_date" property="created" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="operation" header="rept_lcm_request_status_col_operation" property="opertation" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="approvers" header="rept_lcm_request_status_col_approver" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="rejecters" header="rept_lcm_request_status_col_rejecter" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="status" header="rept_lcm_request_status_col_status" property="status" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig dateFormat="short" field="completionDateString" header="rept_lcm_request_status_col_completion_date" property="completionDateString" sortable="true" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="requestorComments" header="rept_lcm_request_status_col_requester_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="workItemComments" header="rept_lcm_request_status_col_work_item_comments" valueClass="java.lang.String" width="110"/>
              <ReportColumnConfig field="completionComments" header="rept_lcm_request_status_col_completion_comments" valueClass="java.lang.String" width="110"/>
            </Columns>
          </LiveReport>
        </value>
      </entry>
      <entry key="reportTitle" value="rept_lcm_registration_request_status_title"/>
    </Map>
  </Attributes>
  <Description>Displays information about registration requests from LCM in detailed format.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="FullAccessAttributeRequestStatusReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="approvers" type="Identity">
        <Description>rept_input_lcm_request_status_report_approver</Description>
      </Argument>
      <Argument multi="true" name="targetIdentities" type="Identity">
        <Description>rept_input_lcm_request_status_report_target_identity</Description>
      </Argument>
      <Argument name="status" type="string">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="requestDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
      <Argument name="completionDateRange" type="daterange">
        <Description>rept_input_lcm_request_status_report_status</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.BatchRequestTaskExecutor" hidden="true" name="Batch Request Processing Task" subType="task_item_type_system" template="true" type="System">
  <Description>
          Process batch requests
      </Description>
  <Signature>
    <Inputs>
      <Argument name="batchRequestId" required="true" type="string"/>
    </Inputs>
    <Returns>
      <Argument name="recordsProcessed" type="int">
        <Prompt>Total processed:</Prompt>
      </Argument>
      <Argument name="recordsSuccess" type="int">
        <Prompt>Total success:</Prompt>
      </Argument>
      <Argument name="recordsFail" type="int">
        <Prompt>Total failed:</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition executor="sailpoint.task.NativeIdentityChangeEventResetter" name="Reset Failed NativeIdentityChange Events" subType="task_item_type_system" template="true" type="System">
  <Attributes>
    <Map>
      <entry key="pruneDupDifferByCase" value="true"/>
      <entry key="resetAndProcess" value="true"/>
    </Map>
  </Attributes>
  <Description>Reset Failed NativeIdentityChange Events and reprocess those events.</Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_reset_nice_prune_dup_differ_by_case" name="pruneDupDifferByCase" type="boolean">
        <Prompt>task_in_reset_nice_prune_dup_differ_by_case</Prompt>
      </Argument>
      <Argument helpKey="help_task_reset_nice_reprocess" name="resetAndProcess" type="boolean">
        <Prompt>task_in_reset_nice_reprocess</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="dupAccountEvents" type="int">
        <Prompt>task_out_reset_nice_dup_account_events</Prompt>
      </Argument>
      <Argument name="dupAccountEventsPruned" type="int">
        <Prompt>task_out_reset_nice_dup_account_events_pruned</Prompt>
      </Argument>
      <Argument name="failedAccountEvents" type="int">
        <Prompt>task_out_reset_nice_failed_account_events</Prompt>
      </Argument>
      <Argument name="accountEventsReset" type="int">
        <Prompt>task_out_reset_nice_account_events_reset</Prompt>
      </Argument>
      <Argument name="dupGroupEvents" type="int">
        <Prompt>task_out_reset_nice_dup_group_events</Prompt>
      </Argument>
      <Argument name="dupGroupEventsPruned" type="int">
        <Prompt>task_out_reset_nice_dup_group_events_pruned</Prompt>
      </Argument>
      <Argument name="failedGroupEvents" type="int">
        <Prompt>task_out_reset_nice_failed_group_events</Prompt>
      </Argument>
      <Argument name="groupEventsReset" type="int">
        <Prompt>task_out_reset_nice_group_events_reset</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition name="Refresh Identity Cube-Joiner" resultAction="Delete" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="3"/>
      <entry key="TaskDefinition.runLengthTotal" value="180"/>
      <entry key="TaskDefinition.runs" value="46"/>
      <entry key="TaskSchedule.host"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deleteDormantGroups" value="false"/>
      <entry key="disableIdentityProcessingThreshold" value="false"/>
      <entry key="disableManagerLookup" value="false"/>
      <entry key="doManualActions" value="false"/>
      <entry key="enableManualAccountSelection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="excludeInactive" value="false"/>
      <entry key="filter" value="name==&quot;53&quot;"/>
      <entry key="filterNeedsRefresh" value="false"/>
      <entry key="forceWorkflow" value="false"/>
      <entry key="includeWindowModified" value="false"/>
      <entry key="keepInactiveViolations" value="false"/>
      <entry key="markDormantScopes" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noMaintenanceWindowRetry" value="false"/>
      <entry key="noResetNeedsRefresh" value="false"/>
      <entry key="noRoleDeprovisioning" value="false"/>
      <entry key="processTriggers" value="true"/>
      <entry key="promoteAttributes" value="true"/>
      <entry key="promoteManagedAttributes" value="true"/>
      <entry key="provision" value="false"/>
      <entry key="refreshCompositeApplications" value="false"/>
      <entry key="refreshGroups" value="false"/>
      <entry key="refreshIdentityEntitlements" value="false"/>
      <entry key="refreshManagerStatus" value="true"/>
      <entry key="refreshRoleMetadata" value="false"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="synchronizeAttributes" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Template for identity refresh scans.</Description>
  <Owner>
    <Reference class="sailpoint.object.Identity" name="spadmin"/>
  </Owner>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition name="Refresh Identity Cube-Leaver" resultAction="Delete" subType="task_item_type_identity" type="Identity">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="0"/>
      <entry key="TaskDefinition.runLengthTotal" value="21"/>
      <entry key="TaskDefinition.runs" value="53"/>
      <entry key="TaskSchedule.host"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deleteDormantGroups" value="false"/>
      <entry key="disableIdentityProcessingThreshold" value="false"/>
      <entry key="disableManagerLookup" value="false"/>
      <entry key="doManualActions" value="false"/>
      <entry key="enableManualAccountSelection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="excludeInactive" value="false"/>
      <entry key="filter" value="name==&quot;53&quot;"/>
      <entry key="filterNeedsRefresh" value="false"/>
      <entry key="forceWorkflow" value="false"/>
      <entry key="includeWindowModified" value="false"/>
      <entry key="keepInactiveViolations" value="false"/>
      <entry key="markDormantScopes" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noMaintenanceWindowRetry" value="false"/>
      <entry key="noResetNeedsRefresh" value="false"/>
      <entry key="noRoleDeprovisioning" value="false"/>
      <entry key="processTriggers" value="true"/>
      <entry key="promoteAttributes" value="true"/>
      <entry key="promoteManagedAttributes" value="false"/>
      <entry key="provision" value="true"/>
      <entry key="refreshCompositeApplications" value="false"/>
      <entry key="refreshGroups" value="false"/>
      <entry key="refreshIdentityEntitlements" value="false"/>
      <entry key="refreshManagerStatus" value="true"/>
      <entry key="refreshRoleMetadata" value="false"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="synchronizeAttributes" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Template for identity refresh scans.</Description>
  <Owner>
    <Reference class="sailpoint.object.Identity" name="spadmin"/>
  </Owner>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Identity Refresh"/>
  </Parent>
</TaskDefinition>
<TaskDefinition formPath="/monitor/tasks/sequentialTask.xhtml" name="Master-Aggregation" resultAction="Delete" subType="task_item_type_generic" type="Generic">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="45"/>
      <entry key="TaskDefinition.runLengthTotal" value="45"/>
      <entry key="TaskDefinition.runs" value="1"/>
      <entry key="TaskSchedule.host"/>
      <entry key="exitOnError" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
      <entry key="taskList" value="Aggregate-Enterprise Directory, Aggregate-HR Self Service, Refresh Identity Cube"/>
      <entry key="trace" value="false"/>
    </Map>
  </Attributes>
  <Description>Template for creating a task that runs multiple other tasks.</Description>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Sequential Task Launcher"/>
  </Parent>
</TaskDefinition>
<TaskDefinition formPath="/monitor/tasks/accountAggregationTask.xhtml" name="Aggregate-HR01" resultAction="Delete" subType="task_item_type_acct_aggregation" type="AccountAggregation">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="48"/>
      <entry key="TaskDefinition.runLengthTotal" value="7690"/>
      <entry key="TaskDefinition.runs" value="158"/>
      <entry key="TaskSchedule.host"/>
      <entry key="applications" value="HR"/>
      <entry key="checkDeleted" value="false"/>
      <entry key="checkHistory" value="false"/>
      <entry key="checkPolicies" value="false"/>
      <entry key="correlateEntitlements" value="false"/>
      <entry key="correlateOnly" value="false"/>
      <entry key="correlateScope" value="false"/>
      <entry key="deltaAggregation" value="false"/>
      <entry key="enableManagedAttributeRenameDetection" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="haltOnMaxError" value="false"/>
      <entry key="logAllowedActions" value="CorrelateManual, CorrelateMaintain, CorrelateNewAccount, CorrelateReassign, Create, Ignore, Remove"/>
      <entry key="noAutoCreateApplications" value="false"/>
      <entry key="noAutoCreateScopes" value="false"/>
      <entry key="noNeedsRefresh" value="false"/>
      <entry key="noOptimizeReaggregation" value="true"/>
      <entry key="promoteManagedAttributes" value="true"/>
      <entry key="refreshScorecard" value="false"/>
      <entry key="sequential" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Task template for application account scanning.</Description>
  <Owner>
    <Reference class="sailpoint.object.Identity" name="spadmin"/>
  </Owner>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Account Aggregation"/>
  </Parent>
</TaskDefinition>
<TaskDefinition formPath="/monitor/tasks/accountGroupAggregationTask.xhtml" name="Aggregate- Groupe HR Self Service" resultAction="Delete" subType="task_item_type_acct_grp_aggregation" type="AccountGroupAggregation">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="1"/>
      <entry key="TaskDefinition.runLengthTotal" value="1"/>
      <entry key="TaskDefinition.runs" value="1"/>
      <entry key="TaskSchedule.host"/>
      <entry key="aggregationType" value="group"/>
      <entry key="applications" value="HR Self Service"/>
      <entry key="checkDeleted" value="false"/>
      <entry key="deltaAggregation" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="groupSchema"/>
      <entry key="haltOnMaxError" value="false"/>
      <entry key="promoteClassifications" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Task template for application group scanning.</Description>
  <Owner>
    <Reference class="sailpoint.object.Identity" name="spadmin"/>
  </Owner>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Account Group Aggregation"/>
  </Parent>
</TaskDefinition>
<TaskDefinition formPath="/monitor/tasks/accountGroupAggregationTask.xhtml" name="Aggregate Group-Enterprise" resultAction="Delete" subType="task_item_type_acct_grp_aggregation" type="AccountGroupAggregation">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="1"/>
      <entry key="TaskDefinition.runLengthTotal" value="1"/>
      <entry key="TaskDefinition.runs" value="1"/>
      <entry key="TaskSchedule.host"/>
      <entry key="aggregationType" value="group"/>
      <entry key="applications" value="Enterprise Directory"/>
      <entry key="checkDeleted" value="false"/>
      <entry key="deltaAggregation" value="false"/>
      <entry key="enablePartitioning" value="false"/>
      <entry key="groupSchema"/>
      <entry key="haltOnMaxError" value="false"/>
      <entry key="promoteClassifications" value="false"/>
      <entry key="taskCompletionEmailNotify" value="Disabled"/>
      <entry key="taskCompletionEmailRecipients"/>
      <entry key="taskCompletionEmailTemplate"/>
    </Map>
  </Attributes>
  <Description>Task template for application group scanning.</Description>
  <Owner>
    <Reference class="sailpoint.object.Identity" name="spadmin"/>
  </Owner>
  <Parent>
    <Reference class="sailpoint.object.TaskDefinition" name="Account Group Aggregation"/>
  </Parent>
</TaskDefinition>
<TaskDefinition deprecated="true" executor="sailpoint.task.IQServiceKeyExchangeTask" name="IQService Public Key Exchange Task" progressInterval="5000" progressMode="String" resultAction="Rename" subType="task_item_type_system" template="true" type="System">
  <Description>A task that can be used used to change the public keys that are used for IQService communications.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" name="IQServicePublicKeyExchangeTask"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_iqservice_key_exchange_select_apps" multi="true" name="applications" type="Application">
        <Prompt>task_in_iqservice_key_exchange_apps</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="iqServiceKeysExchanged" type="String">
        <Prompt>task_out_iqservices_key_exchange_updated</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
<TaskDefinition deprecated="true" executor="sailpoint.task.CEFDataExportExecutor" formPath="/monitor/tasks/cefDataExportInclude.xhtml" name="CEF Data Export" progressInterval="5000" progressMode="String" subType="task_item_type_generic" template="true" type="Generic">
  <Description>
            Template for creating a CEF data export task.
        </Description>
  <Signature>
    <Inputs>
      <Argument helpKey="help_task_cef_database" name="database" type="string">
        <Prompt>task_in_cef_data_export_database</Prompt>
      </Argument>
      <Argument helpKey="help_task_cef_username" name="username" type="string">
        <Prompt>task_in_cef_data_export_database_uname</Prompt>
      </Argument>
      <Argument helpKey="help_task_cef_password" name="password" type="secret">
        <Prompt>task_in_cef_data_export_database_password</Prompt>
      </Argument>
      <Argument helpKey="help_task_cef_driverclass" name="driverClass" type="string">
        <Prompt>task_in_cef_data_export_database_driverClass</Prompt>
      </Argument>
      <Argument helpKey="help_task_cef_dburl" name="dbUrl" type="string">
        <Prompt>task_in_cef_data_export_database_url</Prompt>
      </Argument>
      <Argument name="exportIdentities" type="boolean">
        <Prompt>task_in_cef_data_export_identities</Prompt>
      </Argument>
      <Argument name="exportIdentitiesRiskScores" type="boolean">
        <Prompt>task_in_cef_data_export_identities_risk_scores</Prompt>
      </Argument>
      <Argument name="exportAccounts" type="boolean">
        <Prompt>task_in_cef_data_export_accounts</Prompt>
      </Argument>
      <Argument name="exportAudits" type="boolean">
        <Prompt>task_in_cef_data_export_audits</Prompt>
      </Argument>
      <Argument name="exportSysLogs" type="boolean">
        <Prompt>task_in_cef_data_export_syslogs</Prompt>
      </Argument>
      <Argument name="identitiesExportMode" type="string">
        <Prompt>task_in_cef_data_export_identities_mode</Prompt>
      </Argument>
      <Argument name="accountsExportMode" type="string">
        <Prompt>task_in_cef_data_export_accounts_mode</Prompt>
      </Argument>
      <Argument name="auditsExportMode" type="string">
        <Prompt>task_in_cef_data_export_audits_mode</Prompt>
      </Argument>
      <Argument name="syslogsExportMode" type="string">
        <Prompt>task_in_cef_data_export_syslogs_mode</Prompt>
      </Argument>
      <Argument name="identitiesExportFilter" type="string">
        <Prompt>task_in_cef_data_export_identities_filter</Prompt>
      </Argument>
      <Argument name="accountsExportFilter" type="string">
        <Prompt>task_in_cef_data_export_accounts_filter</Prompt>
      </Argument>
      <Argument name="auditsExportFilter" type="string">
        <Prompt>task_in_cef_data_export_audits_filter</Prompt>
      </Argument>
      <Argument name="syslogsExportFilter" type="string">
        <Prompt>task_in_cef_data_export_syslogs_filter</Prompt>
      </Argument>
      <Argument name="promoteManagedAttributes" type="boolean">
        <Prompt>task_in_identity_refresh_promote_managed_attributes</Prompt>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="identitiesExported" type="int">
        <Prompt>task_out_cef_data_export_identities</Prompt>
      </Argument>
      <Argument name="accountsExported" type="int">
        <Prompt>task_out_cef_data_export_accounts</Prompt>
      </Argument>
      <Argument name="auditsExported" type="int">
        <Prompt>task_out_cef_data_export_audits</Prompt>
      </Argument>
      <Argument name="syslogsExported" type="int">
        <Prompt>task_out_cef_data_export_syslogs</Prompt>
      </Argument>
      <Argument name="identitiesPruned" type="int">
        <Prompt>task_out_cef_data_export_pruned_identities</Prompt>
      </Argument>
      <Argument name="accountsPruned" type="int">
        <Prompt>task_out_cef_data_export_pruned_accounts</Prompt>
      </Argument>
      <Argument name="auditsPruned" type="int">
        <Prompt>task_out_cef_data_export_pruned_audits</Prompt>
      </Argument>
      <Argument name="syslogsPruned" type="int">
        <Prompt>task_out_cef_data_export_pruned_syslogs</Prompt>
      </Argument>
    </Returns>
  </Signature>
</TaskDefinition>
</sailpoint>
